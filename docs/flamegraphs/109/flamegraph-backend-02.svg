<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="974"><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="0.8214%" y="213" width="0.1027%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="1"/><text x="1.0714%" y="223.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (4 samples, 0.41%)</title><rect x="0.6160%" y="229" width="0.4107%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="4"/><text x="0.8660%" y="239.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.10%)</title><rect x="0.9240%" y="213" width="0.1027%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="1"/><text x="1.1740%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="1.2320%" y="213" width="0.1027%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="1"/><text x="1.4820%" y="223.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.10%)</title><rect x="1.3347%" y="213" width="0.1027%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="1"/><text x="1.5847%" y="223.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (21 samples, 2.16%)</title><rect x="1.4374%" y="213" width="2.1561%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="21"/><text x="1.6874%" y="223.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (16 samples, 1.64%)</title><rect x="1.9507%" y="197" width="1.6427%" height="15" fill="rgb(207,160,47)" fg:x="19" fg:w="16"/><text x="2.2007%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (15 samples, 1.54%)</title><rect x="2.0534%" y="181" width="1.5400%" height="15" fill="rgb(228,23,34)" fg:x="20" fg:w="15"/><text x="2.3034%" y="191.50"></text></g><g><title>tokio::task::local::Shared::schedule (12 samples, 1.23%)</title><rect x="2.3614%" y="165" width="1.2320%" height="15" fill="rgb(218,30,26)" fg:x="23" fg:w="12"/><text x="2.6114%" y="175.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (4 samples, 0.41%)</title><rect x="3.1828%" y="149" width="0.4107%" height="15" fill="rgb(220,122,19)" fg:x="31" fg:w="4"/><text x="3.4328%" y="159.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (4 samples, 0.41%)</title><rect x="3.1828%" y="133" width="0.4107%" height="15" fill="rgb(250,228,42)" fg:x="31" fg:w="4"/><text x="3.4328%" y="143.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (2 samples, 0.21%)</title><rect x="3.3881%" y="117" width="0.2053%" height="15" fill="rgb(240,193,28)" fg:x="33" fg:w="2"/><text x="3.6381%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (33 samples, 3.39%)</title><rect x="0.3080%" y="245" width="3.3881%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="33"/><text x="0.5580%" y="255.50">tok..</text></g><g><title>tokio::runtime::time::Driver::park_internal (26 samples, 2.67%)</title><rect x="1.0267%" y="229" width="2.6694%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="26"/><text x="1.2767%" y="239.50">to..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.10%)</title><rect x="3.5934%" y="213" width="0.1027%" height="15" fill="rgb(217,207,13)" fg:x="35" fg:w="1"/><text x="3.8434%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (1 samples, 0.10%)</title><rect x="3.6961%" y="245" width="0.1027%" height="15" fill="rgb(231,73,38)" fg:x="36" fg:w="1"/><text x="3.9461%" y="255.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (3 samples, 0.31%)</title><rect x="4.0041%" y="229" width="0.3080%" height="15" fill="rgb(225,20,46)" fg:x="39" fg:w="3"/><text x="4.2541%" y="239.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.10%)</title><rect x="4.2094%" y="213" width="0.1027%" height="15" fill="rgb(210,31,41)" fg:x="41" fg:w="1"/><text x="4.4594%" y="223.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.31%)</title><rect x="6.6735%" y="165" width="0.3080%" height="15" fill="rgb(221,200,47)" fg:x="65" fg:w="3"/><text x="6.9235%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.21%)</title><rect x="6.7762%" y="149" width="0.2053%" height="15" fill="rgb(226,26,5)" fg:x="66" fg:w="2"/><text x="7.0262%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (2 samples, 0.21%)</title><rect x="6.9815%" y="165" width="0.2053%" height="15" fill="rgb(249,33,26)" fg:x="68" fg:w="2"/><text x="7.2315%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.21%)</title><rect x="6.9815%" y="149" width="0.2053%" height="15" fill="rgb(235,183,28)" fg:x="68" fg:w="2"/><text x="7.2315%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.21%)</title><rect x="6.9815%" y="133" width="0.2053%" height="15" fill="rgb(221,5,38)" fg:x="68" fg:w="2"/><text x="7.2315%" y="143.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (3 samples, 0.31%)</title><rect x="10.0616%" y="133" width="0.3080%" height="15" fill="rgb(247,18,42)" fg:x="98" fg:w="3"/><text x="10.3116%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.21%)</title><rect x="10.1643%" y="117" width="0.2053%" height="15" fill="rgb(241,131,45)" fg:x="99" fg:w="2"/><text x="10.4143%" y="127.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.10%)</title><rect x="10.3696%" y="133" width="0.1027%" height="15" fill="rgb(249,31,29)" fg:x="101" fg:w="1"/><text x="10.6196%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="10.4723%" y="133" width="0.1027%" height="15" fill="rgb(225,111,53)" fg:x="102" fg:w="1"/><text x="10.7223%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="10.5749%" y="133" width="0.1027%" height="15" fill="rgb(238,160,17)" fg:x="103" fg:w="1"/><text x="10.8249%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (9 samples, 0.92%)</title><rect x="10.6776%" y="133" width="0.9240%" height="15" fill="rgb(214,148,48)" fg:x="104" fg:w="9"/><text x="10.9276%" y="143.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (4 samples, 0.41%)</title><rect x="11.6016%" y="133" width="0.4107%" height="15" fill="rgb(232,36,49)" fg:x="113" fg:w="4"/><text x="11.8516%" y="143.50"></text></g><g><title>http::method::Method::from_bytes (1 samples, 0.10%)</title><rect x="12.0123%" y="133" width="0.1027%" height="15" fill="rgb(209,103,24)" fg:x="117" fg:w="1"/><text x="12.2623%" y="143.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (2 samples, 0.21%)</title><rect x="12.1150%" y="133" width="0.2053%" height="15" fill="rgb(229,88,8)" fg:x="118" fg:w="2"/><text x="12.3650%" y="143.50"></text></g><g><title>httparse::parse_headers_iter_uninit (6 samples, 0.62%)</title><rect x="12.3203%" y="133" width="0.6160%" height="15" fill="rgb(213,181,19)" fg:x="120" fg:w="6"/><text x="12.5703%" y="143.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (1 samples, 0.10%)</title><rect x="12.8337%" y="117" width="0.1027%" height="15" fill="rgb(254,191,54)" fg:x="125" fg:w="1"/><text x="13.0837%" y="127.50"></text></g><g><title>httparse::simd::avx2::match_uri_vectored (1 samples, 0.10%)</title><rect x="12.9363%" y="133" width="0.1027%" height="15" fill="rgb(241,83,37)" fg:x="126" fg:w="1"/><text x="13.1863%" y="143.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (47 samples, 4.83%)</title><rect x="8.3162%" y="149" width="4.8255%" height="15" fill="rgb(233,36,39)" fg:x="81" fg:w="47"/><text x="8.5662%" y="159.50">&lt;actix..</text></g><g><title>httparse::simd::runtime::match_uri_vectored (1 samples, 0.10%)</title><rect x="13.0390%" y="133" width="0.1027%" height="15" fill="rgb(226,3,54)" fg:x="127" fg:w="1"/><text x="13.2890%" y="143.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (1 samples, 0.10%)</title><rect x="14.4764%" y="133" width="0.1027%" height="15" fill="rgb(245,192,40)" fg:x="141" fg:w="1"/><text x="14.7264%" y="143.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (2 samples, 0.21%)</title><rect x="14.5791%" y="133" width="0.2053%" height="15" fill="rgb(238,167,29)" fg:x="142" fg:w="2"/><text x="14.8291%" y="143.50"></text></g><g><title>actix_http::extensions::Extensions::insert (1 samples, 0.10%)</title><rect x="14.6817%" y="117" width="0.1027%" height="15" fill="rgb(232,182,51)" fg:x="143" fg:w="1"/><text x="14.9317%" y="127.50"></text></g><g><title>actix_router::path::Path&lt;T&gt;::unprocessed (1 samples, 0.10%)</title><rect x="14.7844%" y="133" width="0.1027%" height="15" fill="rgb(231,60,39)" fg:x="144" fg:w="1"/><text x="15.0344%" y="143.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="14.8871%" y="133" width="0.1027%" height="15" fill="rgb(208,69,12)" fg:x="145" fg:w="1"/><text x="15.1371%" y="143.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (21 samples, 2.16%)</title><rect x="13.1417%" y="149" width="2.1561%" height="15" fill="rgb(235,93,37)" fg:x="128" fg:w="21"/><text x="13.3917%" y="159.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (3 samples, 0.31%)</title><rect x="14.9897%" y="133" width="0.3080%" height="15" fill="rgb(213,116,39)" fg:x="146" fg:w="3"/><text x="15.2397%" y="143.50"></text></g><g><title> 16]&gt; (3 samples, 0.31%)</title><rect x="14.9897%" y="117" width="0.3080%" height="15" fill="rgb(222,207,29)" fg:x="146" fg:w="3"/><text x="15.2397%" y="127.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (2 samples, 0.21%)</title><rect x="16.5298%" y="117" width="0.2053%" height="15" fill="rgb(206,96,30)" fg:x="161" fg:w="2"/><text x="16.7798%" y="127.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (15 samples, 1.54%)</title><rect x="15.2977%" y="149" width="1.5400%" height="15" fill="rgb(218,138,4)" fg:x="149" fg:w="15"/><text x="15.5477%" y="159.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (15 samples, 1.54%)</title><rect x="15.2977%" y="133" width="1.5400%" height="15" fill="rgb(250,191,14)" fg:x="149" fg:w="15"/><text x="15.5477%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.10%)</title><rect x="16.7351%" y="117" width="0.1027%" height="15" fill="rgb(239,60,40)" fg:x="163" fg:w="1"/><text x="16.9851%" y="127.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (1 samples, 0.10%)</title><rect x="16.8378%" y="149" width="0.1027%" height="15" fill="rgb(206,27,48)" fg:x="164" fg:w="1"/><text x="17.0878%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (2 samples, 0.21%)</title><rect x="16.9405%" y="149" width="0.2053%" height="15" fill="rgb(225,35,8)" fg:x="165" fg:w="2"/><text x="17.1905%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="17.0431%" y="133" width="0.1027%" height="15" fill="rgb(250,213,24)" fg:x="166" fg:w="1"/><text x="17.2931%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="17.0431%" y="117" width="0.1027%" height="15" fill="rgb(247,123,22)" fg:x="166" fg:w="1"/><text x="17.2931%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (2 samples, 0.21%)</title><rect x="17.1458%" y="149" width="0.2053%" height="15" fill="rgb(231,138,38)" fg:x="167" fg:w="2"/><text x="17.3958%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (100 samples, 10.27%)</title><rect x="7.1869%" y="165" width="10.2669%" height="15" fill="rgb(231,145,46)" fg:x="70" fg:w="100"/><text x="7.4369%" y="175.50">actix_http::h1:..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="17.3511%" y="149" width="0.1027%" height="15" fill="rgb(251,118,11)" fg:x="169" fg:w="1"/><text x="17.6011%" y="159.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (2 samples, 0.21%)</title><rect x="18.4805%" y="149" width="0.2053%" height="15" fill="rgb(217,147,25)" fg:x="180" fg:w="2"/><text x="18.7305%" y="159.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="18.5832%" y="133" width="0.1027%" height="15" fill="rgb(247,81,37)" fg:x="181" fg:w="1"/><text x="18.8332%" y="143.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (2 samples, 0.21%)</title><rect x="18.6858%" y="149" width="0.2053%" height="15" fill="rgb(209,12,38)" fg:x="182" fg:w="2"/><text x="18.9358%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.21%)</title><rect x="19.9179%" y="117" width="0.2053%" height="15" fill="rgb(227,1,9)" fg:x="194" fg:w="2"/><text x="20.1679%" y="127.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.10%)</title><rect x="20.3285%" y="101" width="0.1027%" height="15" fill="rgb(248,47,43)" fg:x="198" fg:w="1"/><text x="20.5785%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="20.3285%" y="85" width="0.1027%" height="15" fill="rgb(221,10,30)" fg:x="198" fg:w="1"/><text x="20.5785%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (2 samples, 0.21%)</title><rect x="20.4312%" y="85" width="0.2053%" height="15" fill="rgb(210,229,1)" fg:x="199" fg:w="2"/><text x="20.6812%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (3 samples, 0.31%)</title><rect x="20.4312%" y="101" width="0.3080%" height="15" fill="rgb(222,148,37)" fg:x="199" fg:w="3"/><text x="20.6812%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.10%)</title><rect x="20.6366%" y="85" width="0.1027%" height="15" fill="rgb(234,67,33)" fg:x="201" fg:w="1"/><text x="20.8866%" y="95.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 1.13%)</title><rect x="20.1232%" y="117" width="1.1294%" height="15" fill="rgb(247,98,35)" fg:x="196" fg:w="11"/><text x="20.3732%" y="127.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (5 samples, 0.51%)</title><rect x="20.7392%" y="101" width="0.5133%" height="15" fill="rgb(247,138,52)" fg:x="202" fg:w="5"/><text x="20.9892%" y="111.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.10%)</title><rect x="21.8686%" y="85" width="0.1027%" height="15" fill="rgb(213,79,30)" fg:x="213" fg:w="1"/><text x="22.1186%" y="95.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}} (9 samples, 0.92%)</title><rect x="21.2526%" y="117" width="0.9240%" height="15" fill="rgb(246,177,23)" fg:x="207" fg:w="9"/><text x="21.5026%" y="127.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 0.31%)</title><rect x="21.8686%" y="101" width="0.3080%" height="15" fill="rgb(230,62,27)" fg:x="213" fg:w="3"/><text x="22.1186%" y="111.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.21%)</title><rect x="21.9713%" y="85" width="0.2053%" height="15" fill="rgb(216,154,8)" fg:x="214" fg:w="2"/><text x="22.2213%" y="95.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.41%)</title><rect x="22.1766%" y="117" width="0.4107%" height="15" fill="rgb(244,35,45)" fg:x="216" fg:w="4"/><text x="22.4266%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.31%)</title><rect x="22.2793%" y="101" width="0.3080%" height="15" fill="rgb(251,115,12)" fg:x="217" fg:w="3"/><text x="22.5293%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (4 samples, 0.41%)</title><rect x="22.6899%" y="101" width="0.4107%" height="15" fill="rgb(240,54,50)" fg:x="221" fg:w="4"/><text x="22.9399%" y="111.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.82%)</title><rect x="22.5873%" y="117" width="0.8214%" height="15" fill="rgb(233,84,52)" fg:x="220" fg:w="8"/><text x="22.8373%" y="127.50"></text></g><g><title>ryu::pretty::format64 (3 samples, 0.31%)</title><rect x="23.1006%" y="101" width="0.3080%" height="15" fill="rgb(207,117,47)" fg:x="225" fg:w="3"/><text x="23.3506%" y="111.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (1 samples, 0.10%)</title><rect x="23.4086%" y="117" width="0.1027%" height="15" fill="rgb(249,43,39)" fg:x="228" fg:w="1"/><text x="23.6586%" y="127.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (4 samples, 0.41%)</title><rect x="23.5113%" y="117" width="0.4107%" height="15" fill="rgb(209,38,44)" fg:x="229" fg:w="4"/><text x="23.7613%" y="127.50"></text></g><g><title>actix_http::header::map::HeaderMap::insert (3 samples, 0.31%)</title><rect x="23.6140%" y="101" width="0.3080%" height="15" fill="rgb(236,212,23)" fg:x="230" fg:w="3"/><text x="23.8640%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.21%)</title><rect x="23.7166%" y="85" width="0.2053%" height="15" fill="rgb(242,79,21)" fg:x="231" fg:w="2"/><text x="23.9666%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_web::extract::tuple_from_req::TupleFromRequest2&lt;actix_web::types::json::Json&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;,actix_web::data::Data&lt;alloc::boxed::Box&lt;dyn rinha_de_backend::domain::payment_producer::PaymentProducer&gt;&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="23.9220%" y="117" width="0.1027%" height="15" fill="rgb(211,96,35)" fg:x="233" fg:w="1"/><text x="24.1720%" y="127.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (52 samples, 5.34%)</title><rect x="18.8912%" y="149" width="5.3388%" height="15" fill="rgb(253,215,40)" fg:x="184" fg:w="52"/><text x="19.1412%" y="159.50">&lt;actix_..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (50 samples, 5.13%)</title><rect x="19.0965%" y="133" width="5.1335%" height="15" fill="rgb(211,81,21)" fg:x="186" fg:w="50"/><text x="19.3465%" y="143.50">actix_..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (2 samples, 0.21%)</title><rect x="24.0246%" y="117" width="0.2053%" height="15" fill="rgb(208,190,38)" fg:x="234" fg:w="2"/><text x="24.2746%" y="127.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (10 samples, 1.03%)</title><rect x="24.2300%" y="133" width="1.0267%" height="15" fill="rgb(235,213,38)" fg:x="236" fg:w="10"/><text x="24.4800%" y="143.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (10 samples, 1.03%)</title><rect x="24.2300%" y="117" width="1.0267%" height="15" fill="rgb(237,122,38)" fg:x="236" fg:w="10"/><text x="24.4800%" y="127.50"></text></g><g><title>actix_http::helpers::write_content_length (1 samples, 0.10%)</title><rect x="25.1540%" y="101" width="0.1027%" height="15" fill="rgb(244,218,35)" fg:x="245" fg:w="1"/><text x="25.4040%" y="111.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (77 samples, 7.91%)</title><rect x="17.4538%" y="165" width="7.9055%" height="15" fill="rgb(240,68,47)" fg:x="170" fg:w="77"/><text x="17.7038%" y="175.50">actix_http:..</text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (11 samples, 1.13%)</title><rect x="24.2300%" y="149" width="1.1294%" height="15" fill="rgb(210,16,53)" fg:x="236" fg:w="11"/><text x="24.4800%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (1 samples, 0.10%)</title><rect x="25.2567%" y="133" width="0.1027%" height="15" fill="rgb(235,124,12)" fg:x="246" fg:w="1"/><text x="25.5067%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (1 samples, 0.10%)</title><rect x="25.3593%" y="165" width="0.1027%" height="15" fill="rgb(224,169,11)" fg:x="247" fg:w="1"/><text x="25.6093%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (2 samples, 0.21%)</title><rect x="25.4620%" y="165" width="0.2053%" height="15" fill="rgb(250,166,2)" fg:x="248" fg:w="2"/><text x="25.7120%" y="175.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (2 samples, 0.21%)</title><rect x="25.6674%" y="165" width="0.2053%" height="15" fill="rgb(242,216,29)" fg:x="250" fg:w="2"/><text x="25.9174%" y="175.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (2 samples, 0.21%)</title><rect x="25.6674%" y="149" width="0.2053%" height="15" fill="rgb(230,116,27)" fg:x="250" fg:w="2"/><text x="25.9174%" y="159.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="25.9754%" y="149" width="0.1027%" height="15" fill="rgb(228,99,48)" fg:x="253" fg:w="1"/><text x="26.2254%" y="159.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.10%)</title><rect x="25.9754%" y="133" width="0.1027%" height="15" fill="rgb(253,11,6)" fg:x="253" fg:w="1"/><text x="26.2254%" y="143.50"></text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (3 samples, 0.31%)</title><rect x="25.8727%" y="165" width="0.3080%" height="15" fill="rgb(247,143,39)" fg:x="252" fg:w="3"/><text x="26.1227%" y="175.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.10%)</title><rect x="26.0780%" y="149" width="0.1027%" height="15" fill="rgb(236,97,10)" fg:x="254" fg:w="1"/><text x="26.3280%" y="159.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.10%)</title><rect x="26.0780%" y="133" width="0.1027%" height="15" fill="rgb(233,208,19)" fg:x="254" fg:w="1"/><text x="26.3280%" y="143.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (205 samples, 21.05%)</title><rect x="5.2361%" y="181" width="21.0472%" height="15" fill="rgb(216,164,2)" fg:x="51" fg:w="205"/><text x="5.4861%" y="191.50">&lt;actix_http::h1::dispatcher::Disp..</text></g><g><title>tokio::time::sleep::Sleep::new_timeout (1 samples, 0.10%)</title><rect x="26.1807%" y="165" width="0.1027%" height="15" fill="rgb(220,129,5)" fg:x="255" fg:w="1"/><text x="26.4307%" y="175.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (211 samples, 21.66%)</title><rect x="4.8255%" y="197" width="21.6632%" height="15" fill="rgb(242,17,10)" fg:x="47" fg:w="211"/><text x="5.0755%" y="207.50">&lt;actix_server::service::StreamServ..</text></g><g><title>&lt;actix_service::and_then::AndThenServiceResponse&lt;A,B,Req&gt; as core::future::future::Future&gt;::poll (2 samples, 0.21%)</title><rect x="26.2834%" y="181" width="0.2053%" height="15" fill="rgb(242,107,0)" fg:x="256" fg:w="2"/><text x="26.5334%" y="191.50"></text></g><g><title>&lt;actix_http::service::HttpServiceHandler&lt;T,S,B,X,U&gt; as actix_service::Service&lt;(T,actix_http::Protocol,core::option::Option&lt;core::net::socket_addr::SocketAddr&gt;)&gt;&gt;::call (1 samples, 0.10%)</title><rect x="26.3860%" y="165" width="0.1027%" height="15" fill="rgb(251,28,31)" fg:x="257" fg:w="1"/><text x="26.6360%" y="175.50"></text></g><g><title>actix-rt|system (259 samples, 26.59%)</title><rect x="0.0000%" y="325" width="26.5914%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="259"/><text x="0.2500%" y="335.50">actix-rt|system</text></g><g><title>__clone (259 samples, 26.59%)</title><rect x="0.0000%" y="309" width="26.5914%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="259"/><text x="0.2500%" y="319.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (259 samples, 26.59%)</title><rect x="0.0000%" y="293" width="26.5914%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="259"/><text x="0.2500%" y="303.50">std::sys::pal::unix::thread::Thread::new::t..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (259 samples, 26.59%)</title><rect x="0.0000%" y="277" width="26.5914%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="259"/><text x="0.2500%" y="287.50">core::ops::function::FnOnce::call_once{{vta..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (259 samples, 26.59%)</title><rect x="0.0000%" y="261" width="26.5914%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="259"/><text x="0.2500%" y="271.50">std::sys::backtrace::__rust_begin_short_bac..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (222 samples, 22.79%)</title><rect x="3.7988%" y="245" width="22.7926%" height="15" fill="rgb(247,70,30)" fg:x="37" fg:w="222"/><text x="4.0488%" y="255.50">tokio::task::local::LocalSet::run_un..</text></g><g><title>tokio::task::local::LocalSet::tick (217 samples, 22.28%)</title><rect x="4.3121%" y="229" width="22.2793%" height="15" fill="rgb(212,68,19)" fg:x="42" fg:w="217"/><text x="4.5621%" y="239.50">tokio::task::local::LocalSet::tick</text></g><g><title>tokio::runtime::task::raw::poll (212 samples, 21.77%)</title><rect x="4.8255%" y="213" width="21.7659%" height="15" fill="rgb(240,187,13)" fg:x="47" fg:w="212"/><text x="5.0755%" y="223.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.10%)</title><rect x="26.4887%" y="197" width="0.1027%" height="15" fill="rgb(223,113,26)" fg:x="258" fg:w="1"/><text x="26.7387%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.31%)</title><rect x="28.6448%" y="229" width="0.3080%" height="15" fill="rgb(206,192,2)" fg:x="279" fg:w="3"/><text x="28.8948%" y="239.50"></text></g><g><title>tokio::runtime::driver::Driver::park (3 samples, 0.31%)</title><rect x="29.0554%" y="213" width="0.3080%" height="15" fill="rgb(241,108,4)" fg:x="283" fg:w="3"/><text x="29.3054%" y="223.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (8 samples, 0.82%)</title><rect x="29.3634%" y="213" width="0.8214%" height="15" fill="rgb(247,173,49)" fg:x="286" fg:w="8"/><text x="29.6134%" y="223.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (7 samples, 0.72%)</title><rect x="29.4661%" y="197" width="0.7187%" height="15" fill="rgb(224,114,35)" fg:x="287" fg:w="7"/><text x="29.7161%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.31%)</title><rect x="31.0062%" y="197" width="0.3080%" height="15" fill="rgb(245,159,27)" fg:x="302" fg:w="3"/><text x="31.2562%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.10%)</title><rect x="31.3142%" y="197" width="0.1027%" height="15" fill="rgb(245,172,44)" fg:x="305" fg:w="1"/><text x="31.5642%" y="207.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (3 samples, 0.31%)</title><rect x="31.4168%" y="197" width="0.3080%" height="15" fill="rgb(236,23,11)" fg:x="306" fg:w="3"/><text x="31.6668%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.21%)</title><rect x="33.0595%" y="181" width="0.2053%" height="15" fill="rgb(205,117,38)" fg:x="322" fg:w="2"/><text x="33.3095%" y="191.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.10%)</title><rect x="33.1622%" y="165" width="0.1027%" height="15" fill="rgb(237,72,25)" fg:x="323" fg:w="1"/><text x="33.4122%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="33.6756%" y="165" width="0.1027%" height="15" fill="rgb(244,70,9)" fg:x="328" fg:w="1"/><text x="33.9256%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (7 samples, 0.72%)</title><rect x="34.1889%" y="149" width="0.7187%" height="15" fill="rgb(217,125,39)" fg:x="333" fg:w="7"/><text x="34.4389%" y="159.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (32 samples, 3.29%)</title><rect x="31.7248%" y="197" width="3.2854%" height="15" fill="rgb(235,36,10)" fg:x="309" fg:w="32"/><text x="31.9748%" y="207.50">tok..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (17 samples, 1.75%)</title><rect x="33.2649%" y="181" width="1.7454%" height="15" fill="rgb(251,123,47)" fg:x="324" fg:w="17"/><text x="33.5149%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 1.23%)</title><rect x="33.7782%" y="165" width="1.2320%" height="15" fill="rgb(221,13,13)" fg:x="329" fg:w="12"/><text x="34.0282%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.10%)</title><rect x="34.9076%" y="149" width="0.1027%" height="15" fill="rgb(238,131,9)" fg:x="340" fg:w="1"/><text x="35.1576%" y="159.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.10%)</title><rect x="35.0103%" y="197" width="0.1027%" height="15" fill="rgb(211,50,8)" fg:x="341" fg:w="1"/><text x="35.2603%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (66 samples, 6.78%)</title><rect x="28.9528%" y="229" width="6.7762%" height="15" fill="rgb(245,182,24)" fg:x="282" fg:w="66"/><text x="29.2028%" y="239.50">tokio::ru..</text></g><g><title>tokio::runtime::time::Driver::park_internal (54 samples, 5.54%)</title><rect x="30.1848%" y="213" width="5.5441%" height="15" fill="rgb(242,14,37)" fg:x="294" fg:w="54"/><text x="30.4348%" y="223.50">tokio::..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (6 samples, 0.62%)</title><rect x="35.1129%" y="197" width="0.6160%" height="15" fill="rgb(246,228,12)" fg:x="342" fg:w="6"/><text x="35.3629%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (7 samples, 0.72%)</title><rect x="35.7290%" y="229" width="0.7187%" height="15" fill="rgb(213,55,15)" fg:x="348" fg:w="7"/><text x="35.9790%" y="239.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.21%)</title><rect x="39.9384%" y="197" width="0.2053%" height="15" fill="rgb(209,9,3)" fg:x="389" fg:w="2"/><text x="40.1884%" y="207.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (2 samples, 0.21%)</title><rect x="39.9384%" y="181" width="0.2053%" height="15" fill="rgb(230,59,30)" fg:x="389" fg:w="2"/><text x="40.1884%" y="191.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.10%)</title><rect x="40.0411%" y="165" width="0.1027%" height="15" fill="rgb(209,121,21)" fg:x="390" fg:w="1"/><text x="40.2911%" y="175.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.10%)</title><rect x="40.0411%" y="149" width="0.1027%" height="15" fill="rgb(220,109,13)" fg:x="390" fg:w="1"/><text x="40.2911%" y="159.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.10%)</title><rect x="40.0411%" y="133" width="0.1027%" height="15" fill="rgb(232,18,1)" fg:x="390" fg:w="1"/><text x="40.2911%" y="143.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.21%)</title><rect x="41.7864%" y="181" width="0.2053%" height="15" fill="rgb(215,41,42)" fg:x="407" fg:w="2"/><text x="42.0364%" y="191.50"></text></g><g><title>bytes::bytes::Bytes::slice (2 samples, 0.21%)</title><rect x="41.9918%" y="181" width="0.2053%" height="15" fill="rgb(224,123,36)" fg:x="409" fg:w="2"/><text x="42.2418%" y="191.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.10%)</title><rect x="42.1971%" y="181" width="0.1027%" height="15" fill="rgb(240,125,3)" fg:x="411" fg:w="1"/><text x="42.4471%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (1 samples, 0.10%)</title><rect x="42.2998%" y="181" width="0.1027%" height="15" fill="rgb(205,98,50)" fg:x="412" fg:w="1"/><text x="42.5498%" y="191.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (4 samples, 0.41%)</title><rect x="42.4025%" y="181" width="0.4107%" height="15" fill="rgb(205,185,37)" fg:x="413" fg:w="4"/><text x="42.6525%" y="191.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (2 samples, 0.21%)</title><rect x="42.6078%" y="165" width="0.2053%" height="15" fill="rgb(238,207,15)" fg:x="415" fg:w="2"/><text x="42.8578%" y="175.50"></text></g><g><title>httparse::parse_headers_iter_uninit (1 samples, 0.10%)</title><rect x="42.8131%" y="181" width="0.1027%" height="15" fill="rgb(213,199,42)" fg:x="417" fg:w="1"/><text x="43.0631%" y="191.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (4 samples, 0.41%)</title><rect x="42.9158%" y="181" width="0.4107%" height="15" fill="rgb(235,201,11)" fg:x="418" fg:w="4"/><text x="43.1658%" y="191.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (2 samples, 0.21%)</title><rect x="43.1211%" y="165" width="0.2053%" height="15" fill="rgb(207,46,11)" fg:x="420" fg:w="2"/><text x="43.3711%" y="175.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.10%)</title><rect x="43.2238%" y="149" width="0.1027%" height="15" fill="rgb(241,35,35)" fg:x="421" fg:w="1"/><text x="43.4738%" y="159.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.10%)</title><rect x="43.3265%" y="165" width="0.1027%" height="15" fill="rgb(243,32,47)" fg:x="422" fg:w="1"/><text x="43.5765%" y="175.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.10%)</title><rect x="43.3265%" y="149" width="0.1027%" height="15" fill="rgb(247,202,23)" fg:x="422" fg:w="1"/><text x="43.5765%" y="159.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (1 samples, 0.10%)</title><rect x="43.3265%" y="133" width="0.1027%" height="15" fill="rgb(219,102,11)" fg:x="422" fg:w="1"/><text x="43.5765%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.10%)</title><rect x="43.3265%" y="117" width="0.1027%" height="15" fill="rgb(243,110,44)" fg:x="422" fg:w="1"/><text x="43.5765%" y="127.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="43.3265%" y="101" width="0.1027%" height="15" fill="rgb(222,74,54)" fg:x="422" fg:w="1"/><text x="43.5765%" y="111.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (7 samples, 0.72%)</title><rect x="43.3265%" y="181" width="0.7187%" height="15" fill="rgb(216,99,12)" fg:x="422" fg:w="7"/><text x="43.5765%" y="191.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (6 samples, 0.62%)</title><rect x="43.4292%" y="165" width="0.6160%" height="15" fill="rgb(226,22,26)" fg:x="423" fg:w="6"/><text x="43.6792%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (4 samples, 0.41%)</title><rect x="43.6345%" y="149" width="0.4107%" height="15" fill="rgb(217,163,10)" fg:x="425" fg:w="4"/><text x="43.8845%" y="159.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.21%)</title><rect x="43.8398%" y="133" width="0.2053%" height="15" fill="rgb(213,25,53)" fg:x="427" fg:w="2"/><text x="44.0898%" y="143.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="44.3532%" y="165" width="0.1027%" height="15" fill="rgb(252,105,26)" fg:x="432" fg:w="1"/><text x="44.6032%" y="175.50"></text></g><g><title>hyper::headers::content_length_parse_all (4 samples, 0.41%)</title><rect x="44.4559%" y="165" width="0.4107%" height="15" fill="rgb(220,39,43)" fg:x="433" fg:w="4"/><text x="44.7059%" y="175.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (2 samples, 0.21%)</title><rect x="44.6612%" y="149" width="0.2053%" height="15" fill="rgb(229,68,48)" fg:x="435" fg:w="2"/><text x="44.9112%" y="159.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.10%)</title><rect x="44.7639%" y="133" width="0.1027%" height="15" fill="rgb(252,8,32)" fg:x="436" fg:w="1"/><text x="45.0139%" y="143.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (9 samples, 0.92%)</title><rect x="44.0452%" y="181" width="0.9240%" height="15" fill="rgb(223,20,43)" fg:x="429" fg:w="9"/><text x="44.2952%" y="191.50"></text></g><g><title>hyper::proto::h1::role::write_headers (1 samples, 0.10%)</title><rect x="44.8665%" y="165" width="0.1027%" height="15" fill="rgb(229,81,49)" fg:x="437" fg:w="1"/><text x="45.1165%" y="175.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (2 samples, 0.21%)</title><rect x="44.9692%" y="181" width="0.2053%" height="15" fill="rgb(236,28,36)" fg:x="438" fg:w="2"/><text x="45.2192%" y="191.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.10%)</title><rect x="45.0719%" y="165" width="0.1027%" height="15" fill="rgb(249,185,26)" fg:x="439" fg:w="1"/><text x="45.3219%" y="175.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (5 samples, 0.51%)</title><rect x="45.1745%" y="181" width="0.5133%" height="15" fill="rgb(249,174,33)" fg:x="440" fg:w="5"/><text x="45.4245%" y="191.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (4 samples, 0.41%)</title><rect x="45.2772%" y="165" width="0.4107%" height="15" fill="rgb(233,201,37)" fg:x="441" fg:w="4"/><text x="45.5272%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.31%)</title><rect x="45.3799%" y="149" width="0.3080%" height="15" fill="rgb(221,78,26)" fg:x="442" fg:w="3"/><text x="45.6299%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.21%)</title><rect x="45.4825%" y="133" width="0.2053%" height="15" fill="rgb(250,127,30)" fg:x="443" fg:w="2"/><text x="45.7325%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="45.6879%" y="181" width="0.1027%" height="15" fill="rgb(230,49,44)" fg:x="445" fg:w="1"/><text x="45.9379%" y="191.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (58 samples, 5.95%)</title><rect x="40.1437%" y="197" width="5.9548%" height="15" fill="rgb(229,67,23)" fg:x="391" fg:w="58"/><text x="40.3937%" y="207.50">&lt;hyper::..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (3 samples, 0.31%)</title><rect x="45.7906%" y="181" width="0.3080%" height="15" fill="rgb(249,83,47)" fg:x="446" fg:w="3"/><text x="46.0406%" y="191.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.31%)</title><rect x="45.7906%" y="165" width="0.3080%" height="15" fill="rgb(215,43,3)" fg:x="446" fg:w="3"/><text x="46.0406%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.51%)</title><rect x="47.3306%" y="165" width="0.5133%" height="15" fill="rgb(238,154,13)" fg:x="461" fg:w="5"/><text x="47.5806%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.21%)</title><rect x="47.6386%" y="149" width="0.2053%" height="15" fill="rgb(219,56,2)" fg:x="464" fg:w="2"/><text x="47.8886%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.21%)</title><rect x="49.3840%" y="101" width="0.2053%" height="15" fill="rgb(233,0,4)" fg:x="481" fg:w="2"/><text x="49.6340%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.10%)</title><rect x="49.4867%" y="85" width="0.1027%" height="15" fill="rgb(235,30,7)" fg:x="482" fg:w="1"/><text x="49.7367%" y="95.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (5 samples, 0.51%)</title><rect x="49.3840%" y="117" width="0.5133%" height="15" fill="rgb(250,79,13)" fg:x="481" fg:w="5"/><text x="49.6340%" y="127.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.31%)</title><rect x="49.5893%" y="101" width="0.3080%" height="15" fill="rgb(211,146,34)" fg:x="483" fg:w="3"/><text x="49.8393%" y="111.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="49.7947%" y="85" width="0.1027%" height="15" fill="rgb(228,22,38)" fg:x="485" fg:w="1"/><text x="50.0447%" y="95.50"></text></g><g><title>__rustc::__rust_alloc (1 samples, 0.10%)</title><rect x="49.8973%" y="117" width="0.1027%" height="15" fill="rgb(235,168,5)" fg:x="486" fg:w="1"/><text x="50.1473%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="50.2053%" y="37" width="0.1027%" height="15" fill="rgb(221,155,16)" fg:x="489" fg:w="1"/><text x="50.4553%" y="47.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.21%)</title><rect x="50.2053%" y="53" width="0.2053%" height="15" fill="rgb(215,215,53)" fg:x="489" fg:w="2"/><text x="50.4553%" y="63.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="50.3080%" y="37" width="0.1027%" height="15" fill="rgb(223,4,10)" fg:x="490" fg:w="1"/><text x="50.5580%" y="47.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="50.4107%" y="53" width="0.1027%" height="15" fill="rgb(234,103,6)" fg:x="491" fg:w="1"/><text x="50.6607%" y="63.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.10%)</title><rect x="50.4107%" y="37" width="0.1027%" height="15" fill="rgb(227,97,0)" fg:x="491" fg:w="1"/><text x="50.6607%" y="47.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (4 samples, 0.41%)</title><rect x="50.2053%" y="69" width="0.4107%" height="15" fill="rgb(234,150,53)" fg:x="489" fg:w="4"/><text x="50.4553%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="50.5133%" y="53" width="0.1027%" height="15" fill="rgb(228,201,54)" fg:x="492" fg:w="1"/><text x="50.7633%" y="63.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (6 samples, 0.62%)</title><rect x="50.1027%" y="85" width="0.6160%" height="15" fill="rgb(222,22,37)" fg:x="488" fg:w="6"/><text x="50.3527%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="50.6160%" y="69" width="0.1027%" height="15" fill="rgb(237,53,32)" fg:x="493" fg:w="1"/><text x="50.8660%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (8 samples, 0.82%)</title><rect x="50.0000%" y="117" width="0.8214%" height="15" fill="rgb(233,25,53)" fg:x="487" fg:w="8"/><text x="50.2500%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (7 samples, 0.72%)</title><rect x="50.1027%" y="101" width="0.7187%" height="15" fill="rgb(210,40,34)" fg:x="488" fg:w="7"/><text x="50.3527%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="50.7187%" y="85" width="0.1027%" height="15" fill="rgb(241,220,44)" fg:x="494" fg:w="1"/><text x="50.9687%" y="95.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (22 samples, 2.26%)</title><rect x="48.6653%" y="149" width="2.2587%" height="15" fill="rgb(235,28,35)" fg:x="474" fg:w="22"/><text x="48.9153%" y="159.50">&lt;..</text></g><g><title>combine::parser::ParseMode::parse_committed (18 samples, 1.85%)</title><rect x="49.0760%" y="133" width="1.8480%" height="15" fill="rgb(210,56,17)" fg:x="478" fg:w="18"/><text x="49.3260%" y="143.50">c..</text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="50.8214%" y="117" width="0.1027%" height="15" fill="rgb(224,130,29)" fg:x="495" fg:w="1"/><text x="51.0714%" y="127.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.10%)</title><rect x="50.8214%" y="101" width="0.1027%" height="15" fill="rgb(235,212,8)" fg:x="495" fg:w="1"/><text x="51.0714%" y="111.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.10%)</title><rect x="50.8214%" y="85" width="0.1027%" height="15" fill="rgb(223,33,50)" fg:x="495" fg:w="1"/><text x="51.0714%" y="95.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (1 samples, 0.10%)</title><rect x="50.8214%" y="69" width="0.1027%" height="15" fill="rgb(219,149,13)" fg:x="495" fg:w="1"/><text x="51.0714%" y="79.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (42 samples, 4.31%)</title><rect x="46.9199%" y="181" width="4.3121%" height="15" fill="rgb(250,156,29)" fg:x="457" fg:w="42"/><text x="47.1699%" y="191.50">&lt;toki..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (33 samples, 3.39%)</title><rect x="47.8439%" y="165" width="3.3881%" height="15" fill="rgb(216,193,19)" fg:x="466" fg:w="33"/><text x="48.0939%" y="175.50">red..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.31%)</title><rect x="50.9240%" y="149" width="0.3080%" height="15" fill="rgb(216,135,14)" fg:x="496" fg:w="3"/><text x="51.1740%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (2 samples, 0.21%)</title><rect x="51.8480%" y="165" width="0.2053%" height="15" fill="rgb(241,47,5)" fg:x="505" fg:w="2"/><text x="52.0980%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (10 samples, 1.03%)</title><rect x="51.2320%" y="181" width="1.0267%" height="15" fill="rgb(233,42,35)" fg:x="499" fg:w="10"/><text x="51.4820%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 0.21%)</title><rect x="52.0534%" y="165" width="0.2053%" height="15" fill="rgb(231,13,6)" fg:x="507" fg:w="2"/><text x="52.3034%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="52.1561%" y="149" width="0.1027%" height="15" fill="rgb(207,181,40)" fg:x="508" fg:w="1"/><text x="52.4061%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="52.7721%" y="165" width="0.1027%" height="15" fill="rgb(254,173,49)" fg:x="514" fg:w="1"/><text x="53.0221%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.10%)</title><rect x="52.8747%" y="149" width="0.1027%" height="15" fill="rgb(221,1,38)" fg:x="515" fg:w="1"/><text x="53.1247%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (69 samples, 7.08%)</title><rect x="46.0986%" y="197" width="7.0842%" height="15" fill="rgb(206,124,46)" fg:x="449" fg:w="69"/><text x="46.3486%" y="207.50">&lt;redis::ai..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (9 samples, 0.92%)</title><rect x="52.2587%" y="181" width="0.9240%" height="15" fill="rgb(249,21,11)" fg:x="509" fg:w="9"/><text x="52.5087%" y="191.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.31%)</title><rect x="52.8747%" y="165" width="0.3080%" height="15" fill="rgb(222,201,40)" fg:x="515" fg:w="3"/><text x="53.1247%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.21%)</title><rect x="52.9774%" y="149" width="0.2053%" height="15" fill="rgb(235,61,29)" fg:x="516" fg:w="2"/><text x="53.2274%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (2 samples, 0.21%)</title><rect x="53.1828%" y="197" width="0.2053%" height="15" fill="rgb(219,207,3)" fg:x="518" fg:w="2"/><text x="53.4328%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="53.2854%" y="181" width="0.1027%" height="15" fill="rgb(222,56,46)" fg:x="519" fg:w="1"/><text x="53.5354%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="53.2854%" y="165" width="0.1027%" height="15" fill="rgb(239,76,54)" fg:x="519" fg:w="1"/><text x="53.5354%" y="175.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (2 samples, 0.21%)</title><rect x="53.5934%" y="181" width="0.2053%" height="15" fill="rgb(231,124,27)" fg:x="522" fg:w="2"/><text x="53.8434%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (6 samples, 0.62%)</title><rect x="53.3881%" y="197" width="0.6160%" height="15" fill="rgb(249,195,6)" fg:x="520" fg:w="6"/><text x="53.6381%" y="207.50"></text></g><g><title>bytes::bytes::shared_clone (2 samples, 0.21%)</title><rect x="53.7988%" y="181" width="0.2053%" height="15" fill="rgb(237,174,47)" fg:x="524" fg:w="2"/><text x="54.0488%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.21%)</title><rect x="54.0041%" y="197" width="0.2053%" height="15" fill="rgb(206,201,31)" fg:x="526" fg:w="2"/><text x="54.2541%" y="207.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.21%)</title><rect x="54.2094%" y="197" width="0.2053%" height="15" fill="rgb(231,57,52)" fg:x="528" fg:w="2"/><text x="54.4594%" y="207.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (162 samples, 16.63%)</title><rect x="38.5010%" y="213" width="16.6324%" height="15" fill="rgb(248,177,22)" fg:x="375" fg:w="162"/><text x="38.7510%" y="223.50">&lt;futures_util::future::fut..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (7 samples, 0.72%)</title><rect x="54.4148%" y="197" width="0.7187%" height="15" fill="rgb(215,211,37)" fg:x="530" fg:w="7"/><text x="54.6648%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;futures_util::future::future::Map&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;,redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;&gt;&gt; (2 samples, 0.21%)</title><rect x="55.1335%" y="213" width="0.2053%" height="15" fill="rgb(241,128,51)" fg:x="537" fg:w="2"/><text x="55.3835%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="55.9548%" y="181" width="0.1027%" height="15" fill="rgb(227,165,31)" fg:x="545" fg:w="1"/><text x="56.2048%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="56.0575%" y="165" width="0.1027%" height="15" fill="rgb(228,167,24)" fg:x="546" fg:w="1"/><text x="56.3075%" y="175.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.21%)</title><rect x="56.0575%" y="181" width="0.2053%" height="15" fill="rgb(228,143,12)" fg:x="546" fg:w="2"/><text x="56.3075%" y="191.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.10%)</title><rect x="56.1602%" y="165" width="0.1027%" height="15" fill="rgb(249,149,8)" fg:x="547" fg:w="1"/><text x="56.4102%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::commands::AsyncCommands&gt;::lpush&lt;&amp;str,alloc::string::String,()&gt;::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="56.2628%" y="181" width="0.1027%" height="15" fill="rgb(243,35,44)" fg:x="548" fg:w="1"/><text x="56.5128%" y="191.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.10%)</title><rect x="58.0082%" y="149" width="0.1027%" height="15" fill="rgb(246,89,9)" fg:x="565" fg:w="1"/><text x="58.2582%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.10%)</title><rect x="58.3162%" y="133" width="0.1027%" height="15" fill="rgb(233,213,13)" fg:x="568" fg:w="1"/><text x="58.5662%" y="143.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.41%)</title><rect x="58.1109%" y="149" width="0.4107%" height="15" fill="rgb(233,141,41)" fg:x="566" fg:w="4"/><text x="58.3609%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.10%)</title><rect x="58.4189%" y="133" width="0.1027%" height="15" fill="rgb(239,167,4)" fg:x="569" fg:w="1"/><text x="58.6689%" y="143.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (11 samples, 1.13%)</title><rect x="58.6242%" y="133" width="1.1294%" height="15" fill="rgb(209,217,16)" fg:x="571" fg:w="11"/><text x="58.8742%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (6 samples, 0.62%)</title><rect x="59.1376%" y="117" width="0.6160%" height="15" fill="rgb(219,88,35)" fg:x="576" fg:w="6"/><text x="59.3876%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (6 samples, 0.62%)</title><rect x="59.1376%" y="101" width="0.6160%" height="15" fill="rgb(220,193,23)" fg:x="576" fg:w="6"/><text x="59.3876%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (5 samples, 0.51%)</title><rect x="59.2402%" y="85" width="0.5133%" height="15" fill="rgb(230,90,52)" fg:x="577" fg:w="5"/><text x="59.4902%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (4 samples, 0.41%)</title><rect x="59.3429%" y="69" width="0.4107%" height="15" fill="rgb(252,106,19)" fg:x="578" fg:w="4"/><text x="59.5929%" y="79.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (3 samples, 0.31%)</title><rect x="59.4456%" y="53" width="0.3080%" height="15" fill="rgb(206,74,20)" fg:x="579" fg:w="3"/><text x="59.6956%" y="63.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (3 samples, 0.31%)</title><rect x="59.4456%" y="37" width="0.3080%" height="15" fill="rgb(230,138,44)" fg:x="579" fg:w="3"/><text x="59.6956%" y="47.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (1 samples, 0.10%)</title><rect x="59.7536%" y="133" width="0.1027%" height="15" fill="rgb(235,182,43)" fg:x="582" fg:w="1"/><text x="60.0036%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="59.7536%" y="117" width="0.1027%" height="15" fill="rgb(242,16,51)" fg:x="582" fg:w="1"/><text x="60.0036%" y="127.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="59.7536%" y="101" width="0.1027%" height="15" fill="rgb(248,9,4)" fg:x="582" fg:w="1"/><text x="60.0036%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="59.8563%" y="133" width="0.1027%" height="15" fill="rgb(210,31,22)" fg:x="583" fg:w="1"/><text x="60.1063%" y="143.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (16 samples, 1.64%)</title><rect x="58.5216%" y="149" width="1.6427%" height="15" fill="rgb(239,54,39)" fg:x="570" fg:w="16"/><text x="58.7716%" y="159.50"></text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.21%)</title><rect x="59.9589%" y="133" width="0.2053%" height="15" fill="rgb(230,99,41)" fg:x="584" fg:w="2"/><text x="60.2089%" y="143.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.21%)</title><rect x="59.9589%" y="117" width="0.2053%" height="15" fill="rgb(253,106,12)" fg:x="584" fg:w="2"/><text x="60.2089%" y="127.50"></text></g><g><title>redis::connection::connection_setup_pipeline (2 samples, 0.21%)</title><rect x="60.1643%" y="149" width="0.2053%" height="15" fill="rgb(213,46,41)" fg:x="586" fg:w="2"/><text x="60.4143%" y="159.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (2 samples, 0.21%)</title><rect x="60.3696%" y="149" width="0.2053%" height="15" fill="rgb(215,133,35)" fg:x="588" fg:w="2"/><text x="60.6196%" y="159.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (2 samples, 0.21%)</title><rect x="60.5749%" y="149" width="0.2053%" height="15" fill="rgb(213,28,5)" fg:x="590" fg:w="2"/><text x="60.8249%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="60.6776%" y="133" width="0.1027%" height="15" fill="rgb(215,77,49)" fg:x="591" fg:w="1"/><text x="60.9276%" y="143.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.10%)</title><rect x="60.7803%" y="149" width="0.1027%" height="15" fill="rgb(248,100,22)" fg:x="592" fg:w="1"/><text x="61.0303%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (46 samples, 4.72%)</title><rect x="56.3655%" y="181" width="4.7228%" height="15" fill="rgb(208,67,9)" fg:x="549" fg:w="46"/><text x="56.6155%" y="191.50">redis:..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (40 samples, 4.11%)</title><rect x="56.9815%" y="165" width="4.1068%" height="15" fill="rgb(219,133,21)" fg:x="555" fg:w="40"/><text x="57.2315%" y="175.50">redi..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.21%)</title><rect x="60.8830%" y="149" width="0.2053%" height="15" fill="rgb(246,46,29)" fg:x="593" fg:w="2"/><text x="61.1330%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="60.9856%" y="133" width="0.1027%" height="15" fill="rgb(246,185,52)" fg:x="594" fg:w="1"/><text x="61.2356%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="61.4990%" y="165" width="0.1027%" height="15" fill="rgb(252,136,11)" fg:x="599" fg:w="1"/><text x="61.7490%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (2 samples, 0.21%)</title><rect x="62.0123%" y="133" width="0.2053%" height="15" fill="rgb(219,138,53)" fg:x="604" fg:w="2"/><text x="62.2623%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (2 samples, 0.21%)</title><rect x="62.0123%" y="117" width="0.2053%" height="15" fill="rgb(211,51,23)" fg:x="604" fg:w="2"/><text x="62.2623%" y="127.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="62.1150%" y="101" width="0.1027%" height="15" fill="rgb(247,221,28)" fg:x="605" fg:w="1"/><text x="62.3650%" y="111.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (5 samples, 0.51%)</title><rect x="61.9097%" y="149" width="0.5133%" height="15" fill="rgb(251,222,45)" fg:x="603" fg:w="5"/><text x="62.1597%" y="159.50"></text></g><g><title>redis::cmd::args_len (2 samples, 0.21%)</title><rect x="62.2177%" y="133" width="0.2053%" height="15" fill="rgb(217,162,53)" fg:x="606" fg:w="2"/><text x="62.4677%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="62.4230%" y="149" width="0.1027%" height="15" fill="rgb(229,93,14)" fg:x="608" fg:w="1"/><text x="62.6730%" y="159.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::mpsc_to_redis_worker::mpsc_to_redis_worker::{{closure}} (71 samples, 7.29%)</title><rect x="55.3388%" y="213" width="7.2895%" height="15" fill="rgb(209,67,49)" fg:x="539" fg:w="71"/><text x="55.5888%" y="223.50">rinha_de_b..</text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (67 samples, 6.88%)</title><rect x="55.7495%" y="197" width="6.8789%" height="15" fill="rgb(213,87,29)" fg:x="543" fg:w="67"/><text x="55.9995%" y="207.50">&lt;rinha_de..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (15 samples, 1.54%)</title><rect x="61.0883%" y="181" width="1.5400%" height="15" fill="rgb(205,151,52)" fg:x="595" fg:w="15"/><text x="61.3383%" y="191.50"></text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (10 samples, 1.03%)</title><rect x="61.6016%" y="165" width="1.0267%" height="15" fill="rgb(253,215,39)" fg:x="600" fg:w="10"/><text x="61.8516%" y="175.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.10%)</title><rect x="62.5257%" y="149" width="0.1027%" height="15" fill="rgb(221,220,41)" fg:x="609" fg:w="1"/><text x="62.7757%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.21%)</title><rect x="64.5791%" y="197" width="0.2053%" height="15" fill="rgb(218,133,21)" fg:x="629" fg:w="2"/><text x="64.8291%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="65.6057%" y="149" width="0.1027%" height="15" fill="rgb(221,193,43)" fg:x="639" fg:w="1"/><text x="65.8557%" y="159.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (10 samples, 1.03%)</title><rect x="64.7844%" y="197" width="1.0267%" height="15" fill="rgb(240,128,52)" fg:x="631" fg:w="10"/><text x="65.0344%" y="207.50"></text></g><g><title>url::ParseOptions::parse (9 samples, 0.92%)</title><rect x="64.8871%" y="181" width="0.9240%" height="15" fill="rgb(253,114,12)" fg:x="632" fg:w="9"/><text x="65.1371%" y="191.50"></text></g><g><title>url::parser::Parser::after_double_slash (6 samples, 0.62%)</title><rect x="65.1951%" y="165" width="0.6160%" height="15" fill="rgb(215,223,47)" fg:x="635" fg:w="6"/><text x="65.4451%" y="175.50"></text></g><g><title>url::host::Host::parse (1 samples, 0.10%)</title><rect x="65.7084%" y="149" width="0.1027%" height="15" fill="rgb(248,225,23)" fg:x="640" fg:w="1"/><text x="65.9584%" y="159.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (1 samples, 0.10%)</title><rect x="65.7084%" y="133" width="0.1027%" height="15" fill="rgb(250,108,0)" fg:x="640" fg:w="1"/><text x="65.9584%" y="143.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="66.2218%" y="181" width="0.1027%" height="15" fill="rgb(228,208,7)" fg:x="645" fg:w="1"/><text x="66.4718%" y="191.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.10%)</title><rect x="66.3244%" y="165" width="0.1027%" height="15" fill="rgb(244,45,10)" fg:x="646" fg:w="1"/><text x="66.5744%" y="175.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="66.8378%" y="149" width="0.1027%" height="15" fill="rgb(207,125,25)" fg:x="651" fg:w="1"/><text x="67.0878%" y="159.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.10%)</title><rect x="66.8378%" y="133" width="0.1027%" height="15" fill="rgb(210,195,18)" fg:x="651" fg:w="1"/><text x="67.0878%" y="143.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.10%)</title><rect x="66.8378%" y="117" width="0.1027%" height="15" fill="rgb(249,80,12)" fg:x="651" fg:w="1"/><text x="67.0878%" y="127.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.10%)</title><rect x="66.8378%" y="101" width="0.1027%" height="15" fill="rgb(221,65,9)" fg:x="651" fg:w="1"/><text x="67.0878%" y="111.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.10%)</title><rect x="66.8378%" y="85" width="0.1027%" height="15" fill="rgb(235,49,36)" fg:x="651" fg:w="1"/><text x="67.0878%" y="95.50"></text></g><g><title>hyper_util::client::legacy::connect::http::ConnectingTcpRemote::connect::{{closure}} (1 samples, 0.10%)</title><rect x="66.8378%" y="69" width="0.1027%" height="15" fill="rgb(225,32,20)" fg:x="651" fg:w="1"/><text x="67.0878%" y="79.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (1 samples, 0.10%)</title><rect x="66.9405%" y="149" width="0.1027%" height="15" fill="rgb(215,141,46)" fg:x="652" fg:w="1"/><text x="67.1905%" y="159.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (5 samples, 0.51%)</title><rect x="67.0431%" y="149" width="0.5133%" height="15" fill="rgb(250,160,47)" fg:x="653" fg:w="5"/><text x="67.2931%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.31%)</title><rect x="67.2485%" y="133" width="0.3080%" height="15" fill="rgb(216,222,40)" fg:x="655" fg:w="3"/><text x="67.4985%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.31%)</title><rect x="67.2485%" y="117" width="0.3080%" height="15" fill="rgb(234,217,39)" fg:x="655" fg:w="3"/><text x="67.4985%" y="127.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="67.5565%" y="149" width="0.1027%" height="15" fill="rgb(207,178,40)" fg:x="658" fg:w="1"/><text x="67.8065%" y="159.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="67.5565%" y="133" width="0.1027%" height="15" fill="rgb(221,136,13)" fg:x="658" fg:w="1"/><text x="67.8065%" y="143.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.10%)</title><rect x="67.5565%" y="117" width="0.1027%" height="15" fill="rgb(249,199,10)" fg:x="658" fg:w="1"/><text x="67.8065%" y="127.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.10%)</title><rect x="67.5565%" y="101" width="0.1027%" height="15" fill="rgb(249,222,13)" fg:x="658" fg:w="1"/><text x="67.8065%" y="111.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.10%)</title><rect x="67.5565%" y="85" width="0.1027%" height="15" fill="rgb(244,185,38)" fg:x="658" fg:w="1"/><text x="67.8065%" y="95.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.10%)</title><rect x="67.5565%" y="69" width="0.1027%" height="15" fill="rgb(236,202,9)" fg:x="658" fg:w="1"/><text x="67.8065%" y="79.50"></text></g><g><title>hyper_util::client::legacy::connect::dns::SocketAddrs::try_parse (1 samples, 0.10%)</title><rect x="67.5565%" y="53" width="0.1027%" height="15" fill="rgb(250,229,37)" fg:x="658" fg:w="1"/><text x="67.8065%" y="63.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (1 samples, 0.10%)</title><rect x="67.6591%" y="149" width="0.1027%" height="15" fill="rgb(206,174,23)" fg:x="659" fg:w="1"/><text x="67.9091%" y="159.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="67.7618%" y="149" width="0.1027%" height="15" fill="rgb(211,33,43)" fg:x="660" fg:w="1"/><text x="68.0118%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::http1::SendRequest&lt;reqwest::async_impl::body::Body&gt;::try_send_request::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="67.8645%" y="149" width="0.1027%" height="15" fill="rgb(245,58,50)" fg:x="661" fg:w="1"/><text x="68.1145%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::one_connection_for::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="67.9671%" y="149" width="0.1027%" height="15" fill="rgb(244,68,36)" fg:x="662" fg:w="1"/><text x="68.2171%" y="159.50"></text></g><g><title>http::uri::authority::Authority::port (1 samples, 0.10%)</title><rect x="68.0698%" y="149" width="0.1027%" height="15" fill="rgb(232,229,15)" fg:x="663" fg:w="1"/><text x="68.3198%" y="159.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (2 samples, 0.21%)</title><rect x="68.1725%" y="149" width="0.2053%" height="15" fill="rgb(254,30,23)" fg:x="664" fg:w="2"/><text x="68.4225%" y="159.50"></text></g><g><title>http::uri::builder::Builder::map (1 samples, 0.10%)</title><rect x="68.2752%" y="133" width="0.1027%" height="15" fill="rgb(235,160,14)" fg:x="665" fg:w="1"/><text x="68.5252%" y="143.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (21 samples, 2.16%)</title><rect x="66.3244%" y="181" width="2.1561%" height="15" fill="rgb(212,155,44)" fg:x="646" fg:w="21"/><text x="66.5744%" y="191.50">&lt;..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (20 samples, 2.05%)</title><rect x="66.4271%" y="165" width="2.0534%" height="15" fill="rgb(226,2,50)" fg:x="647" fg:w="20"/><text x="66.6771%" y="175.50">h..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="68.3778%" y="149" width="0.1027%" height="15" fill="rgb(234,177,6)" fg:x="666" fg:w="1"/><text x="68.6278%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="68.4805%" y="181" width="0.1027%" height="15" fill="rgb(217,24,9)" fg:x="667" fg:w="1"/><text x="68.7305%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="68.8912%" y="149" width="0.1027%" height="15" fill="rgb(220,13,46)" fg:x="671" fg:w="1"/><text x="69.1412%" y="159.50"></text></g><g><title>&lt;url::host::Host&lt;S&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="68.8912%" y="133" width="0.1027%" height="15" fill="rgb(239,221,27)" fg:x="671" fg:w="1"/><text x="69.1412%" y="143.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.10%)</title><rect x="69.0965%" y="133" width="0.1027%" height="15" fill="rgb(222,198,25)" fg:x="673" fg:w="1"/><text x="69.3465%" y="143.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (1 samples, 0.10%)</title><rect x="69.1992%" y="133" width="0.1027%" height="15" fill="rgb(211,99,13)" fg:x="674" fg:w="1"/><text x="69.4492%" y="143.50"></text></g><g><title>url::host::Host::parse (4 samples, 0.41%)</title><rect x="68.9938%" y="149" width="0.4107%" height="15" fill="rgb(232,111,31)" fg:x="672" fg:w="4"/><text x="69.2438%" y="159.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.10%)</title><rect x="69.3018%" y="133" width="0.1027%" height="15" fill="rgb(245,82,37)" fg:x="675" fg:w="1"/><text x="69.5518%" y="143.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (36 samples, 3.70%)</title><rect x="65.8111%" y="197" width="3.6961%" height="15" fill="rgb(227,149,46)" fg:x="641" fg:w="36"/><text x="66.0611%" y="207.50">&lt;req..</text></g><g><title>url::ParseOptions::parse (9 samples, 0.92%)</title><rect x="68.5832%" y="181" width="0.9240%" height="15" fill="rgb(218,36,50)" fg:x="668" fg:w="9"/><text x="68.8332%" y="191.50"></text></g><g><title>url::parser::Parser::after_double_slash (8 samples, 0.82%)</title><rect x="68.6858%" y="165" width="0.8214%" height="15" fill="rgb(226,80,48)" fg:x="669" fg:w="8"/><text x="68.9358%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.10%)</title><rect x="69.4045%" y="149" width="0.1027%" height="15" fill="rgb(238,224,15)" fg:x="676" fg:w="1"/><text x="69.6545%" y="159.50"></text></g><g><title>&lt;redis::client::Client as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="69.9179%" y="181" width="0.1027%" height="15" fill="rgb(241,136,10)" fg:x="681" fg:w="1"/><text x="70.1679%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.10%)</title><rect x="70.0205%" y="181" width="0.1027%" height="15" fill="rgb(208,32,45)" fg:x="682" fg:w="1"/><text x="70.2705%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="70.0205%" y="165" width="0.1027%" height="15" fill="rgb(207,135,9)" fg:x="682" fg:w="1"/><text x="70.2705%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="71.3552%" y="149" width="0.1027%" height="15" fill="rgb(206,86,44)" fg:x="695" fg:w="1"/><text x="71.6052%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.31%)</title><rect x="71.8686%" y="133" width="0.3080%" height="15" fill="rgb(245,177,15)" fg:x="700" fg:w="3"/><text x="72.1186%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.31%)</title><rect x="71.8686%" y="117" width="0.3080%" height="15" fill="rgb(206,64,50)" fg:x="700" fg:w="3"/><text x="72.1186%" y="127.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="72.0739%" y="101" width="0.1027%" height="15" fill="rgb(234,36,40)" fg:x="702" fg:w="1"/><text x="72.3239%" y="111.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 0.82%)</title><rect x="71.4579%" y="149" width="0.8214%" height="15" fill="rgb(213,64,8)" fg:x="696" fg:w="8"/><text x="71.7079%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.10%)</title><rect x="72.1766%" y="133" width="0.1027%" height="15" fill="rgb(210,75,36)" fg:x="703" fg:w="1"/><text x="72.4266%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.10%)</title><rect x="72.1766%" y="117" width="0.1027%" height="15" fill="rgb(229,88,21)" fg:x="703" fg:w="1"/><text x="72.4266%" y="127.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="72.1766%" y="101" width="0.1027%" height="15" fill="rgb(252,204,47)" fg:x="703" fg:w="1"/><text x="72.4266%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::Map&lt;redis::aio::get_socket_addrs::{{closure}},&lt;redis::aio::DefaultAsyncDNSResolver as redis::io::dns::AsyncDNSResolver&gt;::resolve::{{closure}}&gt;&gt; (2 samples, 0.21%)</title><rect x="72.2793%" y="149" width="0.2053%" height="15" fill="rgb(208,77,27)" fg:x="704" fg:w="2"/><text x="72.5293%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.10%)</title><rect x="72.6899%" y="117" width="0.1027%" height="15" fill="rgb(221,76,26)" fg:x="708" fg:w="1"/><text x="72.9399%" y="127.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.92%)</title><rect x="72.4846%" y="133" width="0.9240%" height="15" fill="rgb(225,139,18)" fg:x="706" fg:w="9"/><text x="72.7346%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (6 samples, 0.62%)</title><rect x="72.7926%" y="117" width="0.6160%" height="15" fill="rgb(230,137,11)" fg:x="709" fg:w="6"/><text x="73.0426%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (5 samples, 0.51%)</title><rect x="72.8953%" y="101" width="0.5133%" height="15" fill="rgb(212,28,1)" fg:x="710" fg:w="5"/><text x="73.1453%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.21%)</title><rect x="73.2033%" y="85" width="0.2053%" height="15" fill="rgb(248,164,17)" fg:x="713" fg:w="2"/><text x="73.4533%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="73.3060%" y="69" width="0.1027%" height="15" fill="rgb(222,171,42)" fg:x="714" fg:w="1"/><text x="73.5560%" y="79.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (13 samples, 1.33%)</title><rect x="72.4846%" y="149" width="1.3347%" height="15" fill="rgb(243,84,45)" fg:x="706" fg:w="13"/><text x="72.7346%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (4 samples, 0.41%)</title><rect x="73.4086%" y="133" width="0.4107%" height="15" fill="rgb(252,49,23)" fg:x="715" fg:w="4"/><text x="73.6586%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="73.7166%" y="117" width="0.1027%" height="15" fill="rgb(215,19,7)" fg:x="718" fg:w="1"/><text x="73.9666%" y="127.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="73.7166%" y="101" width="0.1027%" height="15" fill="rgb(238,81,41)" fg:x="718" fg:w="1"/><text x="73.9666%" y="111.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.10%)</title><rect x="73.7166%" y="85" width="0.1027%" height="15" fill="rgb(210,199,37)" fg:x="718" fg:w="1"/><text x="73.9666%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.21%)</title><rect x="73.8193%" y="133" width="0.2053%" height="15" fill="rgb(244,192,49)" fg:x="719" fg:w="2"/><text x="74.0693%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="73.9220%" y="117" width="0.1027%" height="15" fill="rgb(226,211,11)" fg:x="720" fg:w="1"/><text x="74.1720%" y="127.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (39 samples, 4.00%)</title><rect x="70.1232%" y="181" width="4.0041%" height="15" fill="rgb(236,162,54)" fg:x="683" fg:w="39"/><text x="70.3732%" y="191.50">redi..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (38 samples, 3.90%)</title><rect x="70.2259%" y="165" width="3.9014%" height="15" fill="rgb(220,229,9)" fg:x="684" fg:w="38"/><text x="70.4759%" y="175.50">redi..</text></g><g><title>redis::connection::connection_setup_pipeline (3 samples, 0.31%)</title><rect x="73.8193%" y="149" width="0.3080%" height="15" fill="rgb(250,87,22)" fg:x="719" fg:w="3"/><text x="74.0693%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="74.0246%" y="133" width="0.1027%" height="15" fill="rgb(239,43,17)" fg:x="721" fg:w="1"/><text x="74.2746%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (8 samples, 0.82%)</title><rect x="74.3326%" y="149" width="0.8214%" height="15" fill="rgb(231,177,25)" fg:x="724" fg:w="8"/><text x="74.5826%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (6 samples, 0.62%)</title><rect x="74.5380%" y="133" width="0.6160%" height="15" fill="rgb(219,179,1)" fg:x="726" fg:w="6"/><text x="74.7880%" y="143.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.21%)</title><rect x="74.9487%" y="117" width="0.2053%" height="15" fill="rgb(238,219,53)" fg:x="730" fg:w="2"/><text x="75.1987%" y="127.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (9 samples, 0.92%)</title><rect x="74.3326%" y="165" width="0.9240%" height="15" fill="rgb(232,167,36)" fg:x="724" fg:w="9"/><text x="74.5826%" y="175.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.10%)</title><rect x="75.1540%" y="149" width="0.1027%" height="15" fill="rgb(244,19,51)" fg:x="732" fg:w="1"/><text x="75.4040%" y="159.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.21%)</title><rect x="75.2567%" y="165" width="0.2053%" height="15" fill="rgb(224,6,22)" fg:x="733" fg:w="2"/><text x="75.5067%" y="175.50"></text></g><g><title>core::fmt::write (2 samples, 0.21%)</title><rect x="75.2567%" y="149" width="0.2053%" height="15" fill="rgb(224,145,5)" fg:x="733" fg:w="2"/><text x="75.5067%" y="159.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.10%)</title><rect x="75.3593%" y="133" width="0.1027%" height="15" fill="rgb(234,130,49)" fg:x="734" fg:w="1"/><text x="75.6093%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.1959 (1 samples, 0.10%)</title><rect x="75.3593%" y="117" width="0.1027%" height="15" fill="rgb(254,6,2)" fg:x="734" fg:w="1"/><text x="75.6093%" y="127.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (59 samples, 6.06%)</title><rect x="69.5072%" y="197" width="6.0575%" height="15" fill="rgb(208,96,46)" fg:x="677" fg:w="59"/><text x="69.7572%" y="207.50">&lt;rinha_d..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (14 samples, 1.44%)</title><rect x="74.1273%" y="181" width="1.4374%" height="15" fill="rgb(239,3,39)" fg:x="722" fg:w="14"/><text x="74.3773%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="75.4620%" y="165" width="0.1027%" height="15" fill="rgb(233,210,1)" fg:x="735" fg:w="1"/><text x="75.7120%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="75.9754%" y="149" width="0.1027%" height="15" fill="rgb(244,137,37)" fg:x="740" fg:w="1"/><text x="76.2254%" y="159.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.10%)</title><rect x="76.2834%" y="133" width="0.1027%" height="15" fill="rgb(240,136,2)" fg:x="743" fg:w="1"/><text x="76.5334%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (6 samples, 0.62%)</title><rect x="75.8727%" y="165" width="0.6160%" height="15" fill="rgb(239,18,37)" fg:x="739" fg:w="6"/><text x="76.1227%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (4 samples, 0.41%)</title><rect x="76.0780%" y="149" width="0.4107%" height="15" fill="rgb(218,185,22)" fg:x="741" fg:w="4"/><text x="76.3280%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="76.3860%" y="133" width="0.1027%" height="15" fill="rgb(225,218,4)" fg:x="744" fg:w="1"/><text x="76.6360%" y="143.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (9 samples, 0.92%)</title><rect x="75.7700%" y="181" width="0.9240%" height="15" fill="rgb(230,182,32)" fg:x="738" fg:w="9"/><text x="76.0200%" y="191.50"></text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.21%)</title><rect x="76.4887%" y="165" width="0.2053%" height="15" fill="rgb(242,56,43)" fg:x="745" fg:w="2"/><text x="76.7387%" y="175.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.21%)</title><rect x="76.4887%" y="149" width="0.2053%" height="15" fill="rgb(233,99,24)" fg:x="745" fg:w="2"/><text x="76.7387%" y="159.50"></text></g><g><title>&lt;core::fmt::Formatter as powerfmt::ext::FormatterExt&gt;::pad_with_width (1 samples, 0.10%)</title><rect x="77.0021%" y="133" width="0.1027%" height="15" fill="rgb(234,209,42)" fg:x="750" fg:w="1"/><text x="77.2521%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.10%)</title><rect x="77.3101%" y="101" width="0.1027%" height="15" fill="rgb(227,7,12)" fg:x="753" fg:w="1"/><text x="77.5601%" y="111.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (8 samples, 0.82%)</title><rect x="76.8994%" y="149" width="0.8214%" height="15" fill="rgb(245,203,43)" fg:x="749" fg:w="8"/><text x="77.1494%" y="159.50"></text></g><g><title>core::fmt::write (6 samples, 0.62%)</title><rect x="77.1047%" y="133" width="0.6160%" height="15" fill="rgb(238,205,33)" fg:x="751" fg:w="6"/><text x="77.3547%" y="143.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (4 samples, 0.41%)</title><rect x="77.3101%" y="117" width="0.4107%" height="15" fill="rgb(231,56,7)" fg:x="753" fg:w="4"/><text x="77.5601%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.31%)</title><rect x="77.4127%" y="101" width="0.3080%" height="15" fill="rgb(244,186,29)" fg:x="754" fg:w="3"/><text x="77.6627%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.10%)</title><rect x="77.6181%" y="85" width="0.1027%" height="15" fill="rgb(234,111,31)" fg:x="756" fg:w="1"/><text x="77.8681%" y="95.50"></text></g><g><title>&lt;time::time::Time as core::fmt::Display&gt;::fmt (3 samples, 0.31%)</title><rect x="77.7207%" y="149" width="0.3080%" height="15" fill="rgb(241,149,10)" fg:x="757" fg:w="3"/><text x="77.9707%" y="159.50"></text></g><g><title>core::fmt::write (3 samples, 0.31%)</title><rect x="77.7207%" y="133" width="0.3080%" height="15" fill="rgb(249,206,44)" fg:x="757" fg:w="3"/><text x="77.9707%" y="143.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.10%)</title><rect x="77.9261%" y="117" width="0.1027%" height="15" fill="rgb(251,153,30)" fg:x="759" fg:w="1"/><text x="78.1761%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.10%)</title><rect x="77.9261%" y="101" width="0.1027%" height="15" fill="rgb(239,152,38)" fg:x="759" fg:w="1"/><text x="78.1761%" y="111.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="78.0287%" y="117" width="0.1027%" height="15" fill="rgb(249,139,47)" fg:x="760" fg:w="1"/><text x="78.2787%" y="127.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (15 samples, 1.54%)</title><rect x="76.6940%" y="181" width="1.5400%" height="15" fill="rgb(244,64,35)" fg:x="747" fg:w="15"/><text x="76.9440%" y="191.50"></text></g><g><title>core::fmt::write (15 samples, 1.54%)</title><rect x="76.6940%" y="165" width="1.5400%" height="15" fill="rgb(216,46,15)" fg:x="747" fg:w="15"/><text x="76.9440%" y="175.50"></text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (2 samples, 0.21%)</title><rect x="78.0287%" y="149" width="0.2053%" height="15" fill="rgb(250,74,19)" fg:x="760" fg:w="2"/><text x="78.2787%" y="159.50"></text></g><g><title>core::fmt::write (2 samples, 0.21%)</title><rect x="78.0287%" y="133" width="0.2053%" height="15" fill="rgb(249,42,33)" fg:x="760" fg:w="2"/><text x="78.2787%" y="143.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="78.1314%" y="117" width="0.1027%" height="15" fill="rgb(242,149,17)" fg:x="761" fg:w="1"/><text x="78.3814%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.10%)</title><rect x="78.1314%" y="101" width="0.1027%" height="15" fill="rgb(244,29,21)" fg:x="761" fg:w="1"/><text x="78.3814%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.10%)</title><rect x="78.1314%" y="85" width="0.1027%" height="15" fill="rgb(220,130,37)" fg:x="761" fg:w="1"/><text x="78.3814%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="78.1314%" y="69" width="0.1027%" height="15" fill="rgb(211,67,2)" fg:x="761" fg:w="1"/><text x="78.3814%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="78.1314%" y="53" width="0.1027%" height="15" fill="rgb(235,68,52)" fg:x="761" fg:w="1"/><text x="78.3814%" y="63.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.41%)</title><rect x="78.2341%" y="181" width="0.4107%" height="15" fill="rgb(246,142,3)" fg:x="762" fg:w="4"/><text x="78.4841%" y="191.50"></text></g><g><title>core::fmt::write (3 samples, 0.31%)</title><rect x="78.3368%" y="165" width="0.3080%" height="15" fill="rgb(241,25,7)" fg:x="763" fg:w="3"/><text x="78.5868%" y="175.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (2 samples, 0.21%)</title><rect x="78.4394%" y="149" width="0.2053%" height="15" fill="rgb(242,119,39)" fg:x="764" fg:w="2"/><text x="78.6894%" y="159.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (2 samples, 0.21%)</title><rect x="78.4394%" y="133" width="0.2053%" height="15" fill="rgb(241,98,45)" fg:x="764" fg:w="2"/><text x="78.6894%" y="143.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (1 samples, 0.10%)</title><rect x="78.5421%" y="117" width="0.1027%" height="15" fill="rgb(254,28,30)" fg:x="765" fg:w="1"/><text x="78.7921%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="78.6448%" y="181" width="0.1027%" height="15" fill="rgb(241,142,54)" fg:x="766" fg:w="1"/><text x="78.8948%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="78.7474%" y="181" width="0.1027%" height="15" fill="rgb(222,85,15)" fg:x="767" fg:w="1"/><text x="78.9974%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="78.7474%" y="165" width="0.1027%" height="15" fill="rgb(210,85,47)" fg:x="767" fg:w="1"/><text x="78.9974%" y="175.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for i128&gt;::write (1 samples, 0.10%)</title><rect x="78.8501%" y="181" width="0.1027%" height="15" fill="rgb(224,206,25)" fg:x="768" fg:w="1"/><text x="79.1001%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::client::Client::get_multiplexed_async_connection_inner_with_timeout&lt;redis::aio::tokio::Tokio&gt;::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="79.0554%" y="165" width="0.1027%" height="15" fill="rgb(243,201,19)" fg:x="770" fg:w="1"/><text x="79.3054%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.21%)</title><rect x="80.3901%" y="133" width="0.2053%" height="15" fill="rgb(236,59,4)" fg:x="783" fg:w="2"/><text x="80.6401%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.21%)</title><rect x="80.3901%" y="117" width="0.2053%" height="15" fill="rgb(254,179,45)" fg:x="783" fg:w="2"/><text x="80.6401%" y="127.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="80.4928%" y="101" width="0.1027%" height="15" fill="rgb(226,14,10)" fg:x="784" fg:w="1"/><text x="80.7428%" y="111.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (7 samples, 0.72%)</title><rect x="79.9795%" y="149" width="0.7187%" height="15" fill="rgb(244,27,41)" fg:x="779" fg:w="7"/><text x="80.2295%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.10%)</title><rect x="80.5955%" y="133" width="0.1027%" height="15" fill="rgb(235,35,32)" fg:x="785" fg:w="1"/><text x="80.8455%" y="143.50"></text></g><g><title>&lt;redis::aio::DefaultAsyncDNSResolver as redis::io::dns::AsyncDNSResolver&gt;::resolve (1 samples, 0.10%)</title><rect x="80.6982%" y="149" width="0.1027%" height="15" fill="rgb(218,68,31)" fg:x="786" fg:w="1"/><text x="80.9482%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.62%)</title><rect x="80.8008%" y="133" width="0.6160%" height="15" fill="rgb(207,120,37)" fg:x="787" fg:w="6"/><text x="81.0508%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (4 samples, 0.41%)</title><rect x="81.0062%" y="117" width="0.4107%" height="15" fill="rgb(227,98,0)" fg:x="789" fg:w="4"/><text x="81.2562%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (3 samples, 0.31%)</title><rect x="81.1088%" y="101" width="0.3080%" height="15" fill="rgb(207,7,3)" fg:x="790" fg:w="3"/><text x="81.3588%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.21%)</title><rect x="81.2115%" y="85" width="0.2053%" height="15" fill="rgb(206,98,19)" fg:x="791" fg:w="2"/><text x="81.4615%" y="95.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.21%)</title><rect x="81.4168%" y="133" width="0.2053%" height="15" fill="rgb(217,5,26)" fg:x="793" fg:w="2"/><text x="81.6668%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="81.5195%" y="117" width="0.1027%" height="15" fill="rgb(235,190,38)" fg:x="794" fg:w="1"/><text x="81.7695%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::pipeline::Pipeline&gt; (1 samples, 0.10%)</title><rect x="81.6222%" y="133" width="0.1027%" height="15" fill="rgb(247,86,24)" fg:x="795" fg:w="1"/><text x="81.8722%" y="143.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (10 samples, 1.03%)</title><rect x="80.8008%" y="149" width="1.0267%" height="15" fill="rgb(205,101,16)" fg:x="787" fg:w="10"/><text x="81.0508%" y="159.50"></text></g><g><title>redis::pipeline::encode_pipeline (1 samples, 0.10%)</title><rect x="81.7248%" y="133" width="0.1027%" height="15" fill="rgb(246,168,33)" fg:x="796" fg:w="1"/><text x="81.9748%" y="143.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.10%)</title><rect x="81.7248%" y="117" width="0.1027%" height="15" fill="rgb(231,114,1)" fg:x="796" fg:w="1"/><text x="81.9748%" y="127.50"></text></g><g><title>redis::connection::connection_setup_pipeline (3 samples, 0.31%)</title><rect x="81.8275%" y="149" width="0.3080%" height="15" fill="rgb(207,184,53)" fg:x="797" fg:w="3"/><text x="82.0775%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.21%)</title><rect x="81.9302%" y="133" width="0.2053%" height="15" fill="rgb(224,95,51)" fg:x="798" fg:w="2"/><text x="82.1802%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="82.0329%" y="117" width="0.1027%" height="15" fill="rgb(212,188,45)" fg:x="799" fg:w="1"/><text x="82.2829%" y="127.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.10%)</title><rect x="82.1355%" y="149" width="0.1027%" height="15" fill="rgb(223,154,38)" fg:x="800" fg:w="1"/><text x="82.3855%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="82.1355%" y="133" width="0.1027%" height="15" fill="rgb(251,22,52)" fg:x="800" fg:w="1"/><text x="82.3855%" y="143.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.10%)</title><rect x="82.1355%" y="117" width="0.1027%" height="15" fill="rgb(229,209,22)" fg:x="800" fg:w="1"/><text x="82.3855%" y="127.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (33 samples, 3.39%)</title><rect x="78.9528%" y="181" width="3.3881%" height="15" fill="rgb(234,138,34)" fg:x="769" fg:w="33"/><text x="79.2028%" y="191.50">red..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (31 samples, 3.18%)</title><rect x="79.1581%" y="165" width="3.1828%" height="15" fill="rgb(212,95,11)" fg:x="771" fg:w="31"/><text x="79.4081%" y="175.50">red..</text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.10%)</title><rect x="82.2382%" y="149" width="0.1027%" height="15" fill="rgb(240,179,47)" fg:x="801" fg:w="1"/><text x="82.4882%" y="159.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (1 samples, 0.10%)</title><rect x="82.3409%" y="181" width="0.1027%" height="15" fill="rgb(240,163,11)" fg:x="802" fg:w="1"/><text x="82.5909%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (68 samples, 6.98%)</title><rect x="75.5647%" y="197" width="6.9815%" height="15" fill="rgb(236,37,12)" fg:x="736" fg:w="68"/><text x="75.8147%" y="207.50">&lt;rinha_de..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (1 samples, 0.10%)</title><rect x="82.4435%" y="181" width="0.1027%" height="15" fill="rgb(232,164,16)" fg:x="803" fg:w="1"/><text x="82.6935%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.21%)</title><rect x="83.5729%" y="165" width="0.2053%" height="15" fill="rgb(244,205,15)" fg:x="814" fg:w="2"/><text x="83.8229%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.10%)</title><rect x="83.6756%" y="149" width="0.1027%" height="15" fill="rgb(223,117,47)" fg:x="815" fg:w="1"/><text x="83.9256%" y="159.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.62%)</title><rect x="83.2649%" y="181" width="0.6160%" height="15" fill="rgb(244,107,35)" fg:x="811" fg:w="6"/><text x="83.5149%" y="191.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (1 samples, 0.10%)</title><rect x="83.7782%" y="165" width="0.1027%" height="15" fill="rgb(205,140,8)" fg:x="816" fg:w="1"/><text x="84.0282%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.10%)</title><rect x="83.8809%" y="181" width="0.1027%" height="15" fill="rgb(228,84,46)" fg:x="817" fg:w="1"/><text x="84.1309%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="83.9836%" y="181" width="0.1027%" height="15" fill="rgb(254,188,9)" fg:x="818" fg:w="1"/><text x="84.2336%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.10%)</title><rect x="83.9836%" y="165" width="0.1027%" height="15" fill="rgb(206,112,54)" fg:x="818" fg:w="1"/><text x="84.2336%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::commands::AsyncCommands&gt;::brpop&lt;&amp;str,core::option::Option&lt;(alloc::string::String,alloc::string::String)&gt;&gt;::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="84.0862%" y="181" width="0.1027%" height="15" fill="rgb(216,84,49)" fg:x="819" fg:w="1"/><text x="84.3362%" y="191.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.10%)</title><rect x="85.7290%" y="117" width="0.1027%" height="15" fill="rgb(214,194,35)" fg:x="835" fg:w="1"/><text x="85.9790%" y="127.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="85.7290%" y="101" width="0.1027%" height="15" fill="rgb(249,28,3)" fg:x="835" fg:w="1"/><text x="85.9790%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.21%)</title><rect x="85.7290%" y="133" width="0.2053%" height="15" fill="rgb(222,56,52)" fg:x="835" fg:w="2"/><text x="85.9790%" y="143.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.10%)</title><rect x="85.8316%" y="117" width="0.1027%" height="15" fill="rgb(245,217,50)" fg:x="836" fg:w="1"/><text x="86.0816%" y="127.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.10%)</title><rect x="85.9343%" y="117" width="0.1027%" height="15" fill="rgb(213,201,24)" fg:x="837" fg:w="1"/><text x="86.1843%" y="127.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.62%)</title><rect x="85.5236%" y="149" width="0.6160%" height="15" fill="rgb(248,116,28)" fg:x="833" fg:w="6"/><text x="85.7736%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (2 samples, 0.21%)</title><rect x="85.9343%" y="133" width="0.2053%" height="15" fill="rgb(219,72,43)" fg:x="837" fg:w="2"/><text x="86.1843%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.10%)</title><rect x="86.0370%" y="117" width="0.1027%" height="15" fill="rgb(209,138,14)" fg:x="838" fg:w="1"/><text x="86.2870%" y="127.50"></text></g><g><title>__connect (1 samples, 0.10%)</title><rect x="86.1396%" y="149" width="0.1027%" height="15" fill="rgb(222,18,33)" fg:x="839" fg:w="1"/><text x="86.3896%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.51%)</title><rect x="86.7556%" y="133" width="0.5133%" height="15" fill="rgb(213,199,7)" fg:x="845" fg:w="5"/><text x="87.0056%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (5 samples, 0.51%)</title><rect x="86.7556%" y="117" width="0.5133%" height="15" fill="rgb(250,110,10)" fg:x="845" fg:w="5"/><text x="87.0056%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (3 samples, 0.31%)</title><rect x="86.9610%" y="101" width="0.3080%" height="15" fill="rgb(248,123,6)" fg:x="847" fg:w="3"/><text x="87.2110%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.10%)</title><rect x="87.1663%" y="85" width="0.1027%" height="15" fill="rgb(206,91,31)" fg:x="849" fg:w="1"/><text x="87.4163%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="87.1663%" y="69" width="0.1027%" height="15" fill="rgb(211,154,13)" fg:x="849" fg:w="1"/><text x="87.4163%" y="79.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (3 samples, 0.31%)</title><rect x="87.2690%" y="133" width="0.3080%" height="15" fill="rgb(225,148,7)" fg:x="850" fg:w="3"/><text x="87.5190%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.10%)</title><rect x="87.4743%" y="117" width="0.1027%" height="15" fill="rgb(220,160,43)" fg:x="852" fg:w="1"/><text x="87.7243%" y="127.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (14 samples, 1.44%)</title><rect x="86.2423%" y="149" width="1.4374%" height="15" fill="rgb(213,52,39)" fg:x="840" fg:w="14"/><text x="86.4923%" y="159.50"></text></g><g><title>redis::pipeline::encode_pipeline (1 samples, 0.10%)</title><rect x="87.5770%" y="133" width="0.1027%" height="15" fill="rgb(243,137,7)" fg:x="853" fg:w="1"/><text x="87.8270%" y="143.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.10%)</title><rect x="87.5770%" y="117" width="0.1027%" height="15" fill="rgb(230,79,13)" fg:x="853" fg:w="1"/><text x="87.8270%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.21%)</title><rect x="87.8850%" y="133" width="0.2053%" height="15" fill="rgb(247,105,23)" fg:x="856" fg:w="2"/><text x="88.1350%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="87.9877%" y="117" width="0.1027%" height="15" fill="rgb(223,179,41)" fg:x="857" fg:w="1"/><text x="88.2377%" y="127.50"></text></g><g><title>redis::connection::connection_setup_pipeline (6 samples, 0.62%)</title><rect x="87.6797%" y="149" width="0.6160%" height="15" fill="rgb(218,9,34)" fg:x="854" fg:w="6"/><text x="87.9297%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.21%)</title><rect x="88.0903%" y="133" width="0.2053%" height="15" fill="rgb(222,106,8)" fg:x="858" fg:w="2"/><text x="88.3403%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.21%)</title><rect x="88.0903%" y="117" width="0.2053%" height="15" fill="rgb(211,220,0)" fg:x="858" fg:w="2"/><text x="88.3403%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.21%)</title><rect x="88.0903%" y="101" width="0.2053%" height="15" fill="rgb(229,52,16)" fg:x="858" fg:w="2"/><text x="88.3403%" y="111.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (44 samples, 4.52%)</title><rect x="84.1889%" y="181" width="4.5175%" height="15" fill="rgb(212,155,18)" fg:x="820" fg:w="44"/><text x="84.4389%" y="191.50">redis..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (40 samples, 4.11%)</title><rect x="84.5996%" y="165" width="4.1068%" height="15" fill="rgb(242,21,14)" fg:x="824" fg:w="40"/><text x="84.8496%" y="175.50">redi..</text></g><g><title>tokio::net::tcp::stream::TcpStream::new (4 samples, 0.41%)</title><rect x="88.2957%" y="149" width="0.4107%" height="15" fill="rgb(222,19,48)" fg:x="860" fg:w="4"/><text x="88.5457%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="88.6037%" y="133" width="0.1027%" height="15" fill="rgb(232,45,27)" fg:x="863" fg:w="1"/><text x="88.8537%" y="143.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.10%)</title><rect x="88.6037%" y="117" width="0.1027%" height="15" fill="rgb(249,103,42)" fg:x="863" fg:w="1"/><text x="88.8537%" y="127.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (1 samples, 0.10%)</title><rect x="88.9117%" y="165" width="0.1027%" height="15" fill="rgb(246,81,33)" fg:x="866" fg:w="1"/><text x="89.1617%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="88.9117%" y="149" width="0.1027%" height="15" fill="rgb(252,33,42)" fg:x="866" fg:w="1"/><text x="89.1617%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (2 samples, 0.21%)</title><rect x="89.0144%" y="165" width="0.2053%" height="15" fill="rgb(209,212,41)" fg:x="867" fg:w="2"/><text x="89.2644%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (1 samples, 0.10%)</title><rect x="89.1170%" y="149" width="0.1027%" height="15" fill="rgb(207,154,6)" fg:x="868" fg:w="1"/><text x="89.3670%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="89.1170%" y="133" width="0.1027%" height="15" fill="rgb(223,64,47)" fg:x="868" fg:w="1"/><text x="89.3670%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (66 samples, 6.78%)</title><rect x="82.5462%" y="197" width="6.7762%" height="15" fill="rgb(211,161,38)" fg:x="804" fg:w="66"/><text x="82.7962%" y="207.50">&lt;rinha_de..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (6 samples, 0.62%)</title><rect x="88.7064%" y="181" width="0.6160%" height="15" fill="rgb(219,138,40)" fg:x="864" fg:w="6"/><text x="88.9564%" y="191.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.10%)</title><rect x="89.2197%" y="165" width="0.1027%" height="15" fill="rgb(241,228,46)" fg:x="869" fg:w="1"/><text x="89.4697%" y="175.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="89.7331%" y="149" width="0.1027%" height="15" fill="rgb(223,209,38)" fg:x="874" fg:w="1"/><text x="89.9831%" y="159.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (1 samples, 0.10%)</title><rect x="89.8357%" y="149" width="0.1027%" height="15" fill="rgb(236,164,45)" fg:x="875" fg:w="1"/><text x="90.0857%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.10%)</title><rect x="89.8357%" y="133" width="0.1027%" height="15" fill="rgb(231,15,5)" fg:x="875" fg:w="1"/><text x="90.0857%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (1 samples, 0.10%)</title><rect x="89.8357%" y="117" width="0.1027%" height="15" fill="rgb(252,35,15)" fg:x="875" fg:w="1"/><text x="90.0857%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (1 samples, 0.10%)</title><rect x="89.8357%" y="101" width="0.1027%" height="15" fill="rgb(248,181,18)" fg:x="875" fg:w="1"/><text x="90.0857%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.10%)</title><rect x="89.8357%" y="85" width="0.1027%" height="15" fill="rgb(233,39,42)" fg:x="875" fg:w="1"/><text x="90.0857%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="89.8357%" y="69" width="0.1027%" height="15" fill="rgb(238,110,33)" fg:x="875" fg:w="1"/><text x="90.0857%" y="79.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (7 samples, 0.72%)</title><rect x="89.3224%" y="197" width="0.7187%" height="15" fill="rgb(233,195,10)" fg:x="870" fg:w="7"/><text x="89.5724%" y="207.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (7 samples, 0.72%)</title><rect x="89.3224%" y="181" width="0.7187%" height="15" fill="rgb(254,105,3)" fg:x="870" fg:w="7"/><text x="89.5724%" y="191.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (7 samples, 0.72%)</title><rect x="89.3224%" y="165" width="0.7187%" height="15" fill="rgb(221,225,9)" fg:x="870" fg:w="7"/><text x="89.5724%" y="175.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1 samples, 0.10%)</title><rect x="89.9384%" y="149" width="0.1027%" height="15" fill="rgb(224,227,45)" fg:x="876" fg:w="1"/><text x="90.1884%" y="159.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::routing::in_memory_payment_router::InMemoryPaymentRouter as rinha_de_backend::domain::payment_router::PaymentRouter&gt;::get_processor_for_payment::{{closure}} (2 samples, 0.21%)</title><rect x="90.0411%" y="197" width="0.2053%" height="15" fill="rgb(229,198,43)" fg:x="877" fg:w="2"/><text x="90.2911%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.10%)</title><rect x="90.2464%" y="197" width="0.1027%" height="15" fill="rgb(206,209,35)" fg:x="879" fg:w="1"/><text x="90.4964%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="90.2464%" y="181" width="0.1027%" height="15" fill="rgb(245,195,53)" fg:x="879" fg:w="1"/><text x="90.4964%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="90.2464%" y="165" width="0.1027%" height="15" fill="rgb(240,92,26)" fg:x="879" fg:w="1"/><text x="90.4964%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (4 samples, 0.41%)</title><rect x="90.3491%" y="197" width="0.4107%" height="15" fill="rgb(207,40,23)" fg:x="880" fg:w="4"/><text x="90.5991%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::follow_redirect::RequestUri&gt; (2 samples, 0.21%)</title><rect x="90.5544%" y="181" width="0.2053%" height="15" fill="rgb(223,111,35)" fg:x="882" fg:w="2"/><text x="90.8044%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="90.7598%" y="181" width="0.1027%" height="15" fill="rgb(229,147,28)" fg:x="884" fg:w="1"/><text x="91.0098%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (2 samples, 0.21%)</title><rect x="90.7598%" y="197" width="0.2053%" height="15" fill="rgb(211,29,28)" fg:x="884" fg:w="2"/><text x="91.0098%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.10%)</title><rect x="90.8624%" y="181" width="0.1027%" height="15" fill="rgb(228,72,33)" fg:x="885" fg:w="1"/><text x="91.1124%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (3 samples, 0.31%)</title><rect x="90.9651%" y="197" width="0.3080%" height="15" fill="rgb(205,214,31)" fg:x="886" fg:w="3"/><text x="91.2151%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (2 samples, 0.21%)</title><rect x="91.0678%" y="181" width="0.2053%" height="15" fill="rgb(224,111,15)" fg:x="887" fg:w="2"/><text x="91.3178%" y="191.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (1 samples, 0.10%)</title><rect x="91.1704%" y="165" width="0.1027%" height="15" fill="rgb(253,21,26)" fg:x="888" fg:w="1"/><text x="91.4204%" y="175.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.10%)</title><rect x="91.2731%" y="197" width="0.1027%" height="15" fill="rgb(245,139,43)" fg:x="889" fg:w="1"/><text x="91.5231%" y="207.50"></text></g><g><title>url::Url::password (1 samples, 0.10%)</title><rect x="91.3758%" y="181" width="0.1027%" height="15" fill="rgb(252,170,7)" fg:x="890" fg:w="1"/><text x="91.6258%" y="191.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (2 samples, 0.21%)</title><rect x="91.3758%" y="197" width="0.2053%" height="15" fill="rgb(231,118,14)" fg:x="890" fg:w="2"/><text x="91.6258%" y="207.50"></text></g><g><title>url::Url::username (1 samples, 0.10%)</title><rect x="91.4784%" y="181" width="0.1027%" height="15" fill="rgb(238,83,0)" fg:x="891" fg:w="1"/><text x="91.7284%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="91.8891%" y="181" width="0.1027%" height="15" fill="rgb(221,39,39)" fg:x="895" fg:w="1"/><text x="92.1391%" y="191.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="91.9918%" y="181" width="0.1027%" height="15" fill="rgb(222,119,46)" fg:x="896" fg:w="1"/><text x="92.2418%" y="191.50"></text></g><g><title>url::host::Host::parse (2 samples, 0.21%)</title><rect x="92.0945%" y="133" width="0.2053%" height="15" fill="rgb(222,165,49)" fg:x="897" fg:w="2"/><text x="92.3445%" y="143.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.10%)</title><rect x="92.1971%" y="117" width="0.1027%" height="15" fill="rgb(219,113,52)" fg:x="898" fg:w="1"/><text x="92.4471%" y="127.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.5918 (1 samples, 0.10%)</title><rect x="92.1971%" y="101" width="0.1027%" height="15" fill="rgb(214,7,15)" fg:x="898" fg:w="1"/><text x="92.4471%" y="111.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.10%)</title><rect x="92.1971%" y="85" width="0.1027%" height="15" fill="rgb(235,32,4)" fg:x="898" fg:w="1"/><text x="92.4471%" y="95.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (3 samples, 0.31%)</title><rect x="92.0945%" y="181" width="0.3080%" height="15" fill="rgb(238,90,54)" fg:x="897" fg:w="3"/><text x="92.3445%" y="191.50"></text></g><g><title>url::ParseOptions::parse (3 samples, 0.31%)</title><rect x="92.0945%" y="165" width="0.3080%" height="15" fill="rgb(213,208,19)" fg:x="897" fg:w="3"/><text x="92.3445%" y="175.50"></text></g><g><title>url::parser::Parser::after_double_slash (3 samples, 0.31%)</title><rect x="92.0945%" y="149" width="0.3080%" height="15" fill="rgb(233,156,4)" fg:x="897" fg:w="3"/><text x="92.3445%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.10%)</title><rect x="92.2998%" y="133" width="0.1027%" height="15" fill="rgb(207,194,5)" fg:x="899" fg:w="1"/><text x="92.5498%" y="143.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.10%)</title><rect x="92.4025%" y="181" width="0.1027%" height="15" fill="rgb(206,111,30)" fg:x="900" fg:w="1"/><text x="92.6525%" y="191.50"></text></g><g><title>http::uri::Uri::from_shared (3 samples, 0.31%)</title><rect x="92.5051%" y="181" width="0.3080%" height="15" fill="rgb(243,70,54)" fg:x="901" fg:w="3"/><text x="92.7551%" y="191.50"></text></g><g><title>bytes::bytes::Bytes::split_to (1 samples, 0.10%)</title><rect x="92.7105%" y="165" width="0.1027%" height="15" fill="rgb(242,28,8)" fg:x="903" fg:w="1"/><text x="92.9605%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.10%)</title><rect x="92.9158%" y="149" width="0.1027%" height="15" fill="rgb(219,106,18)" fg:x="905" fg:w="1"/><text x="93.1658%" y="159.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.10%)</title><rect x="92.9158%" y="133" width="0.1027%" height="15" fill="rgb(244,222,10)" fg:x="905" fg:w="1"/><text x="93.1658%" y="143.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (15 samples, 1.54%)</title><rect x="91.5811%" y="197" width="1.5400%" height="15" fill="rgb(236,179,52)" fg:x="892" fg:w="15"/><text x="91.8311%" y="207.50"></text></g><g><title>reqwest::proxy::Matcher::intercept (3 samples, 0.31%)</title><rect x="92.8131%" y="181" width="0.3080%" height="15" fill="rgb(213,23,39)" fg:x="904" fg:w="3"/><text x="93.0631%" y="191.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (3 samples, 0.31%)</title><rect x="92.8131%" y="165" width="0.3080%" height="15" fill="rgb(238,48,10)" fg:x="904" fg:w="3"/><text x="93.0631%" y="175.50"></text></g><g><title>http::uri::authority::host (1 samples, 0.10%)</title><rect x="93.0185%" y="149" width="0.1027%" height="15" fill="rgb(251,196,23)" fg:x="906" fg:w="1"/><text x="93.2685%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.1977 (1 samples, 0.10%)</title><rect x="93.0185%" y="133" width="0.1027%" height="15" fill="rgb(250,152,24)" fg:x="906" fg:w="1"/><text x="93.2685%" y="143.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.10%)</title><rect x="93.1211%" y="197" width="0.1027%" height="15" fill="rgb(209,150,17)" fg:x="907" fg:w="1"/><text x="93.3711%" y="207.50"></text></g><g><title>time::offset_date_time::OffsetDateTime::now_utc (2 samples, 0.21%)</title><rect x="93.2238%" y="197" width="0.2053%" height="15" fill="rgb(234,202,34)" fg:x="908" fg:w="2"/><text x="93.4738%" y="207.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (303 samples, 31.11%)</title><rect x="62.6283%" y="213" width="31.1088%" height="15" fill="rgb(253,148,53)" fg:x="610" fg:w="303"/><text x="62.8783%" y="223.50">rinha_de_backend::infrastructure::workers::payment..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (3 samples, 0.31%)</title><rect x="93.4292%" y="197" width="0.3080%" height="15" fill="rgb(218,129,16)" fg:x="910" fg:w="3"/><text x="93.6792%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="93.6345%" y="181" width="0.1027%" height="15" fill="rgb(216,85,19)" fg:x="912" fg:w="1"/><text x="93.8845%" y="191.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::processor_health_monitor_worker::processor_health_monitor_worker::{{closure}} (1 samples, 0.10%)</title><rect x="93.7372%" y="213" width="0.1027%" height="15" fill="rgb(235,228,7)" fg:x="913" fg:w="1"/><text x="93.9872%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="93.7372%" y="197" width="0.1027%" height="15" fill="rgb(245,175,0)" fg:x="913" fg:w="1"/><text x="93.9872%" y="207.50"></text></g><g><title>url::ParseOptions::parse (1 samples, 0.10%)</title><rect x="93.7372%" y="181" width="0.1027%" height="15" fill="rgb(208,168,36)" fg:x="913" fg:w="1"/><text x="93.9872%" y="191.50"></text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 0.10%)</title><rect x="93.7372%" y="165" width="0.1027%" height="15" fill="rgb(246,171,24)" fg:x="913" fg:w="1"/><text x="93.9872%" y="175.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}}::Guard&lt;T,S&gt;::drain (2 samples, 0.21%)</title><rect x="94.4559%" y="181" width="0.2053%" height="15" fill="rgb(215,142,24)" fg:x="920" fg:w="2"/><text x="94.7059%" y="191.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.10%)</title><rect x="94.5585%" y="165" width="0.1027%" height="15" fill="rgb(250,187,7)" fg:x="921" fg:w="1"/><text x="94.8085%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="94.6612%" y="181" width="0.1027%" height="15" fill="rgb(228,66,33)" fg:x="922" fg:w="1"/><text x="94.9112%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="95.0719%" y="165" width="0.1027%" height="15" fill="rgb(234,215,21)" fg:x="926" fg:w="1"/><text x="95.3219%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (8 samples, 0.82%)</title><rect x="94.7639%" y="181" width="0.8214%" height="15" fill="rgb(222,191,20)" fg:x="923" fg:w="8"/><text x="95.0139%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (4 samples, 0.41%)</title><rect x="95.1745%" y="165" width="0.4107%" height="15" fill="rgb(245,79,54)" fg:x="927" fg:w="4"/><text x="95.4245%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (18 samples, 1.85%)</title><rect x="93.8398%" y="213" width="1.8480%" height="15" fill="rgb(240,10,37)" fg:x="914" fg:w="18"/><text x="94.0898%" y="223.50">t..</text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (15 samples, 1.54%)</title><rect x="94.1478%" y="197" width="1.5400%" height="15" fill="rgb(214,192,32)" fg:x="917" fg:w="15"/><text x="94.3978%" y="207.50"></text></g><g><title>tokio::sync::notify::Notify::notify_waiters (1 samples, 0.10%)</title><rect x="95.5852%" y="181" width="0.1027%" height="15" fill="rgb(209,36,54)" fg:x="931" fg:w="1"/><text x="95.8352%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::release (3 samples, 0.31%)</title><rect x="95.7906%" y="197" width="0.3080%" height="15" fill="rgb(220,10,11)" fg:x="933" fg:w="3"/><text x="96.0406%" y="207.50"></text></g><g><title>rinha-de-backen (678 samples, 69.61%)</title><rect x="26.5914%" y="325" width="69.6099%" height="15" fill="rgb(221,106,17)" fg:x="259" fg:w="678"/><text x="26.8414%" y="335.50">rinha-de-backen</text></g><g><title>_start (678 samples, 69.61%)</title><rect x="26.5914%" y="309" width="69.6099%" height="15" fill="rgb(251,142,44)" fg:x="259" fg:w="678"/><text x="26.8414%" y="319.50">_start</text></g><g><title>__libc_start_main (678 samples, 69.61%)</title><rect x="26.5914%" y="293" width="69.6099%" height="15" fill="rgb(238,13,15)" fg:x="259" fg:w="678"/><text x="26.8414%" y="303.50">__libc_start_main</text></g><g><title>main (678 samples, 69.61%)</title><rect x="26.5914%" y="277" width="69.6099%" height="15" fill="rgb(208,107,27)" fg:x="259" fg:w="678"/><text x="26.8414%" y="287.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (678 samples, 69.61%)</title><rect x="26.5914%" y="261" width="69.6099%" height="15" fill="rgb(205,136,37)" fg:x="259" fg:w="678"/><text x="26.8414%" y="271.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (678 samples, 69.61%)</title><rect x="26.5914%" y="245" width="69.6099%" height="15" fill="rgb(250,205,27)" fg:x="259" fg:w="678"/><text x="26.8414%" y="255.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (582 samples, 59.75%)</title><rect x="36.4476%" y="229" width="59.7536%" height="15" fill="rgb(210,80,43)" fg:x="355" fg:w="582"/><text x="36.6976%" y="239.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (5 samples, 0.51%)</title><rect x="95.6879%" y="213" width="0.5133%" height="15" fill="rgb(247,160,36)" fg:x="932" fg:w="5"/><text x="95.9379%" y="223.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.10%)</title><rect x="96.0986%" y="197" width="0.1027%" height="15" fill="rgb(234,13,49)" fg:x="936" fg:w="1"/><text x="96.3486%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (15 samples, 1.54%)</title><rect x="97.0226%" y="245" width="1.5400%" height="15" fill="rgb(234,122,0)" fg:x="945" fg:w="15"/><text x="97.2726%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.10%)</title><rect x="98.4600%" y="229" width="0.1027%" height="15" fill="rgb(207,146,38)" fg:x="959" fg:w="1"/><text x="98.7100%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.10%)</title><rect x="98.6653%" y="229" width="0.1027%" height="15" fill="rgb(207,177,25)" fg:x="961" fg:w="1"/><text x="98.9153%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (4 samples, 0.41%)</title><rect x="98.5626%" y="245" width="0.4107%" height="15" fill="rgb(211,178,42)" fg:x="960" fg:w="4"/><text x="98.8126%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.21%)</title><rect x="98.7680%" y="229" width="0.2053%" height="15" fill="rgb(230,69,54)" fg:x="962" fg:w="2"/><text x="99.0180%" y="239.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (1 samples, 0.10%)</title><rect x="99.4867%" y="213" width="0.1027%" height="15" fill="rgb(214,135,41)" fg:x="969" fg:w="1"/><text x="99.7367%" y="223.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (6 samples, 0.62%)</title><rect x="99.2813%" y="229" width="0.6160%" height="15" fill="rgb(237,67,25)" fg:x="967" fg:w="6"/><text x="99.5313%" y="239.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (3 samples, 0.31%)</title><rect x="99.5893%" y="213" width="0.3080%" height="15" fill="rgb(222,189,50)" fg:x="970" fg:w="3"/><text x="99.8393%" y="223.50"></text></g><g><title>all (974 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(245,148,34)" fg:x="0" fg:w="974"/><text x="0.2500%" y="351.50"></text></g><g><title>tokio-runtime-w (37 samples, 3.80%)</title><rect x="96.2012%" y="325" width="3.7988%" height="15" fill="rgb(222,29,6)" fg:x="937" fg:w="37"/><text x="96.4512%" y="335.50">toki..</text></g><g><title>__clone (37 samples, 3.80%)</title><rect x="96.2012%" y="309" width="3.7988%" height="15" fill="rgb(221,189,43)" fg:x="937" fg:w="37"/><text x="96.4512%" y="319.50">__cl..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (37 samples, 3.80%)</title><rect x="96.2012%" y="293" width="3.7988%" height="15" fill="rgb(207,36,27)" fg:x="937" fg:w="37"/><text x="96.4512%" y="303.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (37 samples, 3.80%)</title><rect x="96.2012%" y="277" width="3.7988%" height="15" fill="rgb(217,90,24)" fg:x="937" fg:w="37"/><text x="96.4512%" y="287.50">core..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (37 samples, 3.80%)</title><rect x="96.2012%" y="261" width="3.7988%" height="15" fill="rgb(224,66,35)" fg:x="937" fg:w="37"/><text x="96.4512%" y="271.50">std:..</text></g><g><title>tokio::runtime::task::raw::poll (10 samples, 1.03%)</title><rect x="98.9733%" y="245" width="1.0267%" height="15" fill="rgb(221,13,50)" fg:x="964" fg:w="10"/><text x="99.2233%" y="255.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.10%)</title><rect x="99.8973%" y="229" width="0.1027%" height="15" fill="rgb(236,68,49)" fg:x="973" fg:w="1"/><text x="100.1473%" y="239.50"></text></g></svg></svg>