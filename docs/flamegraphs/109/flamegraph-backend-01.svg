<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="966"><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.21%)</title><rect x="0.2070%" y="261" width="0.2070%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.4570%" y="271.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (5 samples, 0.52%)</title><rect x="0.5176%" y="245" width="0.5176%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="5"/><text x="0.7676%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.41%)</title><rect x="0.6211%" y="229" width="0.4141%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="4"/><text x="0.8711%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="1.7598%" y="197" width="0.1035%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="1"/><text x="2.0098%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.21%)</title><rect x="1.9669%" y="181" width="0.2070%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="2"/><text x="2.2169%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (23 samples, 2.38%)</title><rect x="0.4141%" y="261" width="2.3810%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="23"/><text x="0.6641%" y="271.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (17 samples, 1.76%)</title><rect x="1.0352%" y="245" width="1.7598%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="17"/><text x="1.2852%" y="255.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (16 samples, 1.66%)</title><rect x="1.1387%" y="229" width="1.6563%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="16"/><text x="1.3887%" y="239.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (11 samples, 1.14%)</title><rect x="1.6563%" y="213" width="1.1387%" height="15" fill="rgb(218,30,26)" fg:x="16" fg:w="11"/><text x="1.9063%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (9 samples, 0.93%)</title><rect x="1.8634%" y="197" width="0.9317%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="9"/><text x="2.1134%" y="207.50"></text></g><g><title>tokio::task::local::Shared::schedule (6 samples, 0.62%)</title><rect x="2.1739%" y="181" width="0.6211%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="6"/><text x="2.4239%" y="191.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (3 samples, 0.31%)</title><rect x="2.4845%" y="165" width="0.3106%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="3"/><text x="2.7345%" y="175.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.10%)</title><rect x="2.6915%" y="149" width="0.1035%" height="15" fill="rgb(216,20,37)" fg:x="26" fg:w="1"/><text x="2.9415%" y="159.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.10%)</title><rect x="2.6915%" y="133" width="0.1035%" height="15" fill="rgb(206,188,39)" fg:x="26" fg:w="1"/><text x="2.9415%" y="143.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (3 samples, 0.31%)</title><rect x="3.3126%" y="245" width="0.3106%" height="15" fill="rgb(217,207,13)" fg:x="32" fg:w="3"/><text x="3.5626%" y="255.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.21%)</title><rect x="3.4161%" y="229" width="0.2070%" height="15" fill="rgb(231,73,38)" fg:x="33" fg:w="2"/><text x="3.6661%" y="239.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.10%)</title><rect x="5.4865%" y="181" width="0.1035%" height="15" fill="rgb(225,20,46)" fg:x="53" fg:w="1"/><text x="5.7365%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="5.4865%" y="165" width="0.1035%" height="15" fill="rgb(210,31,41)" fg:x="53" fg:w="1"/><text x="5.7365%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="5.4865%" y="149" width="0.1035%" height="15" fill="rgb(221,200,47)" fg:x="53" fg:w="1"/><text x="5.7365%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (2 samples, 0.21%)</title><rect x="5.5901%" y="181" width="0.2070%" height="15" fill="rgb(226,26,5)" fg:x="54" fg:w="2"/><text x="5.8401%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.21%)</title><rect x="5.5901%" y="165" width="0.2070%" height="15" fill="rgb(249,33,26)" fg:x="54" fg:w="2"/><text x="5.8401%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="5.6936%" y="149" width="0.1035%" height="15" fill="rgb(235,183,28)" fg:x="55" fg:w="1"/><text x="5.9436%" y="159.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (3 samples, 0.31%)</title><rect x="8.1781%" y="149" width="0.3106%" height="15" fill="rgb(221,5,38)" fg:x="79" fg:w="3"/><text x="8.4281%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_drop (2 samples, 0.21%)</title><rect x="8.4886%" y="149" width="0.2070%" height="15" fill="rgb(247,18,42)" fg:x="82" fg:w="2"/><text x="8.7386%" y="159.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.10%)</title><rect x="8.6957%" y="149" width="0.1035%" height="15" fill="rgb(241,131,45)" fg:x="84" fg:w="1"/><text x="8.9457%" y="159.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (3 samples, 0.31%)</title><rect x="8.7992%" y="149" width="0.3106%" height="15" fill="rgb(249,31,29)" fg:x="85" fg:w="3"/><text x="9.0492%" y="159.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="9.1097%" y="149" width="0.1035%" height="15" fill="rgb(225,111,53)" fg:x="88" fg:w="1"/><text x="9.3597%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="9.2133%" y="149" width="0.1035%" height="15" fill="rgb(238,160,17)" fg:x="89" fg:w="1"/><text x="9.4633%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.31%)</title><rect x="9.3168%" y="149" width="0.3106%" height="15" fill="rgb(214,148,48)" fg:x="90" fg:w="3"/><text x="9.5668%" y="159.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.10%)</title><rect x="9.5238%" y="133" width="0.1035%" height="15" fill="rgb(232,36,49)" fg:x="92" fg:w="1"/><text x="9.7738%" y="143.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (2 samples, 0.21%)</title><rect x="9.6273%" y="149" width="0.2070%" height="15" fill="rgb(209,103,24)" fg:x="93" fg:w="2"/><text x="9.8773%" y="159.50"></text></g><g><title>http::method::Method::from_bytes (1 samples, 0.10%)</title><rect x="9.8344%" y="149" width="0.1035%" height="15" fill="rgb(229,88,8)" fg:x="95" fg:w="1"/><text x="10.0844%" y="159.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (38 samples, 3.93%)</title><rect x="6.6253%" y="165" width="3.9337%" height="15" fill="rgb(213,181,19)" fg:x="64" fg:w="38"/><text x="6.8753%" y="175.50">&lt;act..</text></g><g><title>httparse::parse_headers_iter_uninit (6 samples, 0.62%)</title><rect x="9.9379%" y="149" width="0.6211%" height="15" fill="rgb(254,191,54)" fg:x="96" fg:w="6"/><text x="10.1879%" y="159.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (2 samples, 0.21%)</title><rect x="11.6977%" y="149" width="0.2070%" height="15" fill="rgb(241,83,37)" fg:x="113" fg:w="2"/><text x="11.9477%" y="159.50"></text></g><g><title>actix_http::extensions::Extensions::insert (2 samples, 0.21%)</title><rect x="11.6977%" y="133" width="0.2070%" height="15" fill="rgb(233,36,39)" fg:x="113" fg:w="2"/><text x="11.9477%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.21%)</title><rect x="11.6977%" y="117" width="0.2070%" height="15" fill="rgb(226,3,54)" fg:x="113" fg:w="2"/><text x="11.9477%" y="127.50"></text></g><g><title>actix_router::quoter::Quoter::requote_str_lossy (1 samples, 0.10%)</title><rect x="11.9048%" y="149" width="0.1035%" height="15" fill="rgb(245,192,40)" fg:x="115" fg:w="1"/><text x="12.1548%" y="159.50"></text></g><g><title>bytes::bytes::shared_drop (3 samples, 0.31%)</title><rect x="12.0083%" y="149" width="0.3106%" height="15" fill="rgb(238,167,29)" fg:x="116" fg:w="3"/><text x="12.2583%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (2 samples, 0.21%)</title><rect x="12.3188%" y="149" width="0.2070%" height="15" fill="rgb(232,182,51)" fg:x="119" fg:w="2"/><text x="12.5688%" y="159.50"></text></g><g><title> 16]&gt; (2 samples, 0.21%)</title><rect x="12.3188%" y="133" width="0.2070%" height="15" fill="rgb(231,60,39)" fg:x="119" fg:w="2"/><text x="12.5688%" y="143.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (21 samples, 2.17%)</title><rect x="10.5590%" y="165" width="2.1739%" height="15" fill="rgb(208,69,12)" fg:x="102" fg:w="21"/><text x="10.8090%" y="175.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::message::Message&lt;actix_http::requests::head::RequestHead&gt;&gt; (2 samples, 0.21%)</title><rect x="12.5259%" y="149" width="0.2070%" height="15" fill="rgb(235,93,37)" fg:x="121" fg:w="2"/><text x="12.7759%" y="159.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.10%)</title><rect x="13.5611%" y="133" width="0.1035%" height="15" fill="rgb(213,116,39)" fg:x="131" fg:w="1"/><text x="13.8111%" y="143.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (1 samples, 0.10%)</title><rect x="13.6646%" y="133" width="0.1035%" height="15" fill="rgb(222,207,29)" fg:x="132" fg:w="1"/><text x="13.9146%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.41%)</title><rect x="13.7681%" y="133" width="0.4141%" height="15" fill="rgb(206,96,30)" fg:x="133" fg:w="4"/><text x="14.0181%" y="143.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (15 samples, 1.55%)</title><rect x="12.7329%" y="165" width="1.5528%" height="15" fill="rgb(218,138,4)" fg:x="123" fg:w="15"/><text x="12.9829%" y="175.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (15 samples, 1.55%)</title><rect x="12.7329%" y="149" width="1.5528%" height="15" fill="rgb(250,191,14)" fg:x="123" fg:w="15"/><text x="12.9829%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="14.1822%" y="133" width="0.1035%" height="15" fill="rgb(239,60,40)" fg:x="137" fg:w="1"/><text x="14.4322%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="14.2857%" y="165" width="0.1035%" height="15" fill="rgb(206,27,48)" fg:x="138" fg:w="1"/><text x="14.5357%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (84 samples, 8.70%)</title><rect x="5.7971%" y="181" width="8.6957%" height="15" fill="rgb(225,35,8)" fg:x="56" fg:w="84"/><text x="6.0471%" y="191.50">actix_http::..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="14.3892%" y="165" width="0.1035%" height="15" fill="rgb(250,213,24)" fg:x="139" fg:w="1"/><text x="14.6392%" y="175.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (1 samples, 0.10%)</title><rect x="14.9068%" y="165" width="0.1035%" height="15" fill="rgb(247,123,22)" fg:x="144" fg:w="1"/><text x="15.1568%" y="175.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (2 samples, 0.21%)</title><rect x="15.0104%" y="165" width="0.2070%" height="15" fill="rgb(231,138,38)" fg:x="145" fg:w="2"/><text x="15.2604%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="16.0455%" y="133" width="0.1035%" height="15" fill="rgb(231,145,46)" fg:x="155" fg:w="1"/><text x="16.2955%" y="143.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.21%)</title><rect x="16.2526%" y="117" width="0.2070%" height="15" fill="rgb(251,118,11)" fg:x="157" fg:w="2"/><text x="16.5026%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="16.3561%" y="101" width="0.1035%" height="15" fill="rgb(217,147,25)" fg:x="158" fg:w="1"/><text x="16.6061%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.10%)</title><rect x="16.4596%" y="117" width="0.1035%" height="15" fill="rgb(247,81,37)" fg:x="159" fg:w="1"/><text x="16.7096%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (1 samples, 0.10%)</title><rect x="16.4596%" y="101" width="0.1035%" height="15" fill="rgb(209,12,38)" fg:x="159" fg:w="1"/><text x="16.7096%" y="111.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 1.04%)</title><rect x="16.1491%" y="133" width="1.0352%" height="15" fill="rgb(227,1,9)" fg:x="156" fg:w="10"/><text x="16.3991%" y="143.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (6 samples, 0.62%)</title><rect x="16.5631%" y="117" width="0.6211%" height="15" fill="rgb(248,47,43)" fg:x="160" fg:w="6"/><text x="16.8131%" y="127.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}} (7 samples, 0.72%)</title><rect x="17.1843%" y="133" width="0.7246%" height="15" fill="rgb(221,10,30)" fg:x="166" fg:w="7"/><text x="17.4343%" y="143.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (3 samples, 0.31%)</title><rect x="17.5983%" y="117" width="0.3106%" height="15" fill="rgb(210,229,1)" fg:x="170" fg:w="3"/><text x="17.8483%" y="127.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (7 samples, 0.72%)</title><rect x="17.9089%" y="133" width="0.7246%" height="15" fill="rgb(222,148,37)" fg:x="173" fg:w="7"/><text x="18.1589%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.31%)</title><rect x="18.3230%" y="117" width="0.3106%" height="15" fill="rgb(234,67,33)" fg:x="177" fg:w="3"/><text x="18.5730%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="18.7371%" y="117" width="0.1035%" height="15" fill="rgb(247,98,35)" fg:x="181" fg:w="1"/><text x="18.9871%" y="127.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.62%)</title><rect x="18.6335%" y="133" width="0.6211%" height="15" fill="rgb(247,138,52)" fg:x="180" fg:w="6"/><text x="18.8835%" y="143.50"></text></g><g><title>ryu::pretty::format64 (4 samples, 0.41%)</title><rect x="18.8406%" y="117" width="0.4141%" height="15" fill="rgb(213,79,30)" fg:x="182" fg:w="4"/><text x="19.0906%" y="127.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.10%)</title><rect x="19.1511%" y="101" width="0.1035%" height="15" fill="rgb(246,177,23)" fg:x="185" fg:w="1"/><text x="19.4011%" y="111.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (3 samples, 0.31%)</title><rect x="19.2547%" y="133" width="0.3106%" height="15" fill="rgb(230,62,27)" fg:x="186" fg:w="3"/><text x="19.5047%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.10%)</title><rect x="19.4617%" y="117" width="0.1035%" height="15" fill="rgb(216,154,8)" fg:x="188" fg:w="1"/><text x="19.7117%" y="127.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::body (1 samples, 0.10%)</title><rect x="19.5652%" y="133" width="0.1035%" height="15" fill="rgb(244,35,45)" fg:x="189" fg:w="1"/><text x="19.8152%" y="143.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (6 samples, 0.62%)</title><rect x="19.6687%" y="133" width="0.6211%" height="15" fill="rgb(251,115,12)" fg:x="190" fg:w="6"/><text x="19.9187%" y="143.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="20.2899%" y="117" width="0.1035%" height="15" fill="rgb(240,54,50)" fg:x="196" fg:w="1"/><text x="20.5399%" y="127.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (51 samples, 5.28%)</title><rect x="15.2174%" y="149" width="5.2795%" height="15" fill="rgb(233,84,52)" fg:x="147" fg:w="51"/><text x="15.4674%" y="159.50">actix_..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (2 samples, 0.21%)</title><rect x="20.2899%" y="133" width="0.2070%" height="15" fill="rgb(207,117,47)" fg:x="196" fg:w="2"/><text x="20.5399%" y="143.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="20.3934%" y="117" width="0.1035%" height="15" fill="rgb(249,43,39)" fg:x="197" fg:w="1"/><text x="20.6434%" y="127.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (52 samples, 5.38%)</title><rect x="15.2174%" y="165" width="5.3830%" height="15" fill="rgb(209,38,44)" fg:x="147" fg:w="52"/><text x="15.4674%" y="175.50">&lt;actix_..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::handler::handler_service&lt;&lt;rinha_de_backend::adapters::web::payments_handler::payments as actix_web::service::HttpServiceFactory&gt;::register::payments,(actix_web::types::json::Json&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;,actix_web::data::Data&lt;alloc::boxed::Box&lt;dyn rinha_de_backend::domain::payment_producer::PaymentProducer&gt;&gt;)&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="20.4969%" y="149" width="0.1035%" height="15" fill="rgb(236,212,23)" fg:x="198" fg:w="1"/><text x="20.7469%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (8 samples, 0.83%)</title><rect x="20.6004%" y="149" width="0.8282%" height="15" fill="rgb(242,79,21)" fg:x="199" fg:w="8"/><text x="20.8504%" y="159.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (8 samples, 0.83%)</title><rect x="20.6004%" y="133" width="0.8282%" height="15" fill="rgb(211,96,35)" fg:x="199" fg:w="8"/><text x="20.8504%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (10 samples, 1.04%)</title><rect x="20.6004%" y="165" width="1.0352%" height="15" fill="rgb(253,215,40)" fg:x="199" fg:w="10"/><text x="20.8504%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (2 samples, 0.21%)</title><rect x="21.4286%" y="149" width="0.2070%" height="15" fill="rgb(211,81,21)" fg:x="207" fg:w="2"/><text x="21.6786%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (71 samples, 7.35%)</title><rect x="14.4928%" y="181" width="7.3499%" height="15" fill="rgb(208,190,38)" fg:x="140" fg:w="71"/><text x="14.7428%" y="191.50">actix_http..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (2 samples, 0.21%)</title><rect x="21.6356%" y="165" width="0.2070%" height="15" fill="rgb(235,213,38)" fg:x="209" fg:w="2"/><text x="21.8856%" y="175.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.10%)</title><rect x="22.4638%" y="149" width="0.1035%" height="15" fill="rgb(237,122,38)" fg:x="217" fg:w="1"/><text x="22.7138%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (8 samples, 0.83%)</title><rect x="21.8427%" y="181" width="0.8282%" height="15" fill="rgb(244,218,35)" fg:x="211" fg:w="8"/><text x="22.0927%" y="191.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (7 samples, 0.72%)</title><rect x="21.9462%" y="165" width="0.7246%" height="15" fill="rgb(240,68,47)" fg:x="212" fg:w="7"/><text x="22.1962%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.10%)</title><rect x="22.5673%" y="149" width="0.1035%" height="15" fill="rgb(210,16,53)" fg:x="218" fg:w="1"/><text x="22.8173%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (3 samples, 0.31%)</title><rect x="22.6708%" y="181" width="0.3106%" height="15" fill="rgb(235,124,12)" fg:x="219" fg:w="3"/><text x="22.9208%" y="191.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (1 samples, 0.10%)</title><rect x="22.9814%" y="181" width="0.1035%" height="15" fill="rgb(224,169,11)" fg:x="222" fg:w="1"/><text x="23.2314%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.10%)</title><rect x="22.9814%" y="165" width="0.1035%" height="15" fill="rgb(250,166,2)" fg:x="222" fg:w="1"/><text x="23.2314%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.10%)</title><rect x="22.9814%" y="149" width="0.1035%" height="15" fill="rgb(242,216,29)" fg:x="222" fg:w="1"/><text x="23.2314%" y="159.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (5 samples, 0.52%)</title><rect x="23.3954%" y="165" width="0.5176%" height="15" fill="rgb(230,116,27)" fg:x="226" fg:w="5"/><text x="23.6454%" y="175.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (2 samples, 0.21%)</title><rect x="23.7060%" y="149" width="0.2070%" height="15" fill="rgb(228,99,48)" fg:x="229" fg:w="2"/><text x="23.9560%" y="159.50"></text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (9 samples, 0.93%)</title><rect x="23.0849%" y="181" width="0.9317%" height="15" fill="rgb(253,11,6)" fg:x="223" fg:w="9"/><text x="23.3349%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.10%)</title><rect x="23.9130%" y="165" width="0.1035%" height="15" fill="rgb(247,143,39)" fg:x="231" fg:w="1"/><text x="24.1630%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.10%)</title><rect x="23.9130%" y="149" width="0.1035%" height="15" fill="rgb(236,97,10)" fg:x="231" fg:w="1"/><text x="24.1630%" y="159.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.10%)</title><rect x="24.0166%" y="181" width="0.1035%" height="15" fill="rgb(233,208,19)" fg:x="232" fg:w="1"/><text x="24.2666%" y="191.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (190 samples, 19.67%)</title><rect x="4.5549%" y="197" width="19.6687%" height="15" fill="rgb(216,164,2)" fg:x="44" fg:w="190"/><text x="4.8049%" y="207.50">&lt;actix_http::h1::dispatcher::Di..</text></g><g><title>tokio::time::sleep::Sleep::new_timeout (1 samples, 0.10%)</title><rect x="24.1201%" y="181" width="0.1035%" height="15" fill="rgb(220,129,5)" fg:x="233" fg:w="1"/><text x="24.3701%" y="191.50"></text></g><g><title>&lt;actix_service::and_then::AndThenServiceResponse&lt;A,B,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="24.2236%" y="197" width="0.1035%" height="15" fill="rgb(242,17,10)" fg:x="234" fg:w="1"/><text x="24.4736%" y="207.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (195 samples, 20.19%)</title><rect x="4.2443%" y="213" width="20.1863%" height="15" fill="rgb(242,107,0)" fg:x="41" fg:w="195"/><text x="4.4943%" y="223.50">&lt;actix_server::service::StreamSe..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::service::State&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler,actix_http::h1::upgrade::UpgradeHandler&gt;&gt; (1 samples, 0.10%)</title><rect x="24.3271%" y="197" width="0.1035%" height="15" fill="rgb(251,28,31)" fg:x="235" fg:w="1"/><text x="24.5771%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;[actix_http::h1::dispatcher::DispatcherMessage]&gt; (1 samples, 0.10%)</title><rect x="24.3271%" y="181" width="0.1035%" height="15" fill="rgb(233,223,10)" fg:x="235" fg:w="1"/><text x="24.5771%" y="191.50"></text></g><g><title>actix-rt|system (237 samples, 24.53%)</title><rect x="0.0000%" y="341" width="24.5342%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="237"/><text x="0.2500%" y="351.50">actix-rt|system</text></g><g><title>__clone (237 samples, 24.53%)</title><rect x="0.0000%" y="325" width="24.5342%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="237"/><text x="0.2500%" y="335.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (237 samples, 24.53%)</title><rect x="0.0000%" y="309" width="24.5342%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="237"/><text x="0.2500%" y="319.50">std::sys::pal::unix::thread::Thread::ne..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (237 samples, 24.53%)</title><rect x="0.0000%" y="293" width="24.5342%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="237"/><text x="0.2500%" y="303.50">core::ops::function::FnOnce::call_once{..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (237 samples, 24.53%)</title><rect x="0.0000%" y="277" width="24.5342%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="237"/><text x="0.2500%" y="287.50">std::sys::backtrace::__rust_begin_short..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (210 samples, 21.74%)</title><rect x="2.7950%" y="261" width="21.7391%" height="15" fill="rgb(212,68,19)" fg:x="27" fg:w="210"/><text x="3.0450%" y="271.50">tokio::task::local::LocalSet::run_..</text></g><g><title>tokio::task::local::LocalSet::tick (202 samples, 20.91%)</title><rect x="3.6232%" y="245" width="20.9110%" height="15" fill="rgb(240,187,13)" fg:x="35" fg:w="202"/><text x="3.8732%" y="255.50">tokio::task::local::LocalSet::tick</text></g><g><title>tokio::runtime::task::raw::poll (199 samples, 20.60%)</title><rect x="3.9337%" y="229" width="20.6004%" height="15" fill="rgb(223,113,26)" fg:x="38" fg:w="199"/><text x="4.1837%" y="239.50">tokio::runtime::task::raw::poll</text></g><g><title>&lt;actix_server::worker::ServerWorker as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="24.4306%" y="213" width="0.1035%" height="15" fill="rgb(206,192,2)" fg:x="236" fg:w="1"/><text x="24.6806%" y="223.50"></text></g><g><title>actix_server::worker::ServerWorker::check_readiness (1 samples, 0.10%)</title><rect x="24.4306%" y="197" width="0.1035%" height="15" fill="rgb(241,108,4)" fg:x="236" fg:w="1"/><text x="24.6806%" y="207.50"></text></g><g><title>actix-server ac (1 samples, 0.10%)</title><rect x="24.5342%" y="341" width="0.1035%" height="15" fill="rgb(247,173,49)" fg:x="237" fg:w="1"/><text x="24.7842%" y="351.50"></text></g><g><title>__clone (1 samples, 0.10%)</title><rect x="24.5342%" y="325" width="0.1035%" height="15" fill="rgb(224,114,35)" fg:x="237" fg:w="1"/><text x="24.7842%" y="335.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.10%)</title><rect x="24.5342%" y="309" width="0.1035%" height="15" fill="rgb(245,159,27)" fg:x="237" fg:w="1"/><text x="24.7842%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.10%)</title><rect x="24.5342%" y="293" width="0.1035%" height="15" fill="rgb(245,172,44)" fg:x="237" fg:w="1"/><text x="24.7842%" y="303.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.10%)</title><rect x="24.5342%" y="277" width="0.1035%" height="15" fill="rgb(236,23,11)" fg:x="237" fg:w="1"/><text x="24.7842%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="26.1905%" y="245" width="0.1035%" height="15" fill="rgb(205,117,38)" fg:x="253" fg:w="1"/><text x="26.4405%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (3 samples, 0.31%)</title><rect x="26.2940%" y="245" width="0.3106%" height="15" fill="rgb(237,72,25)" fg:x="254" fg:w="3"/><text x="26.5440%" y="255.50"></text></g><g><title>tokio::runtime::driver::Driver::park (1 samples, 0.10%)</title><rect x="27.1222%" y="229" width="0.1035%" height="15" fill="rgb(244,70,9)" fg:x="262" fg:w="1"/><text x="27.3722%" y="239.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (6 samples, 0.62%)</title><rect x="27.2257%" y="229" width="0.6211%" height="15" fill="rgb(217,125,39)" fg:x="263" fg:w="6"/><text x="27.4757%" y="239.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.31%)</title><rect x="27.5362%" y="213" width="0.3106%" height="15" fill="rgb(235,36,10)" fg:x="266" fg:w="3"/><text x="27.7862%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="28.8820%" y="213" width="0.1035%" height="15" fill="rgb(251,123,47)" fg:x="279" fg:w="1"/><text x="29.1320%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.10%)</title><rect x="28.9855%" y="213" width="0.1035%" height="15" fill="rgb(221,13,13)" fg:x="280" fg:w="1"/><text x="29.2355%" y="223.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 0.21%)</title><rect x="29.0890%" y="213" width="0.2070%" height="15" fill="rgb(238,131,9)" fg:x="281" fg:w="2"/><text x="29.3390%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="30.1242%" y="197" width="0.1035%" height="15" fill="rgb(211,50,8)" fg:x="291" fg:w="1"/><text x="30.3742%" y="207.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.10%)</title><rect x="30.1242%" y="181" width="0.1035%" height="15" fill="rgb(245,182,24)" fg:x="291" fg:w="1"/><text x="30.3742%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (4 samples, 0.41%)</title><rect x="30.9524%" y="165" width="0.4141%" height="15" fill="rgb(242,14,37)" fg:x="299" fg:w="4"/><text x="31.2024%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (21 samples, 2.17%)</title><rect x="29.2961%" y="213" width="2.1739%" height="15" fill="rgb(246,228,12)" fg:x="283" fg:w="21"/><text x="29.5461%" y="223.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (12 samples, 1.24%)</title><rect x="30.2277%" y="197" width="1.2422%" height="15" fill="rgb(213,55,15)" fg:x="292" fg:w="12"/><text x="30.4777%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (10 samples, 1.04%)</title><rect x="30.4348%" y="181" width="1.0352%" height="15" fill="rgb(209,9,3)" fg:x="294" fg:w="10"/><text x="30.6848%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.10%)</title><rect x="31.3665%" y="165" width="0.1035%" height="15" fill="rgb(230,59,30)" fg:x="303" fg:w="1"/><text x="31.6165%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (49 samples, 5.07%)</title><rect x="26.6046%" y="245" width="5.0725%" height="15" fill="rgb(209,121,21)" fg:x="257" fg:w="49"/><text x="26.8546%" y="255.50">tokio:..</text></g><g><title>tokio::runtime::time::Driver::park_internal (37 samples, 3.83%)</title><rect x="27.8468%" y="229" width="3.8302%" height="15" fill="rgb(220,109,13)" fg:x="269" fg:w="37"/><text x="28.0968%" y="239.50">toki..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.21%)</title><rect x="31.4700%" y="213" width="0.2070%" height="15" fill="rgb(232,18,1)" fg:x="304" fg:w="2"/><text x="31.7200%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (6 samples, 0.62%)</title><rect x="31.6770%" y="245" width="0.6211%" height="15" fill="rgb(215,41,42)" fg:x="306" fg:w="6"/><text x="31.9270%" y="255.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.21%)</title><rect x="35.1967%" y="213" width="0.2070%" height="15" fill="rgb(224,123,36)" fg:x="340" fg:w="2"/><text x="35.4467%" y="223.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.10%)</title><rect x="35.3002%" y="197" width="0.1035%" height="15" fill="rgb(240,125,3)" fg:x="341" fg:w="1"/><text x="35.5502%" y="207.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.10%)</title><rect x="35.3002%" y="181" width="0.1035%" height="15" fill="rgb(205,98,50)" fg:x="341" fg:w="1"/><text x="35.5502%" y="191.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.10%)</title><rect x="36.7495%" y="197" width="0.1035%" height="15" fill="rgb(205,185,37)" fg:x="355" fg:w="1"/><text x="36.9995%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (3 samples, 0.31%)</title><rect x="36.8530%" y="197" width="0.3106%" height="15" fill="rgb(238,207,15)" fg:x="356" fg:w="3"/><text x="37.1030%" y="207.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (2 samples, 0.21%)</title><rect x="36.9565%" y="181" width="0.2070%" height="15" fill="rgb(213,199,42)" fg:x="357" fg:w="2"/><text x="37.2065%" y="191.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (1 samples, 0.10%)</title><rect x="37.0600%" y="165" width="0.1035%" height="15" fill="rgb(235,201,11)" fg:x="358" fg:w="1"/><text x="37.3100%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.10%)</title><rect x="37.0600%" y="149" width="0.1035%" height="15" fill="rgb(207,46,11)" fg:x="358" fg:w="1"/><text x="37.3100%" y="159.50"></text></g><g><title>bytes::bytes::Bytes::slice (1 samples, 0.10%)</title><rect x="37.1636%" y="197" width="0.1035%" height="15" fill="rgb(241,35,35)" fg:x="359" fg:w="1"/><text x="37.4136%" y="207.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (1 samples, 0.10%)</title><rect x="37.1636%" y="181" width="0.1035%" height="15" fill="rgb(243,32,47)" fg:x="359" fg:w="1"/><text x="37.4136%" y="191.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (1 samples, 0.10%)</title><rect x="37.2671%" y="197" width="0.1035%" height="15" fill="rgb(247,202,23)" fg:x="360" fg:w="1"/><text x="37.5171%" y="207.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (1 samples, 0.10%)</title><rect x="37.2671%" y="181" width="0.1035%" height="15" fill="rgb(219,102,11)" fg:x="360" fg:w="1"/><text x="37.5171%" y="191.50"></text></g><g><title>httparse::parse_headers_iter_uninit (2 samples, 0.21%)</title><rect x="37.3706%" y="197" width="0.2070%" height="15" fill="rgb(243,110,44)" fg:x="361" fg:w="2"/><text x="37.6206%" y="207.50"></text></g><g><title>httparse::parse_reason (3 samples, 0.31%)</title><rect x="37.5776%" y="197" width="0.3106%" height="15" fill="rgb(222,74,54)" fg:x="363" fg:w="3"/><text x="37.8276%" y="207.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::poll_canceled (1 samples, 0.10%)</title><rect x="37.8882%" y="197" width="0.1035%" height="15" fill="rgb(216,99,12)" fg:x="366" fg:w="1"/><text x="38.1382%" y="207.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (3 samples, 0.31%)</title><rect x="37.9917%" y="197" width="0.3106%" height="15" fill="rgb(226,22,26)" fg:x="367" fg:w="3"/><text x="38.2417%" y="207.50"></text></g><g><title>hyper::headers::is_chunked (3 samples, 0.31%)</title><rect x="37.9917%" y="181" width="0.3106%" height="15" fill="rgb(217,163,10)" fg:x="367" fg:w="3"/><text x="38.2417%" y="191.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (3 samples, 0.31%)</title><rect x="37.9917%" y="165" width="0.3106%" height="15" fill="rgb(213,25,53)" fg:x="367" fg:w="3"/><text x="38.2417%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.10%)</title><rect x="38.4058%" y="181" width="0.1035%" height="15" fill="rgb(252,105,26)" fg:x="371" fg:w="1"/><text x="38.6558%" y="191.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.10%)</title><rect x="38.4058%" y="165" width="0.1035%" height="15" fill="rgb(220,39,43)" fg:x="371" fg:w="1"/><text x="38.6558%" y="175.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (1 samples, 0.10%)</title><rect x="38.4058%" y="149" width="0.1035%" height="15" fill="rgb(229,68,48)" fg:x="371" fg:w="1"/><text x="38.6558%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.10%)</title><rect x="38.4058%" y="133" width="0.1035%" height="15" fill="rgb(252,8,32)" fg:x="371" fg:w="1"/><text x="38.6558%" y="143.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (5 samples, 0.52%)</title><rect x="38.3023%" y="197" width="0.5176%" height="15" fill="rgb(223,20,43)" fg:x="370" fg:w="5"/><text x="38.5523%" y="207.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (3 samples, 0.31%)</title><rect x="38.5093%" y="181" width="0.3106%" height="15" fill="rgb(229,81,49)" fg:x="372" fg:w="3"/><text x="38.7593%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (2 samples, 0.21%)</title><rect x="38.6128%" y="165" width="0.2070%" height="15" fill="rgb(236,28,36)" fg:x="373" fg:w="2"/><text x="38.8628%" y="175.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.10%)</title><rect x="38.7164%" y="149" width="0.1035%" height="15" fill="rgb(249,185,26)" fg:x="374" fg:w="1"/><text x="38.9664%" y="159.50"></text></g><g><title>core::fmt::write (2 samples, 0.21%)</title><rect x="39.0269%" y="181" width="0.2070%" height="15" fill="rgb(249,174,33)" fg:x="377" fg:w="2"/><text x="39.2769%" y="191.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.21%)</title><rect x="39.0269%" y="165" width="0.2070%" height="15" fill="rgb(233,201,37)" fg:x="377" fg:w="2"/><text x="39.2769%" y="175.50"></text></g><g><title>core::fmt::write (2 samples, 0.21%)</title><rect x="39.0269%" y="149" width="0.2070%" height="15" fill="rgb(221,78,26)" fg:x="377" fg:w="2"/><text x="39.2769%" y="159.50"></text></g><g><title>&lt;hyper::proto::h1::role::FastWrite as core::fmt::Write&gt;::write_str (2 samples, 0.21%)</title><rect x="39.0269%" y="133" width="0.2070%" height="15" fill="rgb(250,127,30)" fg:x="377" fg:w="2"/><text x="39.2769%" y="143.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (6 samples, 0.62%)</title><rect x="38.8199%" y="197" width="0.6211%" height="15" fill="rgb(230,49,44)" fg:x="375" fg:w="6"/><text x="39.0699%" y="207.50"></text></g><g><title>hyper::proto::h1::role::write_headers (2 samples, 0.21%)</title><rect x="39.2340%" y="181" width="0.2070%" height="15" fill="rgb(229,67,23)" fg:x="379" fg:w="2"/><text x="39.4840%" y="191.50"></text></g><g><title>http::header::name::StandardHeader::as_str.3367 (1 samples, 0.10%)</title><rect x="39.3375%" y="165" width="0.1035%" height="15" fill="rgb(249,83,47)" fg:x="380" fg:w="1"/><text x="39.5875%" y="175.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Write&gt;::poll_flush (1 samples, 0.10%)</title><rect x="39.6480%" y="181" width="0.1035%" height="15" fill="rgb(215,43,3)" fg:x="383" fg:w="1"/><text x="39.8980%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="39.7516%" y="181" width="0.1035%" height="15" fill="rgb(238,154,13)" fg:x="384" fg:w="1"/><text x="40.0016%" y="191.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (5 samples, 0.52%)</title><rect x="39.4410%" y="197" width="0.5176%" height="15" fill="rgb(219,56,2)" fg:x="381" fg:w="5"/><text x="39.6910%" y="207.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.10%)</title><rect x="39.8551%" y="181" width="0.1035%" height="15" fill="rgb(233,0,4)" fg:x="385" fg:w="1"/><text x="40.1051%" y="191.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (7 samples, 0.72%)</title><rect x="39.9586%" y="197" width="0.7246%" height="15" fill="rgb(235,30,7)" fg:x="386" fg:w="7"/><text x="40.2086%" y="207.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (6 samples, 0.62%)</title><rect x="40.0621%" y="181" width="0.6211%" height="15" fill="rgb(250,79,13)" fg:x="387" fg:w="6"/><text x="40.3121%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.31%)</title><rect x="40.3727%" y="165" width="0.3106%" height="15" fill="rgb(211,146,34)" fg:x="390" fg:w="3"/><text x="40.6227%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.21%)</title><rect x="40.4762%" y="149" width="0.2070%" height="15" fill="rgb(228,22,38)" fg:x="391" fg:w="2"/><text x="40.7262%" y="159.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (54 samples, 5.59%)</title><rect x="35.4037%" y="213" width="5.5901%" height="15" fill="rgb(235,168,5)" fg:x="342" fg:w="54"/><text x="35.6537%" y="223.50">&lt;hyper:..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (3 samples, 0.31%)</title><rect x="40.6832%" y="197" width="0.3106%" height="15" fill="rgb(221,155,16)" fg:x="393" fg:w="3"/><text x="40.9332%" y="207.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.21%)</title><rect x="40.7867%" y="181" width="0.2070%" height="15" fill="rgb(215,215,53)" fg:x="394" fg:w="2"/><text x="41.0367%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.52%)</title><rect x="42.0290%" y="181" width="0.5176%" height="15" fill="rgb(223,4,10)" fg:x="406" fg:w="5"/><text x="42.2790%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.31%)</title><rect x="42.2360%" y="165" width="0.3106%" height="15" fill="rgb(234,103,6)" fg:x="408" fg:w="3"/><text x="42.4860%" y="175.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.10%)</title><rect x="43.4783%" y="149" width="0.1035%" height="15" fill="rgb(227,97,0)" fg:x="420" fg:w="1"/><text x="43.7283%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="44.5135%" y="117" width="0.1035%" height="15" fill="rgb(234,150,53)" fg:x="430" fg:w="1"/><text x="44.7635%" y="127.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.10%)</title><rect x="44.5135%" y="101" width="0.1035%" height="15" fill="rgb(228,201,54)" fg:x="430" fg:w="1"/><text x="44.7635%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (3 samples, 0.31%)</title><rect x="44.4099%" y="133" width="0.3106%" height="15" fill="rgb(222,22,37)" fg:x="429" fg:w="3"/><text x="44.6599%" y="143.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="44.6170%" y="117" width="0.1035%" height="15" fill="rgb(237,53,32)" fg:x="431" fg:w="1"/><text x="44.8670%" y="127.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="44.6170%" y="101" width="0.1035%" height="15" fill="rgb(233,25,53)" fg:x="431" fg:w="1"/><text x="44.8670%" y="111.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.21%)</title><rect x="45.2381%" y="53" width="0.2070%" height="15" fill="rgb(210,40,34)" fg:x="437" fg:w="2"/><text x="45.4881%" y="63.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::detect (1 samples, 0.10%)</title><rect x="45.3416%" y="37" width="0.1035%" height="15" fill="rgb(241,220,44)" fg:x="438" fg:w="1"/><text x="45.5916%" y="47.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (3 samples, 0.31%)</title><rect x="45.2381%" y="69" width="0.3106%" height="15" fill="rgb(235,28,35)" fg:x="437" fg:w="3"/><text x="45.4881%" y="79.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="45.4451%" y="53" width="0.1035%" height="15" fill="rgb(210,56,17)" fg:x="439" fg:w="1"/><text x="45.6951%" y="63.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="45.4451%" y="37" width="0.1035%" height="15" fill="rgb(224,130,29)" fg:x="439" fg:w="1"/><text x="45.6951%" y="47.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (5 samples, 0.52%)</title><rect x="45.2381%" y="85" width="0.5176%" height="15" fill="rgb(235,212,8)" fg:x="437" fg:w="5"/><text x="45.4881%" y="95.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.21%)</title><rect x="45.5487%" y="69" width="0.2070%" height="15" fill="rgb(223,33,50)" fg:x="440" fg:w="2"/><text x="45.7987%" y="79.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (1 samples, 0.10%)</title><rect x="45.6522%" y="53" width="0.1035%" height="15" fill="rgb(219,149,13)" fg:x="441" fg:w="1"/><text x="45.9022%" y="63.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (11 samples, 1.14%)</title><rect x="44.7205%" y="133" width="1.1387%" height="15" fill="rgb(250,156,29)" fg:x="432" fg:w="11"/><text x="44.9705%" y="143.50"></text></g><g><title>combine::parser::Parser::parse_mode (10 samples, 1.04%)</title><rect x="44.8240%" y="117" width="1.0352%" height="15" fill="rgb(216,193,19)" fg:x="433" fg:w="10"/><text x="45.0740%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (10 samples, 1.04%)</title><rect x="44.8240%" y="101" width="1.0352%" height="15" fill="rgb(216,135,14)" fg:x="433" fg:w="10"/><text x="45.0740%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="45.7557%" y="85" width="0.1035%" height="15" fill="rgb(241,47,5)" fg:x="442" fg:w="1"/><text x="46.0057%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="45.8592%" y="133" width="0.1035%" height="15" fill="rgb(233,42,35)" fg:x="443" fg:w="1"/><text x="46.1092%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (30 samples, 3.11%)</title><rect x="42.9607%" y="165" width="3.1056%" height="15" fill="rgb(231,13,6)" fg:x="415" fg:w="30"/><text x="43.2107%" y="175.50">&lt;co..</text></g><g><title>combine::parser::ParseMode::parse_committed (24 samples, 2.48%)</title><rect x="43.5818%" y="149" width="2.4845%" height="15" fill="rgb(207,181,40)" fg:x="421" fg:w="24"/><text x="43.8318%" y="159.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="45.9627%" y="133" width="0.1035%" height="15" fill="rgb(254,173,49)" fg:x="444" fg:w="1"/><text x="46.2127%" y="143.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (46 samples, 4.76%)</title><rect x="41.5114%" y="197" width="4.7619%" height="15" fill="rgb(221,1,38)" fg:x="401" fg:w="46"/><text x="41.7614%" y="207.50">&lt;tokio..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (36 samples, 3.73%)</title><rect x="42.5466%" y="181" width="3.7267%" height="15" fill="rgb(206,124,46)" fg:x="411" fg:w="36"/><text x="42.7966%" y="191.50">redi..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.21%)</title><rect x="46.0663%" y="165" width="0.2070%" height="15" fill="rgb(249,21,11)" fg:x="445" fg:w="2"/><text x="46.3163%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (3 samples, 0.31%)</title><rect x="46.2733%" y="197" width="0.3106%" height="15" fill="rgb(222,201,40)" fg:x="447" fg:w="3"/><text x="46.5233%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (1 samples, 0.10%)</title><rect x="46.4803%" y="181" width="0.1035%" height="15" fill="rgb(235,61,29)" fg:x="449" fg:w="1"/><text x="46.7303%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="46.6874%" y="181" width="0.1035%" height="15" fill="rgb(219,207,3)" fg:x="451" fg:w="1"/><text x="46.9374%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.10%)</title><rect x="46.8944%" y="165" width="0.1035%" height="15" fill="rgb(222,56,46)" fg:x="453" fg:w="1"/><text x="47.1444%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (59 samples, 6.11%)</title><rect x="40.9938%" y="213" width="6.1077%" height="15" fill="rgb(239,76,54)" fg:x="396" fg:w="59"/><text x="41.2438%" y="223.50">&lt;redis::..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (5 samples, 0.52%)</title><rect x="46.5839%" y="197" width="0.5176%" height="15" fill="rgb(231,124,27)" fg:x="450" fg:w="5"/><text x="46.8339%" y="207.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.31%)</title><rect x="46.7909%" y="181" width="0.3106%" height="15" fill="rgb(249,195,6)" fg:x="452" fg:w="3"/><text x="47.0409%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.10%)</title><rect x="46.9979%" y="165" width="0.1035%" height="15" fill="rgb(237,174,47)" fg:x="454" fg:w="1"/><text x="47.2479%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (2 samples, 0.21%)</title><rect x="47.1014%" y="213" width="0.2070%" height="15" fill="rgb(206,201,31)" fg:x="455" fg:w="2"/><text x="47.3514%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.21%)</title><rect x="47.1014%" y="197" width="0.2070%" height="15" fill="rgb(231,57,52)" fg:x="455" fg:w="2"/><text x="47.3514%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="47.2050%" y="181" width="0.1035%" height="15" fill="rgb(248,177,22)" fg:x="456" fg:w="1"/><text x="47.4550%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (4 samples, 0.41%)</title><rect x="47.3085%" y="213" width="0.4141%" height="15" fill="rgb(215,211,37)" fg:x="457" fg:w="4"/><text x="47.5585%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.10%)</title><rect x="47.6190%" y="197" width="0.1035%" height="15" fill="rgb(241,128,51)" fg:x="460" fg:w="1"/><text x="47.8690%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.10%)</title><rect x="47.7226%" y="213" width="0.1035%" height="15" fill="rgb(227,165,31)" fg:x="461" fg:w="1"/><text x="47.9726%" y="223.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.21%)</title><rect x="47.8261%" y="213" width="0.2070%" height="15" fill="rgb(228,167,24)" fg:x="462" fg:w="2"/><text x="48.0761%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (141 samples, 14.60%)</title><rect x="33.8509%" y="229" width="14.5963%" height="15" fill="rgb(228,143,12)" fg:x="327" fg:w="141"/><text x="34.1009%" y="239.50">&lt;futures_util::future:..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.41%)</title><rect x="48.0331%" y="213" width="0.4141%" height="15" fill="rgb(249,149,8)" fg:x="464" fg:w="4"/><text x="48.2831%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;,alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="48.4472%" y="229" width="0.1035%" height="15" fill="rgb(243,35,44)" fg:x="468" fg:w="1"/><text x="48.6972%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="49.2754%" y="197" width="0.1035%" height="15" fill="rgb(246,89,9)" fg:x="476" fg:w="1"/><text x="49.5254%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.21%)</title><rect x="49.3789%" y="181" width="0.2070%" height="15" fill="rgb(233,213,13)" fg:x="477" fg:w="2"/><text x="49.6289%" y="191.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.31%)</title><rect x="49.3789%" y="197" width="0.3106%" height="15" fill="rgb(233,141,41)" fg:x="477" fg:w="3"/><text x="49.6289%" y="207.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.10%)</title><rect x="49.5859%" y="181" width="0.1035%" height="15" fill="rgb(239,167,4)" fg:x="479" fg:w="1"/><text x="49.8359%" y="191.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.10%)</title><rect x="49.5859%" y="165" width="0.1035%" height="15" fill="rgb(209,217,16)" fg:x="479" fg:w="1"/><text x="49.8359%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.21%)</title><rect x="49.6894%" y="197" width="0.2070%" height="15" fill="rgb(219,88,35)" fg:x="480" fg:w="2"/><text x="49.9394%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (2 samples, 0.21%)</title><rect x="49.6894%" y="181" width="0.2070%" height="15" fill="rgb(220,193,23)" fg:x="480" fg:w="2"/><text x="49.9394%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.10%)</title><rect x="49.8965%" y="197" width="0.1035%" height="15" fill="rgb(230,90,52)" fg:x="482" fg:w="1"/><text x="50.1465%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="51.5528%" y="165" width="0.2070%" height="15" fill="rgb(252,106,19)" fg:x="498" fg:w="2"/><text x="51.8028%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::net::addr::&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for (&amp;str,u16)&gt;::to_socket_addrs::{{closure}}&gt;,tokio::runtime::blocking::schedule::BlockingSchedule&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="52.2774%" y="149" width="0.1035%" height="15" fill="rgb(206,74,20)" fg:x="505" fg:w="1"/><text x="52.5274%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.31%)</title><rect x="52.3810%" y="149" width="0.3106%" height="15" fill="rgb(230,138,44)" fg:x="506" fg:w="3"/><text x="52.6310%" y="159.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.31%)</title><rect x="52.3810%" y="133" width="0.3106%" height="15" fill="rgb(235,182,43)" fg:x="506" fg:w="3"/><text x="52.6310%" y="143.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="52.5880%" y="117" width="0.1035%" height="15" fill="rgb(242,16,51)" fg:x="508" fg:w="1"/><text x="52.8380%" y="127.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (13 samples, 1.35%)</title><rect x="51.7598%" y="165" width="1.3458%" height="15" fill="rgb(248,9,4)" fg:x="500" fg:w="13"/><text x="52.0098%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (4 samples, 0.41%)</title><rect x="52.6915%" y="149" width="0.4141%" height="15" fill="rgb(210,31,22)" fg:x="509" fg:w="4"/><text x="52.9415%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (2 samples, 0.21%)</title><rect x="52.8986%" y="133" width="0.2070%" height="15" fill="rgb(239,54,39)" fg:x="511" fg:w="2"/><text x="53.1486%" y="143.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.10%)</title><rect x="53.0021%" y="117" width="0.1035%" height="15" fill="rgb(230,99,41)" fg:x="512" fg:w="1"/><text x="53.2521%" y="127.50"></text></g><g><title>__connect (1 samples, 0.10%)</title><rect x="53.1056%" y="165" width="0.1035%" height="15" fill="rgb(253,106,12)" fg:x="513" fg:w="1"/><text x="53.3556%" y="175.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (6 samples, 0.62%)</title><rect x="53.2091%" y="165" width="0.6211%" height="15" fill="rgb(213,46,41)" fg:x="514" fg:w="6"/><text x="53.4591%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 0.31%)</title><rect x="53.5197%" y="149" width="0.3106%" height="15" fill="rgb(215,133,35)" fg:x="517" fg:w="3"/><text x="53.7697%" y="159.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (2 samples, 0.21%)</title><rect x="53.6232%" y="133" width="0.2070%" height="15" fill="rgb(213,28,5)" fg:x="518" fg:w="2"/><text x="53.8732%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (2 samples, 0.21%)</title><rect x="53.6232%" y="117" width="0.2070%" height="15" fill="rgb(215,77,49)" fg:x="518" fg:w="2"/><text x="53.8732%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.21%)</title><rect x="53.6232%" y="101" width="0.2070%" height="15" fill="rgb(248,100,22)" fg:x="518" fg:w="2"/><text x="53.8732%" y="111.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="53.7267%" y="85" width="0.1035%" height="15" fill="rgb(208,67,9)" fg:x="519" fg:w="1"/><text x="53.9767%" y="95.50"></text></g><g><title>redis::connection::connection_setup_pipeline (3 samples, 0.31%)</title><rect x="53.8302%" y="165" width="0.3106%" height="15" fill="rgb(219,133,21)" fg:x="520" fg:w="3"/><text x="54.0802%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="54.0373%" y="149" width="0.1035%" height="15" fill="rgb(246,46,29)" fg:x="522" fg:w="1"/><text x="54.2873%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.10%)</title><rect x="54.0373%" y="133" width="0.1035%" height="15" fill="rgb(246,185,52)" fg:x="522" fg:w="1"/><text x="54.2873%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="54.0373%" y="117" width="0.1035%" height="15" fill="rgb(252,136,11)" fg:x="522" fg:w="1"/><text x="54.2873%" y="127.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (2 samples, 0.21%)</title><rect x="54.1408%" y="165" width="0.2070%" height="15" fill="rgb(219,138,53)" fg:x="523" fg:w="2"/><text x="54.3908%" y="175.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (2 samples, 0.21%)</title><rect x="54.1408%" y="149" width="0.2070%" height="15" fill="rgb(211,51,23)" fg:x="523" fg:w="2"/><text x="54.3908%" y="159.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1 samples, 0.10%)</title><rect x="54.3478%" y="165" width="0.1035%" height="15" fill="rgb(247,221,28)" fg:x="525" fg:w="1"/><text x="54.5978%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.10%)</title><rect x="54.4513%" y="165" width="0.1035%" height="15" fill="rgb(251,222,45)" fg:x="526" fg:w="1"/><text x="54.7013%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="54.5549%" y="165" width="0.1035%" height="15" fill="rgb(217,162,53)" fg:x="527" fg:w="1"/><text x="54.8049%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="54.5549%" y="149" width="0.1035%" height="15" fill="rgb(229,93,14)" fg:x="527" fg:w="1"/><text x="54.8049%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (46 samples, 4.76%)</title><rect x="50.0000%" y="197" width="4.7619%" height="15" fill="rgb(209,67,49)" fg:x="483" fg:w="46"/><text x="50.2500%" y="207.50">redis:..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (41 samples, 4.24%)</title><rect x="50.5176%" y="181" width="4.2443%" height="15" fill="rgb(213,87,29)" fg:x="488" fg:w="41"/><text x="50.7676%" y="191.50">redis..</text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.10%)</title><rect x="54.6584%" y="165" width="0.1035%" height="15" fill="rgb(205,151,52)" fg:x="528" fg:w="1"/><text x="54.9084%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.21%)</title><rect x="54.8654%" y="181" width="0.2070%" height="15" fill="rgb(253,215,39)" fg:x="530" fg:w="2"/><text x="55.1154%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.21%)</title><rect x="54.8654%" y="165" width="0.2070%" height="15" fill="rgb(221,220,41)" fg:x="530" fg:w="2"/><text x="55.1154%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (69 samples, 7.14%)</title><rect x="48.7578%" y="213" width="7.1429%" height="15" fill="rgb(218,133,21)" fg:x="471" fg:w="69"/><text x="49.0078%" y="223.50">&lt;rinha_de_..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (11 samples, 1.14%)</title><rect x="54.7619%" y="197" width="1.1387%" height="15" fill="rgb(221,193,43)" fg:x="529" fg:w="11"/><text x="55.0119%" y="207.50"></text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (8 samples, 0.83%)</title><rect x="55.0725%" y="181" width="0.8282%" height="15" fill="rgb(240,128,52)" fg:x="532" fg:w="8"/><text x="55.3225%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (6 samples, 0.62%)</title><rect x="55.2795%" y="165" width="0.6211%" height="15" fill="rgb(253,114,12)" fg:x="534" fg:w="6"/><text x="55.5295%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (6 samples, 0.62%)</title><rect x="55.2795%" y="149" width="0.6211%" height="15" fill="rgb(215,223,47)" fg:x="534" fg:w="6"/><text x="55.5295%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (3 samples, 0.31%)</title><rect x="55.5901%" y="133" width="0.3106%" height="15" fill="rgb(248,225,23)" fg:x="537" fg:w="3"/><text x="55.8401%" y="143.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="55.7971%" y="117" width="0.1035%" height="15" fill="rgb(250,108,0)" fg:x="539" fg:w="1"/><text x="56.0471%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}}&gt; (2 samples, 0.21%)</title><rect x="55.9006%" y="213" width="0.2070%" height="15" fill="rgb(228,208,7)" fg:x="540" fg:w="2"/><text x="56.1506%" y="223.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::mpsc_to_redis_worker::mpsc_to_redis_worker::{{closure}} (76 samples, 7.87%)</title><rect x="48.5507%" y="229" width="7.8675%" height="15" fill="rgb(244,45,10)" fg:x="469" fg:w="76"/><text x="48.8007%" y="239.50">rinha_de_ba..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.31%)</title><rect x="56.1077%" y="213" width="0.3106%" height="15" fill="rgb(207,125,25)" fg:x="542" fg:w="3"/><text x="56.3577%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="58.7992%" y="213" width="0.1035%" height="15" fill="rgb(210,195,18)" fg:x="568" fg:w="1"/><text x="59.0492%" y="223.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (3 samples, 0.31%)</title><rect x="59.5238%" y="149" width="0.3106%" height="15" fill="rgb(249,80,12)" fg:x="575" fg:w="3"/><text x="59.7738%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.5918 (2 samples, 0.21%)</title><rect x="59.6273%" y="133" width="0.2070%" height="15" fill="rgb(221,65,9)" fg:x="576" fg:w="2"/><text x="59.8773%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.21%)</title><rect x="59.6273%" y="117" width="0.2070%" height="15" fill="rgb(235,49,36)" fg:x="576" fg:w="2"/><text x="59.8773%" y="127.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (3 samples, 0.31%)</title><rect x="59.8344%" y="149" width="0.3106%" height="15" fill="rgb(225,32,20)" fg:x="578" fg:w="3"/><text x="60.0844%" y="159.50"></text></g><g><title>url::host::Host::parse (8 samples, 0.83%)</title><rect x="59.4203%" y="165" width="0.8282%" height="15" fill="rgb(215,141,46)" fg:x="574" fg:w="8"/><text x="59.6703%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.10%)</title><rect x="60.1449%" y="149" width="0.1035%" height="15" fill="rgb(250,160,47)" fg:x="581" fg:w="1"/><text x="60.3949%" y="159.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (17 samples, 1.76%)</title><rect x="58.9027%" y="213" width="1.7598%" height="15" fill="rgb(216,222,40)" fg:x="569" fg:w="17"/><text x="59.1527%" y="223.50"></text></g><g><title>url::ParseOptions::parse (17 samples, 1.76%)</title><rect x="58.9027%" y="197" width="1.7598%" height="15" fill="rgb(234,217,39)" fg:x="569" fg:w="17"/><text x="59.1527%" y="207.50"></text></g><g><title>url::parser::Parser::after_double_slash (16 samples, 1.66%)</title><rect x="59.0062%" y="181" width="1.6563%" height="15" fill="rgb(207,178,40)" fg:x="570" fg:w="16"/><text x="59.2562%" y="191.50"></text></g><g><title>url::parser::Parser::parse_path (4 samples, 0.41%)</title><rect x="60.2484%" y="165" width="0.4141%" height="15" fill="rgb(221,136,13)" fg:x="582" fg:w="4"/><text x="60.4984%" y="175.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="60.9731%" y="197" width="0.1035%" height="15" fill="rgb(249,199,10)" fg:x="589" fg:w="1"/><text x="61.2231%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="60.9731%" y="181" width="0.1035%" height="15" fill="rgb(249,222,13)" fg:x="589" fg:w="1"/><text x="61.2231%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.41%)</title><rect x="63.1470%" y="149" width="0.4141%" height="15" fill="rgb(244,185,38)" fg:x="610" fg:w="4"/><text x="63.3970%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.21%)</title><rect x="63.3540%" y="133" width="0.2070%" height="15" fill="rgb(236,202,9)" fg:x="612" fg:w="2"/><text x="63.6040%" y="143.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (9 samples, 0.93%)</title><rect x="62.7329%" y="165" width="0.9317%" height="15" fill="rgb(250,229,37)" fg:x="606" fg:w="9"/><text x="62.9829%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="63.5611%" y="149" width="0.1035%" height="15" fill="rgb(206,174,23)" fg:x="614" fg:w="1"/><text x="63.8111%" y="159.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (1 samples, 0.10%)</title><rect x="63.6646%" y="165" width="0.1035%" height="15" fill="rgb(211,33,43)" fg:x="615" fg:w="1"/><text x="63.9146%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.10%)</title><rect x="63.7681%" y="165" width="0.1035%" height="15" fill="rgb(245,58,50)" fg:x="616" fg:w="1"/><text x="64.0181%" y="175.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="63.7681%" y="149" width="0.1035%" height="15" fill="rgb(244,68,36)" fg:x="616" fg:w="1"/><text x="64.0181%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.1958 (1 samples, 0.10%)</title><rect x="63.7681%" y="133" width="0.1035%" height="15" fill="rgb(232,229,15)" fg:x="616" fg:w="1"/><text x="64.0181%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="63.7681%" y="117" width="0.1035%" height="15" fill="rgb(254,30,23)" fg:x="616" fg:w="1"/><text x="64.0181%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="63.7681%" y="101" width="0.1035%" height="15" fill="rgb(235,160,14)" fg:x="616" fg:w="1"/><text x="64.0181%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="63.8716%" y="165" width="0.1035%" height="15" fill="rgb(212,155,44)" fg:x="617" fg:w="1"/><text x="64.1216%" y="175.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.10%)</title><rect x="63.9752%" y="165" width="0.1035%" height="15" fill="rgb(226,2,50)" fg:x="618" fg:w="1"/><text x="64.2252%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::http1::SendRequest&lt;reqwest::async_impl::body::Body&gt;::try_send_request::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="64.0787%" y="165" width="0.1035%" height="15" fill="rgb(234,177,6)" fg:x="619" fg:w="1"/><text x="64.3287%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="64.1822%" y="165" width="0.1035%" height="15" fill="rgb(217,24,9)" fg:x="620" fg:w="1"/><text x="64.4322%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.10%)</title><rect x="64.2857%" y="165" width="0.1035%" height="15" fill="rgb(220,13,46)" fg:x="621" fg:w="1"/><text x="64.5357%" y="175.50"></text></g><g><title>http::uri::authority::Authority::port (1 samples, 0.10%)</title><rect x="64.3892%" y="165" width="0.1035%" height="15" fill="rgb(239,221,27)" fg:x="622" fg:w="1"/><text x="64.6392%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (1 samples, 0.10%)</title><rect x="64.3892%" y="149" width="0.1035%" height="15" fill="rgb(222,198,25)" fg:x="622" fg:w="1"/><text x="64.6392%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.1977 (1 samples, 0.10%)</title><rect x="64.4928%" y="149" width="0.1035%" height="15" fill="rgb(211,99,13)" fg:x="623" fg:w="1"/><text x="64.7428%" y="159.50"></text></g><g><title>http::uri::authority::host (3 samples, 0.31%)</title><rect x="64.4928%" y="165" width="0.3106%" height="15" fill="rgb(232,111,31)" fg:x="623" fg:w="3"/><text x="64.7428%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (2 samples, 0.21%)</title><rect x="64.5963%" y="149" width="0.2070%" height="15" fill="rgb(245,82,37)" fg:x="624" fg:w="2"/><text x="64.8463%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (2 samples, 0.21%)</title><rect x="64.5963%" y="133" width="0.2070%" height="15" fill="rgb(227,149,46)" fg:x="624" fg:w="2"/><text x="64.8463%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.21%)</title><rect x="64.5963%" y="117" width="0.2070%" height="15" fill="rgb(218,36,50)" fg:x="624" fg:w="2"/><text x="64.8463%" y="127.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (1 samples, 0.10%)</title><rect x="64.8033%" y="165" width="0.1035%" height="15" fill="rgb(226,80,48)" fg:x="626" fg:w="1"/><text x="65.0533%" y="175.50"></text></g><g><title>http::uri::builder::Builder::map (1 samples, 0.10%)</title><rect x="64.8033%" y="149" width="0.1035%" height="15" fill="rgb(238,224,15)" fg:x="626" fg:w="1"/><text x="65.0533%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.10%)</title><rect x="65.0104%" y="149" width="0.1035%" height="15" fill="rgb(241,136,10)" fg:x="628" fg:w="1"/><text x="65.2604%" y="159.50"></text></g><g><title>hyper_util::client::legacy::client::origin_form (3 samples, 0.31%)</title><rect x="64.9068%" y="165" width="0.3106%" height="15" fill="rgb(208,32,45)" fg:x="627" fg:w="3"/><text x="65.1568%" y="175.50"></text></g><g><title>http::uri::Uri::from_parts (1 samples, 0.10%)</title><rect x="65.1139%" y="149" width="0.1035%" height="15" fill="rgb(207,135,9)" fg:x="629" fg:w="1"/><text x="65.3639%" y="159.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (41 samples, 4.24%)</title><rect x="61.0766%" y="197" width="4.2443%" height="15" fill="rgb(206,86,44)" fg:x="590" fg:w="41"/><text x="61.3266%" y="207.50">&lt;reqw..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (36 samples, 3.73%)</title><rect x="61.5942%" y="181" width="3.7267%" height="15" fill="rgb(245,177,15)" fg:x="595" fg:w="36"/><text x="61.8442%" y="191.50">hype..</text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (1 samples, 0.10%)</title><rect x="65.2174%" y="165" width="0.1035%" height="15" fill="rgb(206,64,50)" fg:x="630" fg:w="1"/><text x="65.4674%" y="175.50"></text></g><g><title>url::host::Host::parse (2 samples, 0.21%)</title><rect x="65.7350%" y="165" width="0.2070%" height="15" fill="rgb(234,36,40)" fg:x="635" fg:w="2"/><text x="65.9850%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (2 samples, 0.21%)</title><rect x="65.7350%" y="149" width="0.2070%" height="15" fill="rgb(213,64,8)" fg:x="635" fg:w="2"/><text x="65.9850%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.5918 (2 samples, 0.21%)</title><rect x="65.7350%" y="133" width="0.2070%" height="15" fill="rgb(210,75,36)" fg:x="635" fg:w="2"/><text x="65.9850%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.10%)</title><rect x="65.8385%" y="117" width="0.1035%" height="15" fill="rgb(229,88,21)" fg:x="636" fg:w="1"/><text x="66.0885%" y="127.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.10%)</title><rect x="65.9420%" y="165" width="0.1035%" height="15" fill="rgb(252,204,47)" fg:x="637" fg:w="1"/><text x="66.1920%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (53 samples, 5.49%)</title><rect x="60.6625%" y="213" width="5.4865%" height="15" fill="rgb(208,77,27)" fg:x="586" fg:w="53"/><text x="60.9125%" y="223.50">&lt;reqwes..</text></g><g><title>url::ParseOptions::parse (8 samples, 0.83%)</title><rect x="65.3209%" y="197" width="0.8282%" height="15" fill="rgb(221,76,26)" fg:x="631" fg:w="8"/><text x="65.5709%" y="207.50"></text></g><g><title>url::parser::Parser::after_double_slash (7 samples, 0.72%)</title><rect x="65.4244%" y="181" width="0.7246%" height="15" fill="rgb(225,139,18)" fg:x="632" fg:w="7"/><text x="65.6744%" y="191.50"></text></g><g><title>url::parser::Parser::with_query_and_fragment (1 samples, 0.10%)</title><rect x="66.0455%" y="165" width="0.1035%" height="15" fill="rgb(230,137,11)" fg:x="638" fg:w="1"/><text x="66.2955%" y="175.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (1 samples, 0.10%)</title><rect x="66.0455%" y="149" width="0.1035%" height="15" fill="rgb(212,28,1)" fg:x="638" fg:w="1"/><text x="66.2955%" y="159.50"></text></g><g><title>&lt;redis::client::Client as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="66.2526%" y="197" width="0.1035%" height="15" fill="rgb(248,164,17)" fg:x="640" fg:w="1"/><text x="66.5026%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="66.3561%" y="197" width="0.1035%" height="15" fill="rgb(222,171,42)" fg:x="641" fg:w="1"/><text x="66.6061%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="67.2878%" y="165" width="0.1035%" height="15" fill="rgb(243,84,45)" fg:x="650" fg:w="1"/><text x="67.5378%" y="175.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.41%)</title><rect x="67.3913%" y="165" width="0.4141%" height="15" fill="rgb(252,49,23)" fg:x="651" fg:w="4"/><text x="67.6413%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.10%)</title><rect x="67.7019%" y="149" width="0.1035%" height="15" fill="rgb(215,19,7)" fg:x="654" fg:w="1"/><text x="67.9519%" y="159.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.10%)</title><rect x="67.7019%" y="133" width="0.1035%" height="15" fill="rgb(238,81,41)" fg:x="654" fg:w="1"/><text x="67.9519%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.10%)</title><rect x="68.0124%" y="133" width="0.1035%" height="15" fill="rgb(210,199,37)" fg:x="657" fg:w="1"/><text x="68.2624%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="68.0124%" y="117" width="0.1035%" height="15" fill="rgb(244,192,49)" fg:x="657" fg:w="1"/><text x="68.2624%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.10%)</title><rect x="68.1159%" y="101" width="0.1035%" height="15" fill="rgb(226,211,11)" fg:x="658" fg:w="1"/><text x="68.3659%" y="111.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="68.1159%" y="85" width="0.1035%" height="15" fill="rgb(236,162,54)" fg:x="658" fg:w="1"/><text x="68.3659%" y="95.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 0.31%)</title><rect x="68.0124%" y="149" width="0.3106%" height="15" fill="rgb(220,229,9)" fg:x="657" fg:w="3"/><text x="68.2624%" y="159.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (2 samples, 0.21%)</title><rect x="68.1159%" y="133" width="0.2070%" height="15" fill="rgb(250,87,22)" fg:x="658" fg:w="2"/><text x="68.3659%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (2 samples, 0.21%)</title><rect x="68.1159%" y="117" width="0.2070%" height="15" fill="rgb(239,43,17)" fg:x="658" fg:w="2"/><text x="68.3659%" y="127.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="68.2195%" y="101" width="0.1035%" height="15" fill="rgb(231,177,25)" fg:x="659" fg:w="1"/><text x="68.4695%" y="111.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (7 samples, 0.72%)</title><rect x="67.8054%" y="165" width="0.7246%" height="15" fill="rgb(219,179,1)" fg:x="655" fg:w="7"/><text x="68.0554%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.21%)</title><rect x="68.3230%" y="149" width="0.2070%" height="15" fill="rgb(238,219,53)" fg:x="660" fg:w="2"/><text x="68.5730%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="68.4265%" y="133" width="0.1035%" height="15" fill="rgb(232,167,36)" fg:x="661" fg:w="1"/><text x="68.6765%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="68.4265%" y="117" width="0.1035%" height="15" fill="rgb(244,19,51)" fg:x="661" fg:w="1"/><text x="68.6765%" y="127.50"></text></g><g><title>redis::connection::connection_setup_pipeline (6 samples, 0.62%)</title><rect x="68.5300%" y="165" width="0.6211%" height="15" fill="rgb(224,6,22)" fg:x="662" fg:w="6"/><text x="68.7800%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.41%)</title><rect x="68.7371%" y="149" width="0.4141%" height="15" fill="rgb(224,145,5)" fg:x="664" fg:w="4"/><text x="68.9871%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.31%)</title><rect x="68.8406%" y="133" width="0.3106%" height="15" fill="rgb(234,130,49)" fg:x="665" fg:w="3"/><text x="69.0906%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="69.0476%" y="117" width="0.1035%" height="15" fill="rgb(254,6,2)" fg:x="667" fg:w="1"/><text x="69.2976%" y="127.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.10%)</title><rect x="69.1511%" y="165" width="0.1035%" height="15" fill="rgb(208,96,46)" fg:x="668" fg:w="1"/><text x="69.4011%" y="175.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (2 samples, 0.21%)</title><rect x="69.2547%" y="165" width="0.2070%" height="15" fill="rgb(239,3,39)" fg:x="669" fg:w="2"/><text x="69.5047%" y="175.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="69.3582%" y="149" width="0.1035%" height="15" fill="rgb(233,210,1)" fg:x="670" fg:w="1"/><text x="69.6082%" y="159.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.10%)</title><rect x="69.3582%" y="133" width="0.1035%" height="15" fill="rgb(244,137,37)" fg:x="670" fg:w="1"/><text x="69.6082%" y="143.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (30 samples, 3.11%)</title><rect x="66.4596%" y="197" width="3.1056%" height="15" fill="rgb(240,136,2)" fg:x="642" fg:w="30"/><text x="66.7096%" y="207.50">red..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (28 samples, 2.90%)</title><rect x="66.6667%" y="181" width="2.8986%" height="15" fill="rgb(239,18,37)" fg:x="644" fg:w="28"/><text x="66.9167%" y="191.50">re..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="69.4617%" y="165" width="0.1035%" height="15" fill="rgb(218,185,22)" fg:x="671" fg:w="1"/><text x="69.7117%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="69.4617%" y="149" width="0.1035%" height="15" fill="rgb(225,218,4)" fg:x="671" fg:w="1"/><text x="69.7117%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="69.8758%" y="165" width="0.1035%" height="15" fill="rgb(230,182,32)" fg:x="675" fg:w="1"/><text x="70.1258%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="70.0828%" y="133" width="0.1035%" height="15" fill="rgb(242,56,43)" fg:x="677" fg:w="1"/><text x="70.3328%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.10%)</title><rect x="70.0828%" y="117" width="0.1035%" height="15" fill="rgb(233,99,24)" fg:x="677" fg:w="1"/><text x="70.3328%" y="127.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.10%)</title><rect x="70.1863%" y="133" width="0.1035%" height="15" fill="rgb(234,209,42)" fg:x="678" fg:w="1"/><text x="70.4363%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (4 samples, 0.41%)</title><rect x="69.9793%" y="165" width="0.4141%" height="15" fill="rgb(227,7,12)" fg:x="676" fg:w="4"/><text x="70.2293%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (4 samples, 0.41%)</title><rect x="69.9793%" y="149" width="0.4141%" height="15" fill="rgb(245,203,43)" fg:x="676" fg:w="4"/><text x="70.2293%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="70.2899%" y="133" width="0.1035%" height="15" fill="rgb(238,205,33)" fg:x="679" fg:w="1"/><text x="70.5399%" y="143.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (7 samples, 0.72%)</title><rect x="69.7723%" y="181" width="0.7246%" height="15" fill="rgb(231,56,7)" fg:x="674" fg:w="7"/><text x="70.0223%" y="191.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.10%)</title><rect x="70.3934%" y="165" width="0.1035%" height="15" fill="rgb(244,186,29)" fg:x="680" fg:w="1"/><text x="70.6434%" y="175.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.10%)</title><rect x="70.4969%" y="165" width="0.1035%" height="15" fill="rgb(234,111,31)" fg:x="681" fg:w="1"/><text x="70.7469%" y="175.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.21%)</title><rect x="70.7039%" y="149" width="0.2070%" height="15" fill="rgb(241,149,10)" fg:x="683" fg:w="2"/><text x="70.9539%" y="159.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (49 samples, 5.07%)</title><rect x="66.1491%" y="213" width="5.0725%" height="15" fill="rgb(249,206,44)" fg:x="639" fg:w="49"/><text x="66.3991%" y="223.50">&lt;rinha..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (16 samples, 1.66%)</title><rect x="69.5652%" y="197" width="1.6563%" height="15" fill="rgb(251,153,30)" fg:x="672" fg:w="16"/><text x="69.8152%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (7 samples, 0.72%)</title><rect x="70.4969%" y="181" width="0.7246%" height="15" fill="rgb(239,152,38)" fg:x="681" fg:w="7"/><text x="70.7469%" y="191.50"></text></g><g><title>core::fmt::write (6 samples, 0.62%)</title><rect x="70.6004%" y="165" width="0.6211%" height="15" fill="rgb(249,139,47)" fg:x="682" fg:w="6"/><text x="70.8504%" y="175.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (3 samples, 0.31%)</title><rect x="70.9110%" y="149" width="0.3106%" height="15" fill="rgb(244,64,35)" fg:x="685" fg:w="3"/><text x="71.1610%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.1959 (2 samples, 0.21%)</title><rect x="71.0145%" y="133" width="0.2070%" height="15" fill="rgb(216,46,15)" fg:x="686" fg:w="2"/><text x="71.2645%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="72.1532%" y="165" width="0.1035%" height="15" fill="rgb(250,74,19)" fg:x="697" fg:w="1"/><text x="72.4032%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (5 samples, 0.52%)</title><rect x="71.9462%" y="181" width="0.5176%" height="15" fill="rgb(249,42,33)" fg:x="695" fg:w="5"/><text x="72.1962%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (2 samples, 0.21%)</title><rect x="72.2567%" y="165" width="0.2070%" height="15" fill="rgb(242,149,17)" fg:x="698" fg:w="2"/><text x="72.5067%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (11 samples, 1.14%)</title><rect x="71.7391%" y="197" width="1.1387%" height="15" fill="rgb(244,29,21)" fg:x="693" fg:w="11"/><text x="71.9891%" y="207.50"></text></g><g><title>redis::pipeline::encode_pipeline (4 samples, 0.41%)</title><rect x="72.4638%" y="181" width="0.4141%" height="15" fill="rgb(220,130,37)" fg:x="700" fg:w="4"/><text x="72.7138%" y="191.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.21%)</title><rect x="72.6708%" y="165" width="0.2070%" height="15" fill="rgb(211,67,2)" fg:x="702" fg:w="2"/><text x="72.9208%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.10%)</title><rect x="72.8778%" y="165" width="0.1035%" height="15" fill="rgb(235,68,52)" fg:x="704" fg:w="1"/><text x="73.1278%" y="175.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (2 samples, 0.21%)</title><rect x="72.9814%" y="165" width="0.2070%" height="15" fill="rgb(246,142,3)" fg:x="705" fg:w="2"/><text x="73.2314%" y="175.50"></text></g><g><title>core::fmt::write (2 samples, 0.21%)</title><rect x="72.9814%" y="149" width="0.2070%" height="15" fill="rgb(241,25,7)" fg:x="705" fg:w="2"/><text x="73.2314%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.10%)</title><rect x="73.0849%" y="133" width="0.1035%" height="15" fill="rgb(242,119,39)" fg:x="706" fg:w="1"/><text x="73.3349%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.10%)</title><rect x="73.0849%" y="117" width="0.1035%" height="15" fill="rgb(241,98,45)" fg:x="706" fg:w="1"/><text x="73.3349%" y="127.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (4 samples, 0.41%)</title><rect x="72.8778%" y="197" width="0.4141%" height="15" fill="rgb(254,28,30)" fg:x="704" fg:w="4"/><text x="73.1278%" y="207.50"></text></g><g><title>core::fmt::write (4 samples, 0.41%)</title><rect x="72.8778%" y="181" width="0.4141%" height="15" fill="rgb(241,142,54)" fg:x="704" fg:w="4"/><text x="73.1278%" y="191.50"></text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="73.1884%" y="165" width="0.1035%" height="15" fill="rgb(222,85,15)" fg:x="707" fg:w="1"/><text x="73.4384%" y="175.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="73.1884%" y="149" width="0.1035%" height="15" fill="rgb(210,85,47)" fg:x="707" fg:w="1"/><text x="73.4384%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (2 samples, 0.21%)</title><rect x="73.3954%" y="165" width="0.2070%" height="15" fill="rgb(224,206,25)" fg:x="709" fg:w="2"/><text x="73.6454%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.52%)</title><rect x="73.2919%" y="197" width="0.5176%" height="15" fill="rgb(243,201,19)" fg:x="708" fg:w="5"/><text x="73.5419%" y="207.50"></text></g><g><title>core::fmt::write (4 samples, 0.41%)</title><rect x="73.3954%" y="181" width="0.4141%" height="15" fill="rgb(236,59,4)" fg:x="709" fg:w="4"/><text x="73.6454%" y="191.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (2 samples, 0.21%)</title><rect x="73.6025%" y="165" width="0.2070%" height="15" fill="rgb(254,179,45)" fg:x="711" fg:w="2"/><text x="73.8525%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (2 samples, 0.21%)</title><rect x="73.6025%" y="149" width="0.2070%" height="15" fill="rgb(226,14,10)" fg:x="711" fg:w="2"/><text x="73.8525%" y="159.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (2 samples, 0.21%)</title><rect x="73.6025%" y="133" width="0.2070%" height="15" fill="rgb(244,27,41)" fg:x="711" fg:w="2"/><text x="73.8525%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="73.8095%" y="197" width="0.1035%" height="15" fill="rgb(235,35,32)" fg:x="713" fg:w="1"/><text x="74.0595%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="73.8095%" y="181" width="0.1035%" height="15" fill="rgb(218,68,31)" fg:x="713" fg:w="1"/><text x="74.0595%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="73.9130%" y="197" width="0.1035%" height="15" fill="rgb(207,120,37)" fg:x="714" fg:w="1"/><text x="74.1630%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="74.0166%" y="197" width="0.1035%" height="15" fill="rgb(227,98,0)" fg:x="715" fg:w="1"/><text x="74.2666%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.10%)</title><rect x="74.0166%" y="181" width="0.1035%" height="15" fill="rgb(207,7,3)" fg:x="715" fg:w="1"/><text x="74.2666%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.10%)</title><rect x="74.1201%" y="197" width="0.1035%" height="15" fill="rgb(206,98,19)" fg:x="716" fg:w="1"/><text x="74.3701%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="74.1201%" y="181" width="0.1035%" height="15" fill="rgb(217,5,26)" fg:x="716" fg:w="1"/><text x="74.3701%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (5 samples, 0.52%)</title><rect x="75.4658%" y="149" width="0.5176%" height="15" fill="rgb(235,190,38)" fg:x="729" fg:w="5"/><text x="75.7158%" y="159.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.31%)</title><rect x="75.6729%" y="133" width="0.3106%" height="15" fill="rgb(247,86,24)" fg:x="731" fg:w="3"/><text x="75.9229%" y="143.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="75.8799%" y="117" width="0.1035%" height="15" fill="rgb(205,101,16)" fg:x="733" fg:w="1"/><text x="76.1299%" y="127.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 1.04%)</title><rect x="75.0518%" y="165" width="1.0352%" height="15" fill="rgb(246,168,33)" fg:x="725" fg:w="10"/><text x="75.3018%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.10%)</title><rect x="75.9834%" y="149" width="0.1035%" height="15" fill="rgb(231,114,1)" fg:x="734" fg:w="1"/><text x="76.2334%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.10%)</title><rect x="75.9834%" y="133" width="0.1035%" height="15" fill="rgb(207,184,53)" fg:x="734" fg:w="1"/><text x="76.2334%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.21%)</title><rect x="76.1905%" y="133" width="0.2070%" height="15" fill="rgb(224,95,51)" fg:x="736" fg:w="2"/><text x="76.4405%" y="143.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (7 samples, 0.72%)</title><rect x="76.1905%" y="149" width="0.7246%" height="15" fill="rgb(212,188,45)" fg:x="736" fg:w="7"/><text x="76.4405%" y="159.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (5 samples, 0.52%)</title><rect x="76.3975%" y="133" width="0.5176%" height="15" fill="rgb(223,154,38)" fg:x="738" fg:w="5"/><text x="76.6475%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (4 samples, 0.41%)</title><rect x="76.5010%" y="117" width="0.4141%" height="15" fill="rgb(251,22,52)" fg:x="739" fg:w="4"/><text x="76.7510%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.31%)</title><rect x="76.6046%" y="101" width="0.3106%" height="15" fill="rgb(229,209,22)" fg:x="740" fg:w="3"/><text x="76.8546%" y="111.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="76.8116%" y="85" width="0.1035%" height="15" fill="rgb(234,138,34)" fg:x="742" fg:w="1"/><text x="77.0616%" y="95.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (3 samples, 0.31%)</title><rect x="76.9151%" y="149" width="0.3106%" height="15" fill="rgb(212,95,11)" fg:x="743" fg:w="3"/><text x="77.1651%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="77.1222%" y="133" width="0.1035%" height="15" fill="rgb(240,179,47)" fg:x="745" fg:w="1"/><text x="77.3722%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="77.1222%" y="117" width="0.1035%" height="15" fill="rgb(240,163,11)" fg:x="745" fg:w="1"/><text x="77.3722%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="77.2257%" y="149" width="0.1035%" height="15" fill="rgb(236,37,12)" fg:x="746" fg:w="1"/><text x="77.4757%" y="159.50"></text></g><g><title>redis::cmd::args_len (3 samples, 0.31%)</title><rect x="77.4327%" y="133" width="0.3106%" height="15" fill="rgb(232,164,16)" fg:x="748" fg:w="3"/><text x="77.6827%" y="143.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (17 samples, 1.76%)</title><rect x="76.0870%" y="165" width="1.7598%" height="15" fill="rgb(244,205,15)" fg:x="735" fg:w="17"/><text x="76.3370%" y="175.50"></text></g><g><title>redis::pipeline::encode_pipeline (5 samples, 0.52%)</title><rect x="77.3292%" y="149" width="0.5176%" height="15" fill="rgb(223,117,47)" fg:x="747" fg:w="5"/><text x="77.5792%" y="159.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.10%)</title><rect x="77.7433%" y="133" width="0.1035%" height="15" fill="rgb(244,107,35)" fg:x="751" fg:w="1"/><text x="77.9933%" y="143.50"></text></g><g><title>redis::connection::connection_setup_pipeline (4 samples, 0.41%)</title><rect x="77.8468%" y="165" width="0.4141%" height="15" fill="rgb(205,140,8)" fg:x="752" fg:w="4"/><text x="78.0968%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="78.1573%" y="149" width="0.1035%" height="15" fill="rgb(228,84,46)" fg:x="755" fg:w="1"/><text x="78.4073%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (40 samples, 4.14%)</title><rect x="74.2236%" y="197" width="4.1408%" height="15" fill="rgb(254,188,9)" fg:x="717" fg:w="40"/><text x="74.4736%" y="207.50">redis..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (40 samples, 4.14%)</title><rect x="74.2236%" y="181" width="4.1408%" height="15" fill="rgb(206,112,54)" fg:x="717" fg:w="40"/><text x="74.4736%" y="191.50">redis..</text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.10%)</title><rect x="78.2609%" y="165" width="0.1035%" height="15" fill="rgb(216,84,49)" fg:x="756" fg:w="1"/><text x="78.5109%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.10%)</title><rect x="78.3644%" y="181" width="0.1035%" height="15" fill="rgb(214,194,35)" fg:x="757" fg:w="1"/><text x="78.6144%" y="191.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (2 samples, 0.21%)</title><rect x="78.3644%" y="197" width="0.2070%" height="15" fill="rgb(249,28,3)" fg:x="757" fg:w="2"/><text x="78.6144%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.10%)</title><rect x="78.4679%" y="181" width="0.1035%" height="15" fill="rgb(222,56,52)" fg:x="758" fg:w="1"/><text x="78.7179%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.10%)</title><rect x="78.5714%" y="197" width="0.1035%" height="15" fill="rgb(245,217,50)" fg:x="759" fg:w="1"/><text x="78.8214%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (73 samples, 7.56%)</title><rect x="71.2215%" y="213" width="7.5569%" height="15" fill="rgb(213,201,24)" fg:x="688" fg:w="73"/><text x="71.4715%" y="223.50">&lt;rinha_de_..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (1 samples, 0.10%)</title><rect x="78.6749%" y="197" width="0.1035%" height="15" fill="rgb(248,116,28)" fg:x="760" fg:w="1"/><text x="78.9249%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.10%)</title><rect x="78.6749%" y="181" width="0.1035%" height="15" fill="rgb(219,72,43)" fg:x="760" fg:w="1"/><text x="78.9249%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.10%)</title><rect x="79.3996%" y="165" width="0.1035%" height="15" fill="rgb(209,138,14)" fg:x="767" fg:w="1"/><text x="79.6496%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.21%)</title><rect x="79.3996%" y="181" width="0.2070%" height="15" fill="rgb(222,18,33)" fg:x="767" fg:w="2"/><text x="79.6496%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (1 samples, 0.10%)</title><rect x="79.5031%" y="165" width="0.1035%" height="15" fill="rgb(213,199,7)" fg:x="768" fg:w="1"/><text x="79.7531%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.31%)</title><rect x="79.6066%" y="181" width="0.3106%" height="15" fill="rgb(250,110,10)" fg:x="769" fg:w="3"/><text x="79.8566%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.10%)</title><rect x="79.9172%" y="181" width="0.1035%" height="15" fill="rgb(248,123,6)" fg:x="772" fg:w="1"/><text x="80.1672%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.83%)</title><rect x="79.2961%" y="197" width="0.8282%" height="15" fill="rgb(206,91,31)" fg:x="766" fg:w="8"/><text x="79.5461%" y="207.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (1 samples, 0.10%)</title><rect x="80.0207%" y="181" width="0.1035%" height="15" fill="rgb(211,154,13)" fg:x="773" fg:w="1"/><text x="80.2707%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.21%)</title><rect x="80.1242%" y="197" width="0.2070%" height="15" fill="rgb(225,148,7)" fg:x="774" fg:w="2"/><text x="80.3742%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.10%)</title><rect x="80.2277%" y="181" width="0.1035%" height="15" fill="rgb(220,160,43)" fg:x="775" fg:w="1"/><text x="80.4777%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.10%)</title><rect x="80.3313%" y="197" width="0.1035%" height="15" fill="rgb(213,52,39)" fg:x="776" fg:w="1"/><text x="80.5813%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="80.3313%" y="181" width="0.1035%" height="15" fill="rgb(243,137,7)" fg:x="776" fg:w="1"/><text x="80.5813%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (2 samples, 0.21%)</title><rect x="82.1946%" y="149" width="0.2070%" height="15" fill="rgb(230,79,13)" fg:x="794" fg:w="2"/><text x="82.4446%" y="159.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.10%)</title><rect x="82.2981%" y="133" width="0.1035%" height="15" fill="rgb(247,105,23)" fg:x="795" fg:w="1"/><text x="82.5481%" y="143.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.62%)</title><rect x="81.8841%" y="165" width="0.6211%" height="15" fill="rgb(223,179,41)" fg:x="791" fg:w="6"/><text x="82.1341%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.10%)</title><rect x="82.4017%" y="149" width="0.1035%" height="15" fill="rgb(218,9,34)" fg:x="796" fg:w="1"/><text x="82.6517%" y="159.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.10%)</title><rect x="82.4017%" y="133" width="0.1035%" height="15" fill="rgb(222,106,8)" fg:x="796" fg:w="1"/><text x="82.6517%" y="143.50"></text></g><g><title>&lt;redis::aio::DefaultAsyncDNSResolver as redis::io::dns::AsyncDNSResolver&gt;::resolve (1 samples, 0.10%)</title><rect x="82.5052%" y="165" width="0.1035%" height="15" fill="rgb(211,220,0)" fg:x="797" fg:w="1"/><text x="82.7552%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::Map&lt;redis::aio::get_socket_addrs::{{closure}},&lt;redis::aio::DefaultAsyncDNSResolver as redis::io::dns::AsyncDNSResolver&gt;::resolve::{{closure}}&gt;&gt; (1 samples, 0.10%)</title><rect x="82.6087%" y="165" width="0.1035%" height="15" fill="rgb(229,52,16)" fg:x="798" fg:w="1"/><text x="82.8587%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.31%)</title><rect x="83.0228%" y="133" width="0.3106%" height="15" fill="rgb(212,155,18)" fg:x="802" fg:w="3"/><text x="83.2728%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.21%)</title><rect x="83.1263%" y="117" width="0.2070%" height="15" fill="rgb(242,21,14)" fg:x="803" fg:w="2"/><text x="83.3763%" y="127.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.10%)</title><rect x="83.2298%" y="101" width="0.1035%" height="15" fill="rgb(222,19,48)" fg:x="804" fg:w="1"/><text x="83.4798%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="83.4369%" y="69" width="0.1035%" height="15" fill="rgb(232,45,27)" fg:x="806" fg:w="1"/><text x="83.6869%" y="79.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.62%)</title><rect x="83.0228%" y="149" width="0.6211%" height="15" fill="rgb(249,103,42)" fg:x="802" fg:w="6"/><text x="83.2728%" y="159.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (3 samples, 0.31%)</title><rect x="83.3333%" y="133" width="0.3106%" height="15" fill="rgb(246,81,33)" fg:x="805" fg:w="3"/><text x="83.5833%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (3 samples, 0.31%)</title><rect x="83.3333%" y="117" width="0.3106%" height="15" fill="rgb(252,33,42)" fg:x="805" fg:w="3"/><text x="83.5833%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.21%)</title><rect x="83.4369%" y="101" width="0.2070%" height="15" fill="rgb(209,212,41)" fg:x="806" fg:w="2"/><text x="83.6869%" y="111.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.21%)</title><rect x="83.4369%" y="85" width="0.2070%" height="15" fill="rgb(207,154,6)" fg:x="806" fg:w="2"/><text x="83.6869%" y="95.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.10%)</title><rect x="83.5404%" y="69" width="0.1035%" height="15" fill="rgb(223,64,47)" fg:x="807" fg:w="1"/><text x="83.7904%" y="79.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.10%)</title><rect x="83.5404%" y="53" width="0.1035%" height="15" fill="rgb(211,161,38)" fg:x="807" fg:w="1"/><text x="83.7904%" y="63.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (1 samples, 0.10%)</title><rect x="83.6439%" y="149" width="0.1035%" height="15" fill="rgb(219,138,40)" fg:x="808" fg:w="1"/><text x="83.8939%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="83.6439%" y="133" width="0.1035%" height="15" fill="rgb(241,228,46)" fg:x="808" fg:w="1"/><text x="83.8939%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::pipeline::Pipeline&gt; (1 samples, 0.10%)</title><rect x="83.7474%" y="149" width="0.1035%" height="15" fill="rgb(223,209,38)" fg:x="809" fg:w="1"/><text x="83.9974%" y="159.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (12 samples, 1.24%)</title><rect x="82.7122%" y="165" width="1.2422%" height="15" fill="rgb(236,164,45)" fg:x="799" fg:w="12"/><text x="82.9622%" y="175.50"></text></g><g><title>redis::pipeline::encode_pipeline (1 samples, 0.10%)</title><rect x="83.8509%" y="149" width="0.1035%" height="15" fill="rgb(231,15,5)" fg:x="810" fg:w="1"/><text x="84.1009%" y="159.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.10%)</title><rect x="83.8509%" y="133" width="0.1035%" height="15" fill="rgb(252,35,15)" fg:x="810" fg:w="1"/><text x="84.1009%" y="143.50"></text></g><g><title>redis::connection::connection_setup_pipeline (3 samples, 0.31%)</title><rect x="83.9545%" y="165" width="0.3106%" height="15" fill="rgb(248,181,18)" fg:x="811" fg:w="3"/><text x="84.2045%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.21%)</title><rect x="84.0580%" y="149" width="0.2070%" height="15" fill="rgb(233,39,42)" fg:x="812" fg:w="2"/><text x="84.3080%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.21%)</title><rect x="84.0580%" y="133" width="0.2070%" height="15" fill="rgb(238,110,33)" fg:x="812" fg:w="2"/><text x="84.3080%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="84.1615%" y="117" width="0.1035%" height="15" fill="rgb(233,195,10)" fg:x="813" fg:w="1"/><text x="84.4115%" y="127.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (38 samples, 3.93%)</title><rect x="80.4348%" y="197" width="3.9337%" height="15" fill="rgb(254,105,3)" fg:x="777" fg:w="38"/><text x="80.6848%" y="207.50">redi..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (35 samples, 3.62%)</title><rect x="80.7453%" y="181" width="3.6232%" height="15" fill="rgb(221,225,9)" fg:x="780" fg:w="35"/><text x="80.9953%" y="191.50">redi..</text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.10%)</title><rect x="84.2650%" y="165" width="0.1035%" height="15" fill="rgb(224,227,45)" fg:x="814" fg:w="1"/><text x="84.5150%" y="175.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="84.2650%" y="149" width="0.1035%" height="15" fill="rgb(229,198,43)" fg:x="814" fg:w="1"/><text x="84.5150%" y="159.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.10%)</title><rect x="84.2650%" y="133" width="0.1035%" height="15" fill="rgb(206,209,35)" fg:x="814" fg:w="1"/><text x="84.5150%" y="143.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_owned_redis_value (1 samples, 0.10%)</title><rect x="84.4720%" y="165" width="0.1035%" height="15" fill="rgb(245,195,53)" fg:x="816" fg:w="1"/><text x="84.7220%" y="175.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (2 samples, 0.21%)</title><rect x="84.4720%" y="181" width="0.2070%" height="15" fill="rgb(240,92,26)" fg:x="816" fg:w="2"/><text x="84.7220%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="84.5756%" y="165" width="0.1035%" height="15" fill="rgb(207,40,23)" fg:x="817" fg:w="1"/><text x="84.8256%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (3 samples, 0.31%)</title><rect x="84.6791%" y="181" width="0.3106%" height="15" fill="rgb(223,111,35)" fg:x="818" fg:w="3"/><text x="84.9291%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (2 samples, 0.21%)</title><rect x="84.7826%" y="165" width="0.2070%" height="15" fill="rgb(229,147,28)" fg:x="819" fg:w="2"/><text x="85.0326%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="84.8861%" y="149" width="0.1035%" height="15" fill="rgb(211,29,28)" fg:x="820" fg:w="1"/><text x="85.1361%" y="159.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.10%)</title><rect x="84.9896%" y="181" width="0.1035%" height="15" fill="rgb(228,72,33)" fg:x="821" fg:w="1"/><text x="85.2396%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.10%)</title><rect x="84.9896%" y="165" width="0.1035%" height="15" fill="rgb(205,214,31)" fg:x="821" fg:w="1"/><text x="85.2396%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (62 samples, 6.42%)</title><rect x="78.7785%" y="213" width="6.4182%" height="15" fill="rgb(224,111,15)" fg:x="761" fg:w="62"/><text x="79.0285%" y="223.50">&lt;rinha_d..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (8 samples, 0.83%)</title><rect x="84.3685%" y="197" width="0.8282%" height="15" fill="rgb(253,21,26)" fg:x="815" fg:w="8"/><text x="84.6185%" y="207.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.10%)</title><rect x="85.0932%" y="181" width="0.1035%" height="15" fill="rgb(245,139,43)" fg:x="822" fg:w="1"/><text x="85.3432%" y="191.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="85.1967%" y="165" width="0.1035%" height="15" fill="rgb(252,170,7)" fg:x="823" fg:w="1"/><text x="85.4467%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (2 samples, 0.21%)</title><rect x="85.1967%" y="213" width="0.2070%" height="15" fill="rgb(231,118,14)" fg:x="823" fg:w="2"/><text x="85.4467%" y="223.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (2 samples, 0.21%)</title><rect x="85.1967%" y="197" width="0.2070%" height="15" fill="rgb(238,83,0)" fg:x="823" fg:w="2"/><text x="85.4467%" y="207.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (2 samples, 0.21%)</title><rect x="85.1967%" y="181" width="0.2070%" height="15" fill="rgb(221,39,39)" fg:x="823" fg:w="2"/><text x="85.4467%" y="191.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (1 samples, 0.10%)</title><rect x="85.3002%" y="165" width="0.1035%" height="15" fill="rgb(222,119,46)" fg:x="824" fg:w="1"/><text x="85.5502%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (1 samples, 0.10%)</title><rect x="85.3002%" y="149" width="0.1035%" height="15" fill="rgb(222,165,49)" fg:x="824" fg:w="1"/><text x="85.5502%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="85.3002%" y="133" width="0.1035%" height="15" fill="rgb(219,113,52)" fg:x="824" fg:w="1"/><text x="85.5502%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="85.3002%" y="117" width="0.1035%" height="15" fill="rgb(214,7,15)" fg:x="824" fg:w="1"/><text x="85.5502%" y="127.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::routing::in_memory_payment_router::InMemoryPaymentRouter as rinha_de_backend::domain::payment_router::PaymentRouter&gt;::get_processor_for_payment::{{closure}} (3 samples, 0.31%)</title><rect x="85.4037%" y="213" width="0.3106%" height="15" fill="rgb(235,32,4)" fg:x="825" fg:w="3"/><text x="85.6537%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.10%)</title><rect x="85.7143%" y="213" width="0.1035%" height="15" fill="rgb(238,90,54)" fg:x="828" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="85.7143%" y="197" width="0.1035%" height="15" fill="rgb(213,208,19)" fg:x="828" fg:w="1"/><text x="85.9643%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.1958 (1 samples, 0.10%)</title><rect x="85.7143%" y="181" width="0.1035%" height="15" fill="rgb(233,156,4)" fg:x="828" fg:w="1"/><text x="85.9643%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="85.7143%" y="165" width="0.1035%" height="15" fill="rgb(207,194,5)" fg:x="828" fg:w="1"/><text x="85.9643%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (2 samples, 0.21%)</title><rect x="85.8178%" y="213" width="0.2070%" height="15" fill="rgb(206,111,30)" fg:x="829" fg:w="2"/><text x="86.0678%" y="223.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="85.9213%" y="197" width="0.1035%" height="15" fill="rgb(243,70,54)" fg:x="830" fg:w="1"/><text x="86.1713%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="86.0248%" y="197" width="0.1035%" height="15" fill="rgb(242,28,8)" fg:x="831" fg:w="1"/><text x="86.2748%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="86.1284%" y="197" width="0.1035%" height="15" fill="rgb(219,106,18)" fg:x="832" fg:w="1"/><text x="86.3784%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (3 samples, 0.31%)</title><rect x="86.0248%" y="213" width="0.3106%" height="15" fill="rgb(244,222,10)" fg:x="831" fg:w="3"/><text x="86.2748%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.10%)</title><rect x="86.2319%" y="197" width="0.1035%" height="15" fill="rgb(236,179,52)" fg:x="833" fg:w="1"/><text x="86.4819%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (4 samples, 0.41%)</title><rect x="86.3354%" y="213" width="0.4141%" height="15" fill="rgb(213,23,39)" fg:x="834" fg:w="4"/><text x="86.5854%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (3 samples, 0.31%)</title><rect x="86.4389%" y="197" width="0.3106%" height="15" fill="rgb(238,48,10)" fg:x="835" fg:w="3"/><text x="86.6889%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.10%)</title><rect x="86.7495%" y="213" width="0.1035%" height="15" fill="rgb(251,196,23)" fg:x="838" fg:w="1"/><text x="86.9995%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="86.9565%" y="197" width="0.1035%" height="15" fill="rgb(250,152,24)" fg:x="840" fg:w="1"/><text x="87.2065%" y="207.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (3 samples, 0.31%)</title><rect x="86.8530%" y="213" width="0.3106%" height="15" fill="rgb(209,150,17)" fg:x="839" fg:w="3"/><text x="87.1030%" y="223.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="87.0600%" y="197" width="0.1035%" height="15" fill="rgb(234,202,34)" fg:x="841" fg:w="1"/><text x="87.3100%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="87.8882%" y="197" width="0.1035%" height="15" fill="rgb(253,148,53)" fg:x="849" fg:w="1"/><text x="88.1382%" y="207.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="87.9917%" y="181" width="0.1035%" height="15" fill="rgb(218,129,16)" fg:x="850" fg:w="1"/><text x="88.2417%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="87.9917%" y="165" width="0.1035%" height="15" fill="rgb(216,85,19)" fg:x="850" fg:w="1"/><text x="88.2417%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4100 (1 samples, 0.10%)</title><rect x="87.9917%" y="149" width="0.1035%" height="15" fill="rgb(235,228,7)" fg:x="850" fg:w="1"/><text x="88.2417%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="87.9917%" y="133" width="0.1035%" height="15" fill="rgb(245,175,0)" fg:x="850" fg:w="1"/><text x="88.2417%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="87.9917%" y="117" width="0.1035%" height="15" fill="rgb(208,168,36)" fg:x="850" fg:w="1"/><text x="88.2417%" y="127.50"></text></g><g><title>url::host::Host::parse (2 samples, 0.21%)</title><rect x="88.3023%" y="149" width="0.2070%" height="15" fill="rgb(246,171,24)" fg:x="853" fg:w="2"/><text x="88.5523%" y="159.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (1 samples, 0.10%)</title><rect x="88.4058%" y="133" width="0.1035%" height="15" fill="rgb(215,142,24)" fg:x="854" fg:w="1"/><text x="88.6558%" y="143.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (6 samples, 0.62%)</title><rect x="87.9917%" y="197" width="0.6211%" height="15" fill="rgb(250,187,7)" fg:x="850" fg:w="6"/><text x="88.2417%" y="207.50"></text></g><g><title>url::ParseOptions::parse (5 samples, 0.52%)</title><rect x="88.0952%" y="181" width="0.5176%" height="15" fill="rgb(228,66,33)" fg:x="851" fg:w="5"/><text x="88.3452%" y="191.50"></text></g><g><title>url::parser::Parser::after_double_slash (5 samples, 0.52%)</title><rect x="88.0952%" y="165" width="0.5176%" height="15" fill="rgb(234,215,21)" fg:x="851" fg:w="5"/><text x="88.3452%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.10%)</title><rect x="88.5093%" y="149" width="0.1035%" height="15" fill="rgb(222,191,20)" fg:x="855" fg:w="1"/><text x="88.7593%" y="159.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.10%)</title><rect x="88.6128%" y="197" width="0.1035%" height="15" fill="rgb(245,79,54)" fg:x="856" fg:w="1"/><text x="88.8628%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::follow_redirect::FollowRedirect&lt;reqwest::async_impl::client::HyperService,reqwest::redirect::TowerRedirectPolicy&gt;&gt; (1 samples, 0.10%)</title><rect x="88.7164%" y="197" width="0.1035%" height="15" fill="rgb(240,10,37)" fg:x="857" fg:w="1"/><text x="88.9664%" y="207.50"></text></g><g><title>http::header::map::VacantEntry&lt;T&gt;::try_insert (1 samples, 0.10%)</title><rect x="88.8199%" y="197" width="0.1035%" height="15" fill="rgb(214,192,32)" fg:x="858" fg:w="1"/><text x="89.0699%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (2 samples, 0.21%)</title><rect x="88.9234%" y="197" width="0.2070%" height="15" fill="rgb(209,36,54)" fg:x="859" fg:w="2"/><text x="89.1734%" y="207.50"></text></g><g><title>bytes::bytes::Bytes::split_off (1 samples, 0.10%)</title><rect x="89.7516%" y="181" width="0.1035%" height="15" fill="rgb(220,10,11)" fg:x="867" fg:w="1"/><text x="90.0016%" y="191.50"></text></g><g><title>http::uri::Uri::from_shared (8 samples, 0.83%)</title><rect x="89.1304%" y="197" width="0.8282%" height="15" fill="rgb(221,106,17)" fg:x="861" fg:w="8"/><text x="89.3804%" y="207.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.10%)</title><rect x="89.8551%" y="181" width="0.1035%" height="15" fill="rgb(251,142,44)" fg:x="868" fg:w="1"/><text x="90.1051%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.10%)</title><rect x="90.1656%" y="165" width="0.1035%" height="15" fill="rgb(238,13,15)" fg:x="871" fg:w="1"/><text x="90.4156%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.10%)</title><rect x="90.1656%" y="149" width="0.1035%" height="15" fill="rgb(208,107,27)" fg:x="871" fg:w="1"/><text x="90.4156%" y="159.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (1 samples, 0.10%)</title><rect x="90.1656%" y="133" width="0.1035%" height="15" fill="rgb(205,136,37)" fg:x="871" fg:w="1"/><text x="90.4156%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.1977 (2 samples, 0.21%)</title><rect x="90.2692%" y="149" width="0.2070%" height="15" fill="rgb(250,205,27)" fg:x="872" fg:w="2"/><text x="90.5192%" y="159.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (33 samples, 3.42%)</title><rect x="87.1636%" y="213" width="3.4161%" height="15" fill="rgb(210,80,43)" fg:x="842" fg:w="33"/><text x="87.4136%" y="223.50">req..</text></g><g><title>reqwest::proxy::Matcher::intercept (6 samples, 0.62%)</title><rect x="89.9586%" y="197" width="0.6211%" height="15" fill="rgb(247,160,36)" fg:x="869" fg:w="6"/><text x="90.2086%" y="207.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (6 samples, 0.62%)</title><rect x="89.9586%" y="181" width="0.6211%" height="15" fill="rgb(234,13,49)" fg:x="869" fg:w="6"/><text x="90.2086%" y="191.50"></text></g><g><title>http::uri::authority::host (3 samples, 0.31%)</title><rect x="90.2692%" y="165" width="0.3106%" height="15" fill="rgb(234,122,0)" fg:x="872" fg:w="3"/><text x="90.5192%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.10%)</title><rect x="90.4762%" y="149" width="0.1035%" height="15" fill="rgb(207,146,38)" fg:x="874" fg:w="1"/><text x="90.7262%" y="159.50"></text></g><g><title>ryu::pretty::format64 (3 samples, 0.31%)</title><rect x="90.5797%" y="213" width="0.3106%" height="15" fill="rgb(207,177,25)" fg:x="875" fg:w="3"/><text x="90.8297%" y="223.50"></text></g><g><title>time::offset_date_time::OffsetDateTime::now_utc (1 samples, 0.10%)</title><rect x="90.8903%" y="213" width="0.1035%" height="15" fill="rgb(211,178,42)" fg:x="878" fg:w="1"/><text x="91.1403%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="90.9938%" y="197" width="0.1035%" height="15" fill="rgb(230,69,54)" fg:x="879" fg:w="1"/><text x="91.2438%" y="207.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (3 samples, 0.31%)</title><rect x="91.0973%" y="197" width="0.3106%" height="15" fill="rgb(214,135,41)" fg:x="880" fg:w="3"/><text x="91.3473%" y="207.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="91.2008%" y="181" width="0.2070%" height="15" fill="rgb(237,67,25)" fg:x="881" fg:w="2"/><text x="91.4508%" y="191.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (340 samples, 35.20%)</title><rect x="56.4182%" y="229" width="35.1967%" height="15" fill="rgb(222,189,50)" fg:x="545" fg:w="340"/><text x="56.6682%" y="239.50">rinha_de_backend::infrastructure::workers::payment_proces..</text></g><g><title>time::serde::rfc3339::option::serialize (6 samples, 0.62%)</title><rect x="90.9938%" y="213" width="0.6211%" height="15" fill="rgb(245,148,34)" fg:x="879" fg:w="6"/><text x="91.2438%" y="223.50"></text></g><g><title>time::formatting::format_number_pad_zero (2 samples, 0.21%)</title><rect x="91.4079%" y="197" width="0.2070%" height="15" fill="rgb(222,29,6)" fg:x="883" fg:w="2"/><text x="91.6579%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::Map&lt;futures_util::future::try_future::MapErr&lt;hyper_util::common::lazy::Lazy&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}},futures_util::future::either::Either&lt;futures_util::future::try_future::AndThen&lt;futures_util::future::try_future::MapErr&lt;hyper_util::service::oneshot::Oneshot&lt;reqwest::connect::Connector,http::uri::Uri&gt;,hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}::{{closure}}&gt;,futures_util::future::either::Either&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}::{{closure}}::{{closure}}&gt;&gt;,futures_util::future::ready::Ready&lt;core::result::Result&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;,hyper_util::client::legacy::client::Error&gt;&gt;&gt;,hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}::{{closure}}&gt;,futures_util::future::ready::Ready&lt;core::result::Result&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;,hyper_util::client::legacy::client::Error&gt;&gt;&gt;&gt;,hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::one_connection_for::{{closure}}::{{closure}}&gt;,hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::one_connection_for::{{closure}}::{{closure}}&gt;&gt; (1 samples, 0.10%)</title><rect x="91.8219%" y="213" width="0.1035%" height="15" fill="rgb(221,189,43)" fg:x="887" fg:w="1"/><text x="92.0719%" y="223.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}}::Guard&lt;T,S&gt;::drain (2 samples, 0.21%)</title><rect x="92.0290%" y="197" width="0.2070%" height="15" fill="rgb(207,36,27)" fg:x="889" fg:w="2"/><text x="92.2790%" y="207.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.21%)</title><rect x="92.0290%" y="181" width="0.2070%" height="15" fill="rgb(217,90,24)" fg:x="889" fg:w="2"/><text x="92.2790%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="92.2360%" y="197" width="0.1035%" height="15" fill="rgb(224,66,35)" fg:x="891" fg:w="1"/><text x="92.4860%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(((),core::option::Option&lt;(bool,u8)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,u8)&gt;,core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;)&gt; (1 samples, 0.10%)</title><rect x="92.6501%" y="181" width="0.1035%" height="15" fill="rgb(221,13,50)" fg:x="895" fg:w="1"/><text x="92.9001%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (2 samples, 0.21%)</title><rect x="92.7536%" y="181" width="0.2070%" height="15" fill="rgb(236,68,49)" fg:x="896" fg:w="2"/><text x="93.0036%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (16 samples, 1.66%)</title><rect x="92.3395%" y="197" width="1.6563%" height="15" fill="rgb(229,146,28)" fg:x="892" fg:w="16"/><text x="92.5895%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (10 samples, 1.04%)</title><rect x="92.9607%" y="181" width="1.0352%" height="15" fill="rgb(225,31,38)" fg:x="898" fg:w="10"/><text x="93.2107%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (25 samples, 2.59%)</title><rect x="91.6149%" y="229" width="2.5880%" height="15" fill="rgb(250,208,3)" fg:x="885" fg:w="25"/><text x="91.8649%" y="239.50">to..</text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (22 samples, 2.28%)</title><rect x="91.9255%" y="213" width="2.2774%" height="15" fill="rgb(246,54,23)" fg:x="888" fg:w="22"/><text x="92.1755%" y="223.50">c..</text></g><g><title>tokio::sync::notify::Notify::notify_waiters (2 samples, 0.21%)</title><rect x="93.9959%" y="197" width="0.2070%" height="15" fill="rgb(243,76,11)" fg:x="908" fg:w="2"/><text x="94.2459%" y="207.50"></text></g><g><title>rinha-de-backen (677 samples, 70.08%)</title><rect x="24.6377%" y="341" width="70.0828%" height="15" fill="rgb(245,21,50)" fg:x="238" fg:w="677"/><text x="24.8877%" y="351.50">rinha-de-backen</text></g><g><title>_start (677 samples, 70.08%)</title><rect x="24.6377%" y="325" width="70.0828%" height="15" fill="rgb(228,9,43)" fg:x="238" fg:w="677"/><text x="24.8877%" y="335.50">_start</text></g><g><title>__libc_start_main (677 samples, 70.08%)</title><rect x="24.6377%" y="309" width="70.0828%" height="15" fill="rgb(208,100,47)" fg:x="238" fg:w="677"/><text x="24.8877%" y="319.50">__libc_start_main</text></g><g><title>main (677 samples, 70.08%)</title><rect x="24.6377%" y="293" width="70.0828%" height="15" fill="rgb(232,26,8)" fg:x="238" fg:w="677"/><text x="24.8877%" y="303.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (677 samples, 70.08%)</title><rect x="24.6377%" y="277" width="70.0828%" height="15" fill="rgb(216,166,38)" fg:x="238" fg:w="677"/><text x="24.8877%" y="287.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (677 samples, 70.08%)</title><rect x="24.6377%" y="261" width="70.0828%" height="15" fill="rgb(251,202,51)" fg:x="238" fg:w="677"/><text x="24.8877%" y="271.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (603 samples, 62.42%)</title><rect x="32.2981%" y="245" width="62.4224%" height="15" fill="rgb(254,216,34)" fg:x="312" fg:w="603"/><text x="32.5481%" y="255.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (5 samples, 0.52%)</title><rect x="94.2029%" y="229" width="0.5176%" height="15" fill="rgb(251,32,27)" fg:x="910" fg:w="5"/><text x="94.4529%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::release (4 samples, 0.41%)</title><rect x="94.3064%" y="213" width="0.4141%" height="15" fill="rgb(208,127,28)" fg:x="911" fg:w="4"/><text x="94.5564%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (14 samples, 1.45%)</title><rect x="95.6522%" y="261" width="1.4493%" height="15" fill="rgb(224,137,22)" fg:x="924" fg:w="14"/><text x="95.9022%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.10%)</title><rect x="96.9979%" y="245" width="0.1035%" height="15" fill="rgb(254,70,32)" fg:x="937" fg:w="1"/><text x="97.2479%" y="255.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.10%)</title><rect x="97.1014%" y="261" width="0.1035%" height="15" fill="rgb(229,75,37)" fg:x="938" fg:w="1"/><text x="97.3514%" y="271.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (2 samples, 0.21%)</title><rect x="97.4120%" y="245" width="0.2070%" height="15" fill="rgb(252,64,23)" fg:x="941" fg:w="2"/><text x="97.6620%" y="255.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.10%)</title><rect x="97.5155%" y="229" width="0.1035%" height="15" fill="rgb(232,162,48)" fg:x="942" fg:w="1"/><text x="97.7655%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (5 samples, 0.52%)</title><rect x="97.2050%" y="261" width="0.5176%" height="15" fill="rgb(246,160,12)" fg:x="939" fg:w="5"/><text x="97.4550%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.10%)</title><rect x="97.6190%" y="245" width="0.1035%" height="15" fill="rgb(247,166,0)" fg:x="943" fg:w="1"/><text x="97.8690%" y="255.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (3 samples, 0.31%)</title><rect x="98.5507%" y="229" width="0.3106%" height="15" fill="rgb(249,219,21)" fg:x="952" fg:w="3"/><text x="98.8007%" y="239.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.10%)</title><rect x="98.8613%" y="229" width="0.1035%" height="15" fill="rgb(205,209,3)" fg:x="955" fg:w="1"/><text x="99.1113%" y="239.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (12 samples, 1.24%)</title><rect x="98.2402%" y="245" width="1.2422%" height="15" fill="rgb(243,44,1)" fg:x="949" fg:w="12"/><text x="98.4902%" y="255.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (5 samples, 0.52%)</title><rect x="98.9648%" y="229" width="0.5176%" height="15" fill="rgb(206,159,16)" fg:x="956" fg:w="5"/><text x="99.2148%" y="239.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (2 samples, 0.21%)</title><rect x="99.2754%" y="213" width="0.2070%" height="15" fill="rgb(244,77,30)" fg:x="959" fg:w="2"/><text x="99.5254%" y="223.50"></text></g><g><title>all (966 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(218,69,12)" fg:x="0" fg:w="966"/><text x="0.2500%" y="367.50"></text></g><g><title>tokio-runtime-w (51 samples, 5.28%)</title><rect x="94.7205%" y="341" width="5.2795%" height="15" fill="rgb(212,87,7)" fg:x="915" fg:w="51"/><text x="94.9705%" y="351.50">tokio-..</text></g><g><title>__clone (51 samples, 5.28%)</title><rect x="94.7205%" y="325" width="5.2795%" height="15" fill="rgb(245,114,25)" fg:x="915" fg:w="51"/><text x="94.9705%" y="335.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (51 samples, 5.28%)</title><rect x="94.7205%" y="309" width="5.2795%" height="15" fill="rgb(210,61,42)" fg:x="915" fg:w="51"/><text x="94.9705%" y="319.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (51 samples, 5.28%)</title><rect x="94.7205%" y="293" width="5.2795%" height="15" fill="rgb(211,52,33)" fg:x="915" fg:w="51"/><text x="94.9705%" y="303.50">core::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (51 samples, 5.28%)</title><rect x="94.7205%" y="277" width="5.2795%" height="15" fill="rgb(234,58,33)" fg:x="915" fg:w="51"/><text x="94.9705%" y="287.50">std::s..</text></g><g><title>tokio::runtime::task::raw::poll (22 samples, 2.28%)</title><rect x="97.7226%" y="261" width="2.2774%" height="15" fill="rgb(220,115,36)" fg:x="944" fg:w="22"/><text x="97.9726%" y="271.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (5 samples, 0.52%)</title><rect x="99.4824%" y="245" width="0.5176%" height="15" fill="rgb(243,153,54)" fg:x="961" fg:w="5"/><text x="99.7324%" y="255.50"></text></g></svg></svg>