<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="870"><g><title>&lt;tokio::task::local::LocalSet as core::ops::drop::Drop&gt;::drop::{{closure}} (1 samples, 0.11%)</title><rect x="0.4598%" y="309" width="0.1149%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.7098%" y="319.50"></text></g><g><title>tokio::runtime::task::raw::shutdown (1 samples, 0.11%)</title><rect x="0.4598%" y="293" width="0.1149%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.7098%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::cancel_task (1 samples, 0.11%)</title><rect x="0.4598%" y="277" width="0.1149%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.7098%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;actix_server::service::StreamService&lt;actix_service::and_then::AndThenService&lt;actix_service::fn_service::FnService&lt;actix_http::service::HttpService&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_config::MapConfig&lt;actix_service::map_err::MapErrServiceFactory&lt;actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},()&gt;,actix_http::body::boxed::BoxBody&gt;::tcp::{{closure}},actix_http::service::HttpService&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_config::MapConfig&lt;actix_service::map_err::MapErrServiceFactory&lt;actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},()&gt;,actix_http::body::boxed::BoxBody&gt;::tcp::{{closure}}::{{closure}},tokio::net::tcp::stream::TcpStream,(tokio::net::tcp::stream::TcpStream,actix_http::Protocol,core::option::Option&lt;core::net::socket_addr::SocketAddr&gt;),actix_http::error::DispatchError&gt;,actix_http::service::HttpServiceHandler&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler,actix_http::h1::upgrade::UpgradeHandler&gt;,tokio::net::tcp::stream::TcpStream&gt;,tokio::net::tcp::stream::TcpStream&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="0.4598%" y="261" width="0.1149%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.7098%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::service::State&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler,actix_http::h1::upgrade::UpgradeHandler&gt;&gt; (1 samples, 0.11%)</title><rect x="0.4598%" y="245" width="0.1149%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.7098%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (1 samples, 0.11%)</title><rect x="0.4598%" y="229" width="0.1149%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.7098%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.11%)</title><rect x="0.5747%" y="309" width="0.1149%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.8247%" y="319.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (4 samples, 0.46%)</title><rect x="1.2644%" y="293" width="0.4598%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="4"/><text x="1.5144%" y="303.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.11%)</title><rect x="1.6092%" y="277" width="0.1149%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="1"/><text x="1.8592%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.11%)</title><rect x="2.0690%" y="277" width="0.1149%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="1"/><text x="2.3190%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="2.7586%" y="261" width="0.1149%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="1"/><text x="3.0086%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.11%)</title><rect x="3.9080%" y="229" width="0.1149%" height="15" fill="rgb(240,193,28)" fg:x="34" fg:w="1"/><text x="4.1580%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (20 samples, 2.30%)</title><rect x="2.1839%" y="277" width="2.2989%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="20"/><text x="2.4339%" y="287.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (14 samples, 1.61%)</title><rect x="2.8736%" y="261" width="1.6092%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="14"/><text x="3.1236%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.92%)</title><rect x="3.5632%" y="245" width="0.9195%" height="15" fill="rgb(217,207,13)" fg:x="31" fg:w="8"/><text x="3.8132%" y="255.50"></text></g><g><title>tokio::task::local::Shared::schedule (4 samples, 0.46%)</title><rect x="4.0230%" y="229" width="0.4598%" height="15" fill="rgb(231,73,38)" fg:x="35" fg:w="4"/><text x="4.2730%" y="239.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.23%)</title><rect x="4.2529%" y="213" width="0.2299%" height="15" fill="rgb(225,20,46)" fg:x="37" fg:w="2"/><text x="4.5029%" y="223.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (2 samples, 0.23%)</title><rect x="4.2529%" y="197" width="0.2299%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="2"/><text x="4.5029%" y="207.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.11%)</title><rect x="4.4828%" y="277" width="0.1149%" height="15" fill="rgb(221,200,47)" fg:x="39" fg:w="1"/><text x="4.7328%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (35 samples, 4.02%)</title><rect x="0.6897%" y="309" width="4.0230%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="35"/><text x="0.9397%" y="319.50">toki..</text></g><g><title>tokio::runtime::time::Driver::park_internal (26 samples, 2.99%)</title><rect x="1.7241%" y="293" width="2.9885%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="26"/><text x="1.9741%" y="303.50">tok..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.11%)</title><rect x="4.5977%" y="277" width="0.1149%" height="15" fill="rgb(235,183,28)" fg:x="40" fg:w="1"/><text x="4.8477%" y="287.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (7 samples, 0.80%)</title><rect x="5.0575%" y="245" width="0.8046%" height="15" fill="rgb(221,5,38)" fg:x="44" fg:w="7"/><text x="5.3075%" y="255.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (4 samples, 0.46%)</title><rect x="5.4023%" y="229" width="0.4598%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="4"/><text x="5.6523%" y="239.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (3 samples, 0.34%)</title><rect x="6.2069%" y="229" width="0.3448%" height="15" fill="rgb(241,131,45)" fg:x="54" fg:w="3"/><text x="6.4569%" y="239.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.34%)</title><rect x="6.2069%" y="213" width="0.3448%" height="15" fill="rgb(249,31,29)" fg:x="54" fg:w="3"/><text x="6.4569%" y="223.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.23%)</title><rect x="6.3218%" y="197" width="0.2299%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="2"/><text x="6.5718%" y="207.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.11%)</title><rect x="6.4368%" y="181" width="0.1149%" height="15" fill="rgb(238,160,17)" fg:x="56" fg:w="1"/><text x="6.6868%" y="191.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (14 samples, 1.61%)</title><rect x="5.0575%" y="261" width="1.6092%" height="15" fill="rgb(214,148,48)" fg:x="44" fg:w="14"/><text x="5.3075%" y="271.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (7 samples, 0.80%)</title><rect x="5.8621%" y="245" width="0.8046%" height="15" fill="rgb(232,36,49)" fg:x="51" fg:w="7"/><text x="6.1121%" y="255.50"></text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.11%)</title><rect x="6.5517%" y="229" width="0.1149%" height="15" fill="rgb(209,103,24)" fg:x="57" fg:w="1"/><text x="6.8017%" y="239.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.23%)</title><rect x="6.6667%" y="261" width="0.2299%" height="15" fill="rgb(229,88,8)" fg:x="58" fg:w="2"/><text x="6.9167%" y="271.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (21 samples, 2.41%)</title><rect x="5.0575%" y="277" width="2.4138%" height="15" fill="rgb(213,181,19)" fg:x="44" fg:w="21"/><text x="5.3075%" y="287.50">&lt;r..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (5 samples, 0.57%)</title><rect x="6.8966%" y="261" width="0.5747%" height="15" fill="rgb(254,191,54)" fg:x="60" fg:w="5"/><text x="7.1466%" y="271.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.34%)</title><rect x="7.1264%" y="245" width="0.3448%" height="15" fill="rgb(241,83,37)" fg:x="62" fg:w="3"/><text x="7.3764%" y="255.50"></text></g><g><title>tokio::task::local::Shared::schedule (2 samples, 0.23%)</title><rect x="7.2414%" y="229" width="0.2299%" height="15" fill="rgb(233,36,39)" fg:x="63" fg:w="2"/><text x="7.4914%" y="239.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (1 samples, 0.11%)</title><rect x="7.3563%" y="213" width="0.1149%" height="15" fill="rgb(226,3,54)" fg:x="64" fg:w="1"/><text x="7.6063%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.11%)</title><rect x="7.4713%" y="277" width="0.1149%" height="15" fill="rgb(245,192,40)" fg:x="65" fg:w="1"/><text x="7.7213%" y="287.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.11%)</title><rect x="7.5862%" y="277" width="0.1149%" height="15" fill="rgb(238,167,29)" fg:x="66" fg:w="1"/><text x="7.8362%" y="287.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (30 samples, 3.45%)</title><rect x="4.7126%" y="293" width="3.4483%" height="15" fill="rgb(232,182,51)" fg:x="41" fg:w="30"/><text x="4.9626%" y="303.50">&lt;fu..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.46%)</title><rect x="7.7011%" y="277" width="0.4598%" height="15" fill="rgb(231,60,39)" fg:x="67" fg:w="4"/><text x="7.9511%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2 samples, 0.23%)</title><rect x="8.1609%" y="293" width="0.2299%" height="15" fill="rgb(208,69,12)" fg:x="71" fg:w="2"/><text x="8.4109%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (2 samples, 0.23%)</title><rect x="8.1609%" y="277" width="0.2299%" height="15" fill="rgb(235,93,37)" fg:x="71" fg:w="2"/><text x="8.4109%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="8.2759%" y="261" width="0.1149%" height="15" fill="rgb(213,116,39)" fg:x="72" fg:w="1"/><text x="8.5259%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (1 samples, 0.11%)</title><rect x="8.2759%" y="245" width="0.1149%" height="15" fill="rgb(222,207,29)" fg:x="72" fg:w="1"/><text x="8.5259%" y="255.50"></text></g><g><title>tokio::runtime::task::raw::poll (33 samples, 3.79%)</title><rect x="4.7126%" y="309" width="3.7931%" height="15" fill="rgb(206,96,30)" fg:x="41" fg:w="33"/><text x="4.9626%" y="319.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.11%)</title><rect x="8.3908%" y="293" width="0.1149%" height="15" fill="rgb(218,138,4)" fg:x="73" fg:w="1"/><text x="8.6408%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::release (1 samples, 0.11%)</title><rect x="8.3908%" y="277" width="0.1149%" height="15" fill="rgb(250,191,14)" fg:x="73" fg:w="1"/><text x="8.6408%" y="287.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.23%)</title><rect x="9.4253%" y="277" width="0.2299%" height="15" fill="rgb(239,60,40)" fg:x="82" fg:w="2"/><text x="9.6753%" y="287.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (7 samples, 0.80%)</title><rect x="8.9655%" y="293" width="0.8046%" height="15" fill="rgb(206,27,48)" fg:x="78" fg:w="7"/><text x="9.2155%" y="303.50"></text></g><g><title>tokio::util::wake::clone_arc_raw (1 samples, 0.11%)</title><rect x="9.6552%" y="277" width="0.1149%" height="15" fill="rgb(225,35,8)" fg:x="84" fg:w="1"/><text x="9.9052%" y="287.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="13.2184%" y="229" width="0.1149%" height="15" fill="rgb(250,213,24)" fg:x="115" fg:w="1"/><text x="13.4684%" y="239.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (1 samples, 0.11%)</title><rect x="13.2184%" y="213" width="0.1149%" height="15" fill="rgb(247,123,22)" fg:x="115" fg:w="1"/><text x="13.4684%" y="223.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="13.2184%" y="197" width="0.1149%" height="15" fill="rgb(231,138,38)" fg:x="115" fg:w="1"/><text x="13.4684%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.23%)</title><rect x="13.3333%" y="229" width="0.2299%" height="15" fill="rgb(231,145,46)" fg:x="116" fg:w="2"/><text x="13.5833%" y="239.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="13.4483%" y="213" width="0.1149%" height="15" fill="rgb(251,118,11)" fg:x="117" fg:w="1"/><text x="13.6983%" y="223.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (3 samples, 0.34%)</title><rect x="13.5632%" y="229" width="0.3448%" height="15" fill="rgb(217,147,25)" fg:x="118" fg:w="3"/><text x="13.8132%" y="239.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.11%)</title><rect x="13.7931%" y="213" width="0.1149%" height="15" fill="rgb(247,81,37)" fg:x="120" fg:w="1"/><text x="14.0431%" y="223.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="15.5172%" y="197" width="0.1149%" height="15" fill="rgb(209,12,38)" fg:x="135" fg:w="1"/><text x="15.7672%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.34%)</title><rect x="15.6322%" y="197" width="0.3448%" height="15" fill="rgb(227,1,9)" fg:x="136" fg:w="3"/><text x="15.8822%" y="207.50"></text></g><g><title>http::method::Method::from_bytes (1 samples, 0.11%)</title><rect x="15.9770%" y="197" width="0.1149%" height="15" fill="rgb(248,47,43)" fg:x="139" fg:w="1"/><text x="16.2270%" y="207.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.11%)</title><rect x="16.0920%" y="197" width="0.1149%" height="15" fill="rgb(221,10,30)" fg:x="140" fg:w="1"/><text x="16.3420%" y="207.50"></text></g><g><title>httparse::parse_headers_iter_uninit (4 samples, 0.46%)</title><rect x="16.2069%" y="197" width="0.4598%" height="15" fill="rgb(210,229,1)" fg:x="141" fg:w="4"/><text x="16.4569%" y="207.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (19 samples, 2.18%)</title><rect x="14.5977%" y="213" width="2.1839%" height="15" fill="rgb(222,148,37)" fg:x="127" fg:w="19"/><text x="14.8477%" y="223.50">&lt;..</text></g><g><title>httparse::simd::avx2::match_uri_vectored (1 samples, 0.11%)</title><rect x="16.6667%" y="197" width="0.1149%" height="15" fill="rgb(234,67,33)" fg:x="145" fg:w="1"/><text x="16.9167%" y="207.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (1 samples, 0.11%)</title><rect x="17.1264%" y="197" width="0.1149%" height="15" fill="rgb(247,98,35)" fg:x="149" fg:w="1"/><text x="17.3764%" y="207.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (4 samples, 0.46%)</title><rect x="17.2414%" y="197" width="0.4598%" height="15" fill="rgb(247,138,52)" fg:x="150" fg:w="4"/><text x="17.4914%" y="207.50"></text></g><g><title>actix_http::extensions::Extensions::insert (3 samples, 0.34%)</title><rect x="17.3563%" y="181" width="0.3448%" height="15" fill="rgb(213,79,30)" fg:x="151" fg:w="3"/><text x="17.6063%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.11%)</title><rect x="17.5862%" y="165" width="0.1149%" height="15" fill="rgb(246,177,23)" fg:x="153" fg:w="1"/><text x="17.8362%" y="175.50"></text></g><g><title>actix_router::path::Path&lt;T&gt;::unprocessed (1 samples, 0.11%)</title><rect x="17.7011%" y="197" width="0.1149%" height="15" fill="rgb(230,62,27)" fg:x="154" fg:w="1"/><text x="17.9511%" y="207.50"></text></g><g><title>actix_router::quoter::Quoter::requote_str_lossy (1 samples, 0.11%)</title><rect x="17.8161%" y="197" width="0.1149%" height="15" fill="rgb(216,154,8)" fg:x="155" fg:w="1"/><text x="18.0661%" y="207.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.11%)</title><rect x="17.9310%" y="197" width="0.1149%" height="15" fill="rgb(244,35,45)" fg:x="156" fg:w="1"/><text x="18.1810%" y="207.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (12 samples, 1.38%)</title><rect x="16.7816%" y="213" width="1.3793%" height="15" fill="rgb(251,115,12)" fg:x="146" fg:w="12"/><text x="17.0316%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::message::Message&lt;actix_http::requests::head::RequestHead&gt;&gt; (1 samples, 0.11%)</title><rect x="18.0460%" y="197" width="0.1149%" height="15" fill="rgb(240,54,50)" fg:x="157" fg:w="1"/><text x="18.2960%" y="207.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (1 samples, 0.11%)</title><rect x="18.8506%" y="181" width="0.1149%" height="15" fill="rgb(233,84,52)" fg:x="164" fg:w="1"/><text x="19.1006%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (45 samples, 5.17%)</title><rect x="13.9080%" y="229" width="5.1724%" height="15" fill="rgb(207,117,47)" fg:x="121" fg:w="45"/><text x="14.1580%" y="239.50">actix_..</text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (8 samples, 0.92%)</title><rect x="18.1609%" y="213" width="0.9195%" height="15" fill="rgb(249,43,39)" fg:x="158" fg:w="8"/><text x="18.4109%" y="223.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (8 samples, 0.92%)</title><rect x="18.1609%" y="197" width="0.9195%" height="15" fill="rgb(209,38,44)" fg:x="158" fg:w="8"/><text x="18.4109%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.11%)</title><rect x="18.9655%" y="181" width="0.1149%" height="15" fill="rgb(236,212,23)" fg:x="165" fg:w="1"/><text x="19.2155%" y="191.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (3 samples, 0.34%)</title><rect x="20.0000%" y="213" width="0.3448%" height="15" fill="rgb(242,79,21)" fg:x="174" fg:w="3"/><text x="20.2500%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.11%)</title><rect x="21.9540%" y="181" width="0.1149%" height="15" fill="rgb(211,96,35)" fg:x="191" fg:w="1"/><text x="22.2040%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.23%)</title><rect x="22.0690%" y="181" width="0.2299%" height="15" fill="rgb(253,215,40)" fg:x="192" fg:w="2"/><text x="22.3190%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.11%)</title><rect x="22.1839%" y="165" width="0.1149%" height="15" fill="rgb(211,81,21)" fg:x="193" fg:w="1"/><text x="22.4339%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (1 samples, 0.11%)</title><rect x="22.1839%" y="149" width="0.1149%" height="15" fill="rgb(208,190,38)" fg:x="193" fg:w="1"/><text x="22.4339%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.11%)</title><rect x="22.7586%" y="165" width="0.1149%" height="15" fill="rgb(235,213,38)" fg:x="198" fg:w="1"/><text x="23.0086%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.11%)</title><rect x="22.8736%" y="149" width="0.1149%" height="15" fill="rgb(237,122,38)" fg:x="199" fg:w="1"/><text x="23.1236%" y="159.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.34%)</title><rect x="22.8736%" y="165" width="0.3448%" height="15" fill="rgb(244,218,35)" fg:x="199" fg:w="3"/><text x="23.1236%" y="175.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.23%)</title><rect x="22.9885%" y="149" width="0.2299%" height="15" fill="rgb(240,68,47)" fg:x="200" fg:w="2"/><text x="23.2385%" y="159.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.11%)</title><rect x="23.1034%" y="133" width="0.1149%" height="15" fill="rgb(210,16,53)" fg:x="201" fg:w="1"/><text x="23.3534%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (2 samples, 0.23%)</title><rect x="23.2184%" y="165" width="0.2299%" height="15" fill="rgb(235,124,12)" fg:x="202" fg:w="2"/><text x="23.4684%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.34%)</title><rect x="27.0115%" y="117" width="0.3448%" height="15" fill="rgb(224,169,11)" fg:x="235" fg:w="3"/><text x="27.2615%" y="127.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.34%)</title><rect x="27.0115%" y="101" width="0.3448%" height="15" fill="rgb(250,166,2)" fg:x="235" fg:w="3"/><text x="27.2615%" y="111.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (9 samples, 1.03%)</title><rect x="26.4368%" y="133" width="1.0345%" height="15" fill="rgb(242,216,29)" fg:x="230" fg:w="9"/><text x="26.6868%" y="143.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="27.3563%" y="117" width="0.1149%" height="15" fill="rgb(230,116,27)" fg:x="238" fg:w="1"/><text x="27.6063%" y="127.50"></text></g><g><title>&lt;redis::aio::DefaultAsyncDNSResolver as redis::io::dns::AsyncDNSResolver&gt;::resolve (1 samples, 0.11%)</title><rect x="27.4713%" y="133" width="0.1149%" height="15" fill="rgb(228,99,48)" fg:x="239" fg:w="1"/><text x="27.7213%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::connection::connect_simple&lt;redis::aio::tokio::Tokio&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="27.5862%" y="133" width="0.1149%" height="15" fill="rgb(253,11,6)" fg:x="240" fg:w="1"/><text x="27.8362%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream::connect&lt;&amp;core::net::socket_addr::SocketAddr&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="27.7011%" y="133" width="0.1149%" height="15" fill="rgb(247,143,39)" fg:x="241" fg:w="1"/><text x="27.9511%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.23%)</title><rect x="28.5057%" y="101" width="0.2299%" height="15" fill="rgb(236,97,10)" fg:x="248" fg:w="2"/><text x="28.7557%" y="111.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="28.6207%" y="85" width="0.1149%" height="15" fill="rgb(233,208,19)" fg:x="249" fg:w="1"/><text x="28.8707%" y="95.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.69%)</title><rect x="28.3908%" y="117" width="0.6897%" height="15" fill="rgb(216,164,2)" fg:x="247" fg:w="6"/><text x="28.6408%" y="127.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (3 samples, 0.34%)</title><rect x="28.7356%" y="101" width="0.3448%" height="15" fill="rgb(220,129,5)" fg:x="250" fg:w="3"/><text x="28.9856%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (3 samples, 0.34%)</title><rect x="28.7356%" y="85" width="0.3448%" height="15" fill="rgb(242,17,10)" fg:x="250" fg:w="3"/><text x="28.9856%" y="95.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.23%)</title><rect x="28.8506%" y="69" width="0.2299%" height="15" fill="rgb(242,107,0)" fg:x="251" fg:w="2"/><text x="29.1006%" y="79.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.11%)</title><rect x="28.9655%" y="53" width="0.1149%" height="15" fill="rgb(251,28,31)" fg:x="252" fg:w="1"/><text x="29.2155%" y="63.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::detect (1 samples, 0.11%)</title><rect x="28.9655%" y="37" width="0.1149%" height="15" fill="rgb(233,223,10)" fg:x="252" fg:w="1"/><text x="29.2155%" y="47.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (1 samples, 0.11%)</title><rect x="29.4253%" y="101" width="0.1149%" height="15" fill="rgb(215,21,27)" fg:x="256" fg:w="1"/><text x="29.6753%" y="111.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (6 samples, 0.69%)</title><rect x="29.0805%" y="117" width="0.6897%" height="15" fill="rgb(232,23,21)" fg:x="253" fg:w="6"/><text x="29.3305%" y="127.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 0.23%)</title><rect x="29.5402%" y="101" width="0.2299%" height="15" fill="rgb(244,5,23)" fg:x="257" fg:w="2"/><text x="29.7902%" y="111.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="29.6552%" y="85" width="0.1149%" height="15" fill="rgb(226,81,46)" fg:x="258" fg:w="1"/><text x="29.9052%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.11%)</title><rect x="29.7701%" y="117" width="0.1149%" height="15" fill="rgb(247,70,30)" fg:x="259" fg:w="1"/><text x="30.0201%" y="127.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (20 samples, 2.30%)</title><rect x="27.8161%" y="133" width="2.2989%" height="15" fill="rgb(212,68,19)" fg:x="242" fg:w="20"/><text x="28.0661%" y="143.50">r..</text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.23%)</title><rect x="29.8851%" y="117" width="0.2299%" height="15" fill="rgb(240,187,13)" fg:x="260" fg:w="2"/><text x="30.1351%" y="127.50"></text></g><g><title>redis::cmd::args_len (2 samples, 0.23%)</title><rect x="29.8851%" y="101" width="0.2299%" height="15" fill="rgb(223,113,26)" fg:x="260" fg:w="2"/><text x="30.1351%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="30.4598%" y="117" width="0.1149%" height="15" fill="rgb(206,192,2)" fg:x="265" fg:w="1"/><text x="30.7098%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="30.4598%" y="101" width="0.1149%" height="15" fill="rgb(241,108,4)" fg:x="265" fg:w="1"/><text x="30.7098%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="30.5747%" y="117" width="0.1149%" height="15" fill="rgb(247,173,49)" fg:x="266" fg:w="1"/><text x="30.8247%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.23%)</title><rect x="30.9195%" y="101" width="0.2299%" height="15" fill="rgb(224,114,35)" fg:x="269" fg:w="2"/><text x="31.1695%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="31.0345%" y="85" width="0.1149%" height="15" fill="rgb(245,159,27)" fg:x="270" fg:w="1"/><text x="31.2845%" y="95.50"></text></g><g><title>redis::connection::connection_setup_pipeline (10 samples, 1.15%)</title><rect x="30.1149%" y="133" width="1.1494%" height="15" fill="rgb(245,172,44)" fg:x="262" fg:w="10"/><text x="30.3649%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.57%)</title><rect x="30.6897%" y="117" width="0.5747%" height="15" fill="rgb(236,23,11)" fg:x="267" fg:w="5"/><text x="30.9397%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.11%)</title><rect x="31.1494%" y="101" width="0.1149%" height="15" fill="rgb(205,117,38)" fg:x="271" fg:w="1"/><text x="31.3994%" y="111.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (4 samples, 0.46%)</title><rect x="31.2644%" y="133" width="0.4598%" height="15" fill="rgb(237,72,25)" fg:x="272" fg:w="4"/><text x="31.5144%" y="143.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.11%)</title><rect x="31.6092%" y="117" width="0.1149%" height="15" fill="rgb(244,70,9)" fg:x="275" fg:w="1"/><text x="31.8592%" y="127.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.11%)</title><rect x="31.7241%" y="133" width="0.1149%" height="15" fill="rgb(217,125,39)" fg:x="276" fg:w="1"/><text x="31.9741%" y="143.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (75 samples, 8.62%)</title><rect x="23.4483%" y="165" width="8.6207%" height="15" fill="rgb(235,36,10)" fg:x="204" fg:w="75"/><text x="23.6983%" y="175.50">redis::clien..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (70 samples, 8.05%)</title><rect x="24.0230%" y="149" width="8.0460%" height="15" fill="rgb(251,123,47)" fg:x="209" fg:w="70"/><text x="24.2730%" y="159.50">redis::clie..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.23%)</title><rect x="31.8391%" y="133" width="0.2299%" height="15" fill="rgb(221,13,13)" fg:x="277" fg:w="2"/><text x="32.0891%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="32.1839%" y="149" width="0.1149%" height="15" fill="rgb(238,131,9)" fg:x="280" fg:w="1"/><text x="32.4339%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="32.1839%" y="133" width="0.1149%" height="15" fill="rgb(211,50,8)" fg:x="280" fg:w="1"/><text x="32.4339%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="32.6437%" y="101" width="0.1149%" height="15" fill="rgb(245,182,24)" fg:x="284" fg:w="1"/><text x="32.8937%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="33.1034%" y="85" width="0.1149%" height="15" fill="rgb(242,14,37)" fg:x="288" fg:w="1"/><text x="33.3534%" y="95.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (9 samples, 1.03%)</title><rect x="32.2989%" y="117" width="1.0345%" height="15" fill="rgb(246,228,12)" fg:x="281" fg:w="9"/><text x="32.5489%" y="127.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (5 samples, 0.57%)</title><rect x="32.7586%" y="101" width="0.5747%" height="15" fill="rgb(213,55,15)" fg:x="285" fg:w="5"/><text x="33.0086%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;::send::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="33.2184%" y="85" width="0.1149%" height="15" fill="rgb(209,9,3)" fg:x="289" fg:w="1"/><text x="33.4684%" y="95.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (97 samples, 11.15%)</title><rect x="22.2989%" y="181" width="11.1494%" height="15" fill="rgb(230,59,30)" fg:x="194" fg:w="97"/><text x="22.5489%" y="191.50">&lt;rinha_de_backen..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (12 samples, 1.38%)</title><rect x="32.0690%" y="165" width="1.3793%" height="15" fill="rgb(209,121,21)" fg:x="279" fg:w="12"/><text x="32.3190%" y="175.50"></text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (10 samples, 1.15%)</title><rect x="32.2989%" y="149" width="1.1494%" height="15" fill="rgb(220,109,13)" fg:x="281" fg:w="10"/><text x="32.5489%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (10 samples, 1.15%)</title><rect x="32.2989%" y="133" width="1.1494%" height="15" fill="rgb(232,18,1)" fg:x="281" fg:w="10"/><text x="32.5489%" y="143.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.11%)</title><rect x="33.3333%" y="117" width="0.1149%" height="15" fill="rgb(215,41,42)" fg:x="290" fg:w="1"/><text x="33.5833%" y="127.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.11%)</title><rect x="33.4483%" y="181" width="0.1149%" height="15" fill="rgb(224,123,36)" fg:x="291" fg:w="1"/><text x="33.6983%" y="191.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="33.4483%" y="165" width="0.1149%" height="15" fill="rgb(240,125,3)" fg:x="291" fg:w="1"/><text x="33.6983%" y="175.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.23%)</title><rect x="33.5632%" y="181" width="0.2299%" height="15" fill="rgb(205,98,50)" fg:x="292" fg:w="2"/><text x="33.8132%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.23%)</title><rect x="33.5632%" y="165" width="0.2299%" height="15" fill="rgb(205,185,37)" fg:x="292" fg:w="2"/><text x="33.8132%" y="175.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (2 samples, 0.23%)</title><rect x="33.7931%" y="181" width="0.2299%" height="15" fill="rgb(238,207,15)" fg:x="294" fg:w="2"/><text x="34.0431%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.11%)</title><rect x="33.9080%" y="165" width="0.1149%" height="15" fill="rgb(213,199,42)" fg:x="295" fg:w="1"/><text x="34.1580%" y="175.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (2 samples, 0.23%)</title><rect x="34.0230%" y="181" width="0.2299%" height="15" fill="rgb(235,201,11)" fg:x="296" fg:w="2"/><text x="34.2730%" y="191.50"></text></g><g><title>actix_http::header::map::HeaderMap::insert (1 samples, 0.11%)</title><rect x="34.1379%" y="165" width="0.1149%" height="15" fill="rgb(207,46,11)" fg:x="297" fg:w="1"/><text x="34.3879%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="34.1379%" y="149" width="0.1149%" height="15" fill="rgb(241,35,35)" fg:x="297" fg:w="1"/><text x="34.3879%" y="159.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (122 samples, 14.02%)</title><rect x="20.3448%" y="213" width="14.0230%" height="15" fill="rgb(243,32,47)" fg:x="177" fg:w="122"/><text x="20.5948%" y="223.50">&lt;actix_web::resource:..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (117 samples, 13.45%)</title><rect x="20.9195%" y="197" width="13.4483%" height="15" fill="rgb(247,202,23)" fg:x="182" fg:w="117"/><text x="21.1695%" y="207.50">actix_web::handler::..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (1 samples, 0.11%)</title><rect x="34.2529%" y="181" width="0.1149%" height="15" fill="rgb(219,102,11)" fg:x="298" fg:w="1"/><text x="34.5029%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (4 samples, 0.46%)</title><rect x="34.3678%" y="213" width="0.4598%" height="15" fill="rgb(243,110,44)" fg:x="299" fg:w="4"/><text x="34.6178%" y="223.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (1 samples, 0.11%)</title><rect x="34.7126%" y="197" width="0.1149%" height="15" fill="rgb(222,74,54)" fg:x="302" fg:w="1"/><text x="34.9626%" y="207.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (139 samples, 15.98%)</title><rect x="19.0805%" y="229" width="15.9770%" height="15" fill="rgb(216,99,12)" fg:x="166" fg:w="139"/><text x="19.3305%" y="239.50">actix_http::h1::dispatche..</text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (2 samples, 0.23%)</title><rect x="34.8276%" y="213" width="0.2299%" height="15" fill="rgb(226,22,26)" fg:x="303" fg:w="2"/><text x="35.0776%" y="223.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (2 samples, 0.23%)</title><rect x="34.8276%" y="197" width="0.2299%" height="15" fill="rgb(217,163,10)" fg:x="303" fg:w="2"/><text x="35.0776%" y="207.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (2 samples, 0.23%)</title><rect x="34.8276%" y="181" width="0.2299%" height="15" fill="rgb(213,25,53)" fg:x="303" fg:w="2"/><text x="35.0776%" y="191.50"></text></g><g><title>actix_http::helpers::write_content_length (1 samples, 0.11%)</title><rect x="34.9425%" y="165" width="0.1149%" height="15" fill="rgb(252,105,26)" fg:x="304" fg:w="1"/><text x="35.1925%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (1 samples, 0.11%)</title><rect x="35.0575%" y="229" width="0.1149%" height="15" fill="rgb(220,39,43)" fg:x="305" fg:w="1"/><text x="35.3075%" y="239.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (6 samples, 0.69%)</title><rect x="35.1724%" y="229" width="0.6897%" height="15" fill="rgb(229,68,48)" fg:x="306" fg:w="6"/><text x="35.4224%" y="239.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (2 samples, 0.23%)</title><rect x="35.8621%" y="229" width="0.2299%" height="15" fill="rgb(252,8,32)" fg:x="312" fg:w="2"/><text x="36.1121%" y="239.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.11%)</title><rect x="35.9770%" y="213" width="0.1149%" height="15" fill="rgb(223,20,43)" fg:x="313" fg:w="1"/><text x="36.2270%" y="223.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.11%)</title><rect x="35.9770%" y="197" width="0.1149%" height="15" fill="rgb(229,81,49)" fg:x="313" fg:w="1"/><text x="36.2270%" y="207.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (213 samples, 24.48%)</title><rect x="11.7241%" y="245" width="24.4828%" height="15" fill="rgb(236,28,36)" fg:x="102" fg:w="213"/><text x="11.9741%" y="255.50">&lt;actix_http::h1::dispatcher::Dispatcher..</text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (1 samples, 0.11%)</title><rect x="36.0920%" y="229" width="0.1149%" height="15" fill="rgb(249,185,26)" fg:x="314" fg:w="1"/><text x="36.3420%" y="239.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="36.0920%" y="213" width="0.1149%" height="15" fill="rgb(249,174,33)" fg:x="314" fg:w="1"/><text x="36.3420%" y="223.50"></text></g><g><title>&lt;actix_http::service::HttpServiceHandlerResponse&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="36.2069%" y="245" width="0.1149%" height="15" fill="rgb(233,201,37)" fg:x="315" fg:w="1"/><text x="36.4569%" y="255.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (8 samples, 0.92%)</title><rect x="36.8966%" y="181" width="0.9195%" height="15" fill="rgb(221,78,26)" fg:x="321" fg:w="8"/><text x="37.1466%" y="191.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (1 samples, 0.11%)</title><rect x="37.8161%" y="181" width="0.1149%" height="15" fill="rgb(250,127,30)" fg:x="329" fg:w="1"/><text x="38.0661%" y="191.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (1 samples, 0.11%)</title><rect x="37.9310%" y="181" width="0.1149%" height="15" fill="rgb(230,49,44)" fg:x="330" fg:w="1"/><text x="38.1810%" y="191.50"></text></g><g><title>http::method::Method::from_bytes (1 samples, 0.11%)</title><rect x="38.0460%" y="181" width="0.1149%" height="15" fill="rgb(229,67,23)" fg:x="331" fg:w="1"/><text x="38.2960%" y="191.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (16 samples, 1.84%)</title><rect x="36.4368%" y="197" width="1.8391%" height="15" fill="rgb(249,83,47)" fg:x="317" fg:w="16"/><text x="36.6868%" y="207.50">&lt;..</text></g><g><title>httparse::parse_headers_iter_uninit (1 samples, 0.11%)</title><rect x="38.1609%" y="181" width="0.1149%" height="15" fill="rgb(215,43,3)" fg:x="332" fg:w="1"/><text x="38.4109%" y="191.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="38.2759%" y="181" width="0.1149%" height="15" fill="rgb(238,154,13)" fg:x="333" fg:w="1"/><text x="38.5259%" y="191.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (2 samples, 0.23%)</title><rect x="38.2759%" y="197" width="0.2299%" height="15" fill="rgb(219,56,2)" fg:x="333" fg:w="2"/><text x="38.5259%" y="207.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.11%)</title><rect x="38.3908%" y="181" width="0.1149%" height="15" fill="rgb(233,0,4)" fg:x="334" fg:w="1"/><text x="38.6408%" y="191.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (1 samples, 0.11%)</title><rect x="38.3908%" y="165" width="0.1149%" height="15" fill="rgb(235,30,7)" fg:x="334" fg:w="1"/><text x="38.6408%" y="175.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="38.5057%" y="197" width="0.1149%" height="15" fill="rgb(250,79,13)" fg:x="335" fg:w="1"/><text x="38.7557%" y="207.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="38.5057%" y="181" width="0.1149%" height="15" fill="rgb(211,146,34)" fg:x="335" fg:w="1"/><text x="38.7557%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (20 samples, 2.30%)</title><rect x="36.4368%" y="213" width="2.2989%" height="15" fill="rgb(228,22,38)" fg:x="317" fg:w="20"/><text x="36.6868%" y="223.50">a..</text></g><g><title>actix_http::h1::timer::TimerState::clear (1 samples, 0.11%)</title><rect x="38.6207%" y="197" width="0.1149%" height="15" fill="rgb(235,168,5)" fg:x="336" fg:w="1"/><text x="38.8707%" y="207.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.11%)</title><rect x="38.6207%" y="181" width="0.1149%" height="15" fill="rgb(221,155,16)" fg:x="336" fg:w="1"/><text x="38.8707%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.11%)</title><rect x="38.6207%" y="165" width="0.1149%" height="15" fill="rgb(215,215,53)" fg:x="336" fg:w="1"/><text x="38.8707%" y="175.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.11%)</title><rect x="39.0805%" y="149" width="0.1149%" height="15" fill="rgb(223,4,10)" fg:x="340" fg:w="1"/><text x="39.3305%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="39.0805%" y="133" width="0.1149%" height="15" fill="rgb(234,103,6)" fg:x="340" fg:w="1"/><text x="39.3305%" y="143.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.46%)</title><rect x="38.9655%" y="165" width="0.4598%" height="15" fill="rgb(227,97,0)" fg:x="339" fg:w="4"/><text x="39.2155%" y="175.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (2 samples, 0.23%)</title><rect x="39.1954%" y="149" width="0.2299%" height="15" fill="rgb(234,150,53)" fg:x="341" fg:w="2"/><text x="39.4454%" y="159.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (2 samples, 0.23%)</title><rect x="40.0000%" y="101" width="0.2299%" height="15" fill="rgb(228,201,54)" fg:x="348" fg:w="2"/><text x="40.2500%" y="111.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (2 samples, 0.23%)</title><rect x="40.0000%" y="85" width="0.2299%" height="15" fill="rgb(222,22,37)" fg:x="348" fg:w="2"/><text x="40.2500%" y="95.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (2 samples, 0.23%)</title><rect x="40.0000%" y="69" width="0.2299%" height="15" fill="rgb(237,53,32)" fg:x="348" fg:w="2"/><text x="40.2500%" y="79.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.34%)</title><rect x="40.3448%" y="85" width="0.3448%" height="15" fill="rgb(233,25,53)" fg:x="351" fg:w="3"/><text x="40.5948%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (5 samples, 0.57%)</title><rect x="40.2299%" y="101" width="0.5747%" height="15" fill="rgb(210,40,34)" fg:x="350" fg:w="5"/><text x="40.4799%" y="111.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (1 samples, 0.11%)</title><rect x="40.6897%" y="85" width="0.1149%" height="15" fill="rgb(241,220,44)" fg:x="354" fg:w="1"/><text x="40.9397%" y="95.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (13 samples, 1.49%)</title><rect x="39.4253%" y="165" width="1.4943%" height="15" fill="rgb(235,28,35)" fg:x="343" fg:w="13"/><text x="39.6753%" y="175.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (12 samples, 1.38%)</title><rect x="39.5402%" y="149" width="1.3793%" height="15" fill="rgb(210,56,17)" fg:x="344" fg:w="12"/><text x="39.7902%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (12 samples, 1.38%)</title><rect x="39.5402%" y="133" width="1.3793%" height="15" fill="rgb(224,130,29)" fg:x="344" fg:w="12"/><text x="39.7902%" y="143.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (11 samples, 1.26%)</title><rect x="39.6552%" y="117" width="1.2644%" height="15" fill="rgb(235,212,8)" fg:x="345" fg:w="11"/><text x="39.9052%" y="127.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="40.8046%" y="101" width="0.1149%" height="15" fill="rgb(223,33,50)" fg:x="355" fg:w="1"/><text x="41.0546%" y="111.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (40 samples, 4.60%)</title><rect x="36.4368%" y="229" width="4.5977%" height="15" fill="rgb(219,149,13)" fg:x="317" fg:w="40"/><text x="36.6868%" y="239.50">&lt;acti..</text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (20 samples, 2.30%)</title><rect x="38.7356%" y="213" width="2.2989%" height="15" fill="rgb(250,156,29)" fg:x="337" fg:w="20"/><text x="38.9856%" y="223.50">a..</text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (20 samples, 2.30%)</title><rect x="38.7356%" y="197" width="2.2989%" height="15" fill="rgb(216,193,19)" fg:x="337" fg:w="20"/><text x="38.9856%" y="207.50">&lt;..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (20 samples, 2.30%)</title><rect x="38.7356%" y="181" width="2.2989%" height="15" fill="rgb(216,135,14)" fg:x="337" fg:w="20"/><text x="38.9856%" y="191.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::extract::tuple_from_req::TupleFromRequest2&lt;actix_web::types::json::Json&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;,actix_web::data::Data&lt;rinha_de_backend::use_cases::create_payment::CreatePaymentUseCase&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="40.9195%" y="165" width="0.1149%" height="15" fill="rgb(241,47,5)" fg:x="356" fg:w="1"/><text x="41.1695%" y="175.50"></text></g><g><title>&lt;actix_service::and_then::AndThenServiceResponse&lt;A,B,Req&gt; as core::future::future::Future&gt;::poll (43 samples, 4.94%)</title><rect x="36.3218%" y="245" width="4.9425%" height="15" fill="rgb(233,42,35)" fg:x="316" fg:w="43"/><text x="36.5718%" y="255.50">&lt;actix..</text></g><g><title>tokio::net::tcp::stream::TcpStream::peer_addr (2 samples, 0.23%)</title><rect x="41.0345%" y="229" width="0.2299%" height="15" fill="rgb(231,13,6)" fg:x="357" fg:w="2"/><text x="41.2845%" y="239.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (261 samples, 30.00%)</title><rect x="11.3793%" y="261" width="30.0000%" height="15" fill="rgb(207,181,40)" fg:x="99" fg:w="261"/><text x="11.6293%" y="271.50">&lt;actix_server::service::StreamService&lt;S,I&gt; as ac..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::service::State&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler,actix_http::h1::upgrade::UpgradeHandler&gt;&gt; (1 samples, 0.11%)</title><rect x="41.2644%" y="245" width="0.1149%" height="15" fill="rgb(254,173,49)" fg:x="359" fg:w="1"/><text x="41.5144%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (1 samples, 0.11%)</title><rect x="41.2644%" y="229" width="0.1149%" height="15" fill="rgb(221,1,38)" fg:x="359" fg:w="1"/><text x="41.5144%" y="239.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (1 samples, 0.11%)</title><rect x="41.3793%" y="245" width="0.1149%" height="15" fill="rgb(206,124,46)" fg:x="360" fg:w="1"/><text x="41.6293%" y="255.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.11%)</title><rect x="41.3793%" y="229" width="0.1149%" height="15" fill="rgb(249,21,11)" fg:x="360" fg:w="1"/><text x="41.6293%" y="239.50"></text></g><g><title>&lt;actix_server::worker::ServerWorker as core::future::future::Future&gt;::poll (2 samples, 0.23%)</title><rect x="41.3793%" y="261" width="0.2299%" height="15" fill="rgb(222,201,40)" fg:x="360" fg:w="2"/><text x="41.6293%" y="271.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.11%)</title><rect x="41.4943%" y="245" width="0.1149%" height="15" fill="rgb(235,61,29)" fg:x="361" fg:w="1"/><text x="41.7443%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.23%)</title><rect x="41.6092%" y="261" width="0.2299%" height="15" fill="rgb(219,207,3)" fg:x="362" fg:w="2"/><text x="41.8592%" y="271.50"></text></g><g><title>actix-rt|system (367 samples, 42.18%)</title><rect x="0.0000%" y="389" width="42.1839%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="367"/><text x="0.2500%" y="399.50">actix-rt|system</text></g><g><title>__clone (367 samples, 42.18%)</title><rect x="0.0000%" y="373" width="42.1839%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="367"/><text x="0.2500%" y="383.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (367 samples, 42.18%)</title><rect x="0.0000%" y="357" width="42.1839%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="367"/><text x="0.2500%" y="367.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (367 samples, 42.18%)</title><rect x="0.0000%" y="341" width="42.1839%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="367"/><text x="0.2500%" y="351.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (367 samples, 42.18%)</title><rect x="0.0000%" y="325" width="42.1839%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="367"/><text x="0.2500%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (293 samples, 33.68%)</title><rect x="8.5057%" y="309" width="33.6782%" height="15" fill="rgb(206,201,31)" fg:x="74" fg:w="293"/><text x="8.7557%" y="319.50">tokio::task::local::LocalSet::run_until::{{closure}}</text></g><g><title>tokio::task::local::LocalSet::tick (282 samples, 32.41%)</title><rect x="9.7701%" y="293" width="32.4138%" height="15" fill="rgb(231,57,52)" fg:x="85" fg:w="282"/><text x="10.0201%" y="303.50">tokio::task::local::LocalSet::tick</text></g><g><title>tokio::runtime::task::raw::poll (272 samples, 31.26%)</title><rect x="10.9195%" y="277" width="31.2644%" height="15" fill="rgb(248,177,22)" fg:x="95" fg:w="272"/><text x="11.1695%" y="287.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::task::local::Shared::schedule (3 samples, 0.34%)</title><rect x="41.8391%" y="261" width="0.3448%" height="15" fill="rgb(215,211,37)" fg:x="364" fg:w="3"/><text x="42.0891%" y="271.50"></text></g><g><title>actix-server ac (2 samples, 0.23%)</title><rect x="42.1839%" y="389" width="0.2299%" height="15" fill="rgb(241,128,51)" fg:x="367" fg:w="2"/><text x="42.4339%" y="399.50"></text></g><g><title>__clone (2 samples, 0.23%)</title><rect x="42.1839%" y="373" width="0.2299%" height="15" fill="rgb(227,165,31)" fg:x="367" fg:w="2"/><text x="42.4339%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2 samples, 0.23%)</title><rect x="42.1839%" y="357" width="0.2299%" height="15" fill="rgb(228,167,24)" fg:x="367" fg:w="2"/><text x="42.4339%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.23%)</title><rect x="42.1839%" y="341" width="0.2299%" height="15" fill="rgb(228,143,12)" fg:x="367" fg:w="2"/><text x="42.4339%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 0.23%)</title><rect x="42.1839%" y="325" width="0.2299%" height="15" fill="rgb(249,149,8)" fg:x="367" fg:w="2"/><text x="42.4339%" y="335.50"></text></g><g><title>actix_server::accept::Accept::accept (2 samples, 0.23%)</title><rect x="42.1839%" y="309" width="0.2299%" height="15" fill="rgb(243,35,44)" fg:x="367" fg:w="2"/><text x="42.4339%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.46%)</title><rect x="43.6782%" y="293" width="0.4598%" height="15" fill="rgb(246,89,9)" fg:x="380" fg:w="4"/><text x="43.9282%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.11%)</title><rect x="44.1379%" y="293" width="0.1149%" height="15" fill="rgb(233,213,13)" fg:x="384" fg:w="1"/><text x="44.3879%" y="303.50"></text></g><g><title>tokio::runtime::driver::Driver::park (1 samples, 0.11%)</title><rect x="44.8276%" y="277" width="0.1149%" height="15" fill="rgb(233,141,41)" fg:x="390" fg:w="1"/><text x="45.0776%" y="287.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (11 samples, 1.26%)</title><rect x="44.9425%" y="277" width="1.2644%" height="15" fill="rgb(239,167,4)" fg:x="391" fg:w="11"/><text x="45.1925%" y="287.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (6 samples, 0.69%)</title><rect x="45.5172%" y="261" width="0.6897%" height="15" fill="rgb(209,217,16)" fg:x="396" fg:w="6"/><text x="45.7672%" y="271.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.11%)</title><rect x="47.7011%" y="261" width="0.1149%" height="15" fill="rgb(219,88,35)" fg:x="415" fg:w="1"/><text x="47.9511%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.34%)</title><rect x="49.0805%" y="245" width="0.3448%" height="15" fill="rgb(220,193,23)" fg:x="427" fg:w="3"/><text x="49.3305%" y="255.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.11%)</title><rect x="49.3103%" y="229" width="0.1149%" height="15" fill="rgb(230,90,52)" fg:x="429" fg:w="1"/><text x="49.5603%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.23%)</title><rect x="50.0000%" y="213" width="0.2299%" height="15" fill="rgb(252,106,19)" fg:x="435" fg:w="2"/><text x="50.2500%" y="223.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (23 samples, 2.64%)</title><rect x="47.8161%" y="261" width="2.6437%" height="15" fill="rgb(206,74,20)" fg:x="416" fg:w="23"/><text x="48.0661%" y="271.50">to..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (9 samples, 1.03%)</title><rect x="49.4253%" y="245" width="1.0345%" height="15" fill="rgb(230,138,44)" fg:x="430" fg:w="9"/><text x="49.6753%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (7 samples, 0.80%)</title><rect x="49.6552%" y="229" width="0.8046%" height="15" fill="rgb(235,182,43)" fg:x="432" fg:w="7"/><text x="49.9052%" y="239.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.23%)</title><rect x="50.2299%" y="213" width="0.2299%" height="15" fill="rgb(242,16,51)" fg:x="437" fg:w="2"/><text x="50.4799%" y="223.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.11%)</title><rect x="50.4598%" y="261" width="0.1149%" height="15" fill="rgb(248,9,4)" fg:x="439" fg:w="1"/><text x="50.7098%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (58 samples, 6.67%)</title><rect x="44.2529%" y="293" width="6.6667%" height="15" fill="rgb(210,31,22)" fg:x="385" fg:w="58"/><text x="44.5029%" y="303.50">tokio::ru..</text></g><g><title>tokio::runtime::time::Driver::park_internal (41 samples, 4.71%)</title><rect x="46.2069%" y="277" width="4.7126%" height="15" fill="rgb(239,54,39)" fg:x="402" fg:w="41"/><text x="46.4569%" y="287.50">tokio..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.34%)</title><rect x="50.5747%" y="261" width="0.3448%" height="15" fill="rgb(230,99,41)" fg:x="440" fg:w="3"/><text x="50.8247%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (8 samples, 0.92%)</title><rect x="50.9195%" y="293" width="0.9195%" height="15" fill="rgb(253,106,12)" fg:x="443" fg:w="8"/><text x="51.1695%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.23%)</title><rect x="53.7931%" y="245" width="0.2299%" height="15" fill="rgb(213,46,41)" fg:x="468" fg:w="2"/><text x="54.0431%" y="255.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (1 samples, 0.11%)</title><rect x="54.0230%" y="245" width="0.1149%" height="15" fill="rgb(215,133,35)" fg:x="470" fg:w="1"/><text x="54.2730%" y="255.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (1 samples, 0.11%)</title><rect x="54.0230%" y="229" width="0.1149%" height="15" fill="rgb(213,28,5)" fg:x="470" fg:w="1"/><text x="54.2730%" y="239.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (1 samples, 0.11%)</title><rect x="54.0230%" y="213" width="0.1149%" height="15" fill="rgb(215,77,49)" fg:x="470" fg:w="1"/><text x="54.2730%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.11%)</title><rect x="54.0230%" y="197" width="0.1149%" height="15" fill="rgb(248,100,22)" fg:x="470" fg:w="1"/><text x="54.2730%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (2 samples, 0.23%)</title><rect x="54.1379%" y="245" width="0.2299%" height="15" fill="rgb(208,67,9)" fg:x="471" fg:w="2"/><text x="54.3879%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="54.2529%" y="229" width="0.1149%" height="15" fill="rgb(219,133,21)" fg:x="472" fg:w="1"/><text x="54.5029%" y="239.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.11%)</title><rect x="54.3678%" y="245" width="0.1149%" height="15" fill="rgb(246,46,29)" fg:x="473" fg:w="1"/><text x="54.6178%" y="255.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (3 samples, 0.34%)</title><rect x="54.4828%" y="245" width="0.3448%" height="15" fill="rgb(246,185,52)" fg:x="474" fg:w="3"/><text x="54.7328%" y="255.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (3 samples, 0.34%)</title><rect x="54.4828%" y="229" width="0.3448%" height="15" fill="rgb(252,136,11)" fg:x="474" fg:w="3"/><text x="54.7328%" y="239.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::poll_canceled (1 samples, 0.11%)</title><rect x="54.8276%" y="245" width="0.1149%" height="15" fill="rgb(219,138,53)" fg:x="477" fg:w="1"/><text x="55.0776%" y="255.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (1 samples, 0.11%)</title><rect x="54.9425%" y="245" width="0.1149%" height="15" fill="rgb(211,51,23)" fg:x="478" fg:w="1"/><text x="55.1925%" y="255.50"></text></g><g><title>hyper::headers::is_chunked (1 samples, 0.11%)</title><rect x="54.9425%" y="229" width="0.1149%" height="15" fill="rgb(247,221,28)" fg:x="478" fg:w="1"/><text x="55.1925%" y="239.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.11%)</title><rect x="54.9425%" y="213" width="0.1149%" height="15" fill="rgb(251,222,45)" fg:x="478" fg:w="1"/><text x="55.1925%" y="223.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.11%)</title><rect x="55.0575%" y="229" width="0.1149%" height="15" fill="rgb(217,162,53)" fg:x="479" fg:w="1"/><text x="55.3075%" y="239.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.11%)</title><rect x="55.0575%" y="213" width="0.1149%" height="15" fill="rgb(229,93,14)" fg:x="479" fg:w="1"/><text x="55.3075%" y="223.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (1 samples, 0.11%)</title><rect x="55.0575%" y="197" width="0.1149%" height="15" fill="rgb(209,67,49)" fg:x="479" fg:w="1"/><text x="55.3075%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.11%)</title><rect x="55.0575%" y="181" width="0.1149%" height="15" fill="rgb(213,87,29)" fg:x="479" fg:w="1"/><text x="55.3075%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="55.0575%" y="165" width="0.1149%" height="15" fill="rgb(205,151,52)" fg:x="479" fg:w="1"/><text x="55.3075%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="55.0575%" y="149" width="0.1149%" height="15" fill="rgb(253,215,39)" fg:x="479" fg:w="1"/><text x="55.3075%" y="159.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (2 samples, 0.23%)</title><rect x="55.0575%" y="245" width="0.2299%" height="15" fill="rgb(221,220,41)" fg:x="479" fg:w="2"/><text x="55.3075%" y="255.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (1 samples, 0.11%)</title><rect x="55.1724%" y="229" width="0.1149%" height="15" fill="rgb(218,133,21)" fg:x="480" fg:w="1"/><text x="55.4224%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="55.8621%" y="229" width="0.1149%" height="15" fill="rgb(221,193,43)" fg:x="486" fg:w="1"/><text x="56.1121%" y="239.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="55.8621%" y="213" width="0.1149%" height="15" fill="rgb(240,128,52)" fg:x="486" fg:w="1"/><text x="56.1121%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="55.8621%" y="197" width="0.1149%" height="15" fill="rgb(253,114,12)" fg:x="486" fg:w="1"/><text x="56.1121%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::role::FastWrite as core::fmt::Write&gt;::write_str (1 samples, 0.11%)</title><rect x="55.8621%" y="181" width="0.1149%" height="15" fill="rgb(215,223,47)" fg:x="486" fg:w="1"/><text x="56.1121%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (7 samples, 0.80%)</title><rect x="55.2874%" y="245" width="0.8046%" height="15" fill="rgb(248,225,23)" fg:x="481" fg:w="7"/><text x="55.5374%" y="255.50"></text></g><g><title>hyper::proto::h1::role::write_headers (1 samples, 0.11%)</title><rect x="55.9770%" y="229" width="0.1149%" height="15" fill="rgb(250,108,0)" fg:x="487" fg:w="1"/><text x="56.2270%" y="239.50"></text></g><g><title>http::header::name::StandardHeader::as_str.3320 (1 samples, 0.11%)</title><rect x="55.9770%" y="213" width="0.1149%" height="15" fill="rgb(228,208,7)" fg:x="487" fg:w="1"/><text x="56.2270%" y="223.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Write&gt;::poll_flush (1 samples, 0.11%)</title><rect x="56.3218%" y="229" width="0.1149%" height="15" fill="rgb(244,45,10)" fg:x="490" fg:w="1"/><text x="56.5718%" y="239.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (4 samples, 0.46%)</title><rect x="56.0920%" y="245" width="0.4598%" height="15" fill="rgb(207,125,25)" fg:x="488" fg:w="4"/><text x="56.3420%" y="255.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.11%)</title><rect x="56.4368%" y="229" width="0.1149%" height="15" fill="rgb(210,195,18)" fg:x="491" fg:w="1"/><text x="56.6868%" y="239.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (5 samples, 0.57%)</title><rect x="56.5517%" y="245" width="0.5747%" height="15" fill="rgb(249,80,12)" fg:x="492" fg:w="5"/><text x="56.8017%" y="255.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (5 samples, 0.57%)</title><rect x="56.5517%" y="229" width="0.5747%" height="15" fill="rgb(221,65,9)" fg:x="492" fg:w="5"/><text x="56.8017%" y="239.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.23%)</title><rect x="56.8966%" y="213" width="0.2299%" height="15" fill="rgb(235,49,36)" fg:x="495" fg:w="2"/><text x="57.1466%" y="223.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.23%)</title><rect x="56.8966%" y="197" width="0.2299%" height="15" fill="rgb(225,32,20)" fg:x="495" fg:w="2"/><text x="57.1466%" y="207.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (36 samples, 4.14%)</title><rect x="53.1034%" y="261" width="4.1379%" height="15" fill="rgb(215,141,46)" fg:x="462" fg:w="36"/><text x="53.3534%" y="271.50">&lt;hype..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (1 samples, 0.11%)</title><rect x="57.1264%" y="245" width="0.1149%" height="15" fill="rgb(250,160,47)" fg:x="497" fg:w="1"/><text x="57.3764%" y="255.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.11%)</title><rect x="57.1264%" y="229" width="0.1149%" height="15" fill="rgb(216,222,40)" fg:x="497" fg:w="1"/><text x="57.3764%" y="239.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.57%)</title><rect x="57.5862%" y="229" width="0.5747%" height="15" fill="rgb(234,217,39)" fg:x="501" fg:w="5"/><text x="57.8362%" y="239.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.34%)</title><rect x="57.8161%" y="213" width="0.3448%" height="15" fill="rgb(207,178,40)" fg:x="503" fg:w="3"/><text x="58.0661%" y="223.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.23%)</title><rect x="59.6552%" y="181" width="0.2299%" height="15" fill="rgb(221,136,13)" fg:x="519" fg:w="2"/><text x="59.9052%" y="191.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.23%)</title><rect x="59.6552%" y="165" width="0.2299%" height="15" fill="rgb(249,199,10)" fg:x="519" fg:w="2"/><text x="59.9052%" y="175.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.11%)</title><rect x="60.1149%" y="117" width="0.1149%" height="15" fill="rgb(249,222,13)" fg:x="523" fg:w="1"/><text x="60.3649%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (4 samples, 0.46%)</title><rect x="59.8851%" y="181" width="0.4598%" height="15" fill="rgb(244,185,38)" fg:x="521" fg:w="4"/><text x="60.1351%" y="191.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.34%)</title><rect x="60.0000%" y="165" width="0.3448%" height="15" fill="rgb(236,202,9)" fg:x="522" fg:w="3"/><text x="60.2500%" y="175.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (2 samples, 0.23%)</title><rect x="60.1149%" y="149" width="0.2299%" height="15" fill="rgb(250,229,37)" fg:x="523" fg:w="2"/><text x="60.3649%" y="159.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.23%)</title><rect x="60.1149%" y="133" width="0.2299%" height="15" fill="rgb(206,174,23)" fg:x="523" fg:w="2"/><text x="60.3649%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.11%)</title><rect x="60.2299%" y="117" width="0.1149%" height="15" fill="rgb(211,33,43)" fg:x="524" fg:w="1"/><text x="60.4799%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (10 samples, 1.15%)</title><rect x="59.4253%" y="197" width="1.1494%" height="15" fill="rgb(245,58,50)" fg:x="517" fg:w="10"/><text x="59.6753%" y="207.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.23%)</title><rect x="60.3448%" y="181" width="0.2299%" height="15" fill="rgb(244,68,36)" fg:x="525" fg:w="2"/><text x="60.5948%" y="191.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2 samples, 0.23%)</title><rect x="60.3448%" y="165" width="0.2299%" height="15" fill="rgb(232,229,15)" fg:x="525" fg:w="2"/><text x="60.5948%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (30 samples, 3.45%)</title><rect x="57.2414%" y="245" width="3.4483%" height="15" fill="rgb(254,30,23)" fg:x="498" fg:w="30"/><text x="57.4914%" y="255.50">&lt;to..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (22 samples, 2.53%)</title><rect x="58.1609%" y="229" width="2.5287%" height="15" fill="rgb(235,160,14)" fg:x="506" fg:w="22"/><text x="58.4109%" y="239.50">re..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (18 samples, 2.07%)</title><rect x="58.6207%" y="213" width="2.0690%" height="15" fill="rgb(212,155,44)" fg:x="510" fg:w="18"/><text x="58.8707%" y="223.50">&lt;..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="60.5747%" y="197" width="0.1149%" height="15" fill="rgb(226,2,50)" fg:x="527" fg:w="1"/><text x="60.8247%" y="207.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (1 samples, 0.11%)</title><rect x="60.6897%" y="245" width="0.1149%" height="15" fill="rgb(234,177,6)" fg:x="528" fg:w="1"/><text x="60.9397%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="61.0345%" y="229" width="0.1149%" height="15" fill="rgb(217,24,9)" fg:x="531" fg:w="1"/><text x="61.2845%" y="239.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.11%)</title><rect x="61.1494%" y="229" width="0.1149%" height="15" fill="rgb(220,13,46)" fg:x="532" fg:w="1"/><text x="61.3994%" y="239.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (38 samples, 4.37%)</title><rect x="57.2414%" y="261" width="4.3678%" height="15" fill="rgb(239,221,27)" fg:x="498" fg:w="38"/><text x="57.4914%" y="271.50">&lt;redi..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (7 samples, 0.80%)</title><rect x="60.8046%" y="245" width="0.8046%" height="15" fill="rgb(222,198,25)" fg:x="529" fg:w="7"/><text x="61.0546%" y="255.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.34%)</title><rect x="61.2644%" y="229" width="0.3448%" height="15" fill="rgb(211,99,13)" fg:x="533" fg:w="3"/><text x="61.5144%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.11%)</title><rect x="61.4943%" y="213" width="0.1149%" height="15" fill="rgb(232,111,31)" fg:x="535" fg:w="1"/><text x="61.7443%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (2 samples, 0.23%)</title><rect x="61.6092%" y="261" width="0.2299%" height="15" fill="rgb(245,82,37)" fg:x="536" fg:w="2"/><text x="61.8592%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="61.7241%" y="245" width="0.1149%" height="15" fill="rgb(227,149,46)" fg:x="537" fg:w="1"/><text x="61.9741%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (7 samples, 0.80%)</title><rect x="61.8391%" y="261" width="0.8046%" height="15" fill="rgb(218,36,50)" fg:x="538" fg:w="7"/><text x="62.0891%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.34%)</title><rect x="62.2989%" y="245" width="0.3448%" height="15" fill="rgb(226,80,48)" fg:x="542" fg:w="3"/><text x="62.5489%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.23%)</title><rect x="62.4138%" y="229" width="0.2299%" height="15" fill="rgb(238,224,15)" fg:x="543" fg:w="2"/><text x="62.6638%" y="239.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.34%)</title><rect x="62.6437%" y="261" width="0.3448%" height="15" fill="rgb(241,136,10)" fg:x="545" fg:w="3"/><text x="62.8937%" y="271.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (93 samples, 10.69%)</title><rect x="52.6437%" y="277" width="10.6897%" height="15" fill="rgb(208,32,45)" fg:x="458" fg:w="93"/><text x="52.8937%" y="287.50">&lt;futures_util::f..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.34%)</title><rect x="62.9885%" y="261" width="0.3448%" height="15" fill="rgb(207,135,9)" fg:x="548" fg:w="3"/><text x="63.2385%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;futures_util::future::future::Map&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;,redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="63.3333%" y="277" width="0.1149%" height="15" fill="rgb(206,86,44)" fg:x="551" fg:w="1"/><text x="63.5833%" y="287.50"></text></g><g><title>url::host::Host::parse (4 samples, 0.46%)</title><rect x="65.5172%" y="213" width="0.4598%" height="15" fill="rgb(245,177,15)" fg:x="570" fg:w="4"/><text x="65.7672%" y="223.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (3 samples, 0.34%)</title><rect x="65.6322%" y="197" width="0.3448%" height="15" fill="rgb(206,64,50)" fg:x="571" fg:w="3"/><text x="65.8822%" y="207.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.5869 (2 samples, 0.23%)</title><rect x="65.7471%" y="181" width="0.2299%" height="15" fill="rgb(234,36,40)" fg:x="572" fg:w="2"/><text x="65.9971%" y="191.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.23%)</title><rect x="65.7471%" y="165" width="0.2299%" height="15" fill="rgb(213,64,8)" fg:x="572" fg:w="2"/><text x="65.9971%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path (3 samples, 0.34%)</title><rect x="65.9770%" y="213" width="0.3448%" height="15" fill="rgb(210,75,36)" fg:x="574" fg:w="3"/><text x="66.2270%" y="223.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (15 samples, 1.72%)</title><rect x="64.7126%" y="261" width="1.7241%" height="15" fill="rgb(229,88,21)" fg:x="563" fg:w="15"/><text x="64.9626%" y="271.50"></text></g><g><title>url::ParseOptions::parse (15 samples, 1.72%)</title><rect x="64.7126%" y="245" width="1.7241%" height="15" fill="rgb(252,204,47)" fg:x="563" fg:w="15"/><text x="64.9626%" y="255.50"></text></g><g><title>url::parser::Parser::after_double_slash (11 samples, 1.26%)</title><rect x="65.1724%" y="229" width="1.2644%" height="15" fill="rgb(208,77,27)" fg:x="567" fg:w="11"/><text x="65.4224%" y="239.50"></text></g><g><title>url::parser::Parser::parse_path_start (1 samples, 0.11%)</title><rect x="66.3218%" y="213" width="0.1149%" height="15" fill="rgb(221,76,26)" fg:x="577" fg:w="1"/><text x="66.5718%" y="223.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.23%)</title><rect x="66.4368%" y="245" width="0.2299%" height="15" fill="rgb(225,139,18)" fg:x="578" fg:w="2"/><text x="66.6868%" y="255.50"></text></g><g><title>core::fmt::write (2 samples, 0.23%)</title><rect x="66.4368%" y="229" width="0.2299%" height="15" fill="rgb(230,137,11)" fg:x="578" fg:w="2"/><text x="66.6868%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4053 (2 samples, 0.23%)</title><rect x="66.4368%" y="213" width="0.2299%" height="15" fill="rgb(212,28,1)" fg:x="578" fg:w="2"/><text x="66.6868%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="66.5517%" y="197" width="0.1149%" height="15" fill="rgb(248,164,17)" fg:x="579" fg:w="1"/><text x="66.8017%" y="207.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.23%)</title><rect x="67.2414%" y="213" width="0.2299%" height="15" fill="rgb(222,171,42)" fg:x="585" fg:w="2"/><text x="67.4914%" y="223.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (2 samples, 0.23%)</title><rect x="67.2414%" y="197" width="0.2299%" height="15" fill="rgb(243,84,45)" fg:x="585" fg:w="2"/><text x="67.4914%" y="207.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (2 samples, 0.23%)</title><rect x="67.2414%" y="181" width="0.2299%" height="15" fill="rgb(252,49,23)" fg:x="585" fg:w="2"/><text x="67.4914%" y="191.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (2 samples, 0.23%)</title><rect x="67.2414%" y="165" width="0.2299%" height="15" fill="rgb(215,19,7)" fg:x="585" fg:w="2"/><text x="67.4914%" y="175.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (2 samples, 0.23%)</title><rect x="67.2414%" y="149" width="0.2299%" height="15" fill="rgb(238,81,41)" fg:x="585" fg:w="2"/><text x="67.4914%" y="159.50"></text></g><g><title>hyper_util::client::legacy::connect::http::ConnectingTcpRemote::connect::{{closure}} (2 samples, 0.23%)</title><rect x="67.2414%" y="133" width="0.2299%" height="15" fill="rgb(210,199,37)" fg:x="585" fg:w="2"/><text x="67.4914%" y="143.50"></text></g><g><title>tokio::net::tcp::socket::TcpSocket::connect::{{closure}} (1 samples, 0.11%)</title><rect x="67.3563%" y="117" width="0.1149%" height="15" fill="rgb(244,192,49)" fg:x="586" fg:w="1"/><text x="67.6063%" y="127.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.11%)</title><rect x="67.4713%" y="197" width="0.1149%" height="15" fill="rgb(226,211,11)" fg:x="587" fg:w="1"/><text x="67.7213%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.34%)</title><rect x="67.5862%" y="197" width="0.3448%" height="15" fill="rgb(236,162,54)" fg:x="588" fg:w="3"/><text x="67.8362%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.34%)</title><rect x="67.5862%" y="181" width="0.3448%" height="15" fill="rgb(220,229,9)" fg:x="588" fg:w="3"/><text x="67.8362%" y="191.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (5 samples, 0.57%)</title><rect x="67.4713%" y="213" width="0.5747%" height="15" fill="rgb(250,87,22)" fg:x="587" fg:w="5"/><text x="67.7213%" y="223.50"></text></g><g><title>hyper_util::client::legacy::pool::Pool&lt;T,K&gt;::reuse (1 samples, 0.11%)</title><rect x="67.9310%" y="197" width="0.1149%" height="15" fill="rgb(239,43,17)" fg:x="591" fg:w="1"/><text x="68.1810%" y="207.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="68.0460%" y="213" width="0.1149%" height="15" fill="rgb(231,177,25)" fg:x="592" fg:w="1"/><text x="68.2960%" y="223.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="68.0460%" y="197" width="0.1149%" height="15" fill="rgb(219,179,1)" fg:x="592" fg:w="1"/><text x="68.2960%" y="207.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.11%)</title><rect x="68.0460%" y="181" width="0.1149%" height="15" fill="rgb(238,219,53)" fg:x="592" fg:w="1"/><text x="68.2960%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.11%)</title><rect x="68.1609%" y="213" width="0.1149%" height="15" fill="rgb(232,167,36)" fg:x="593" fg:w="1"/><text x="68.4109%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="68.1609%" y="197" width="0.1149%" height="15" fill="rgb(244,19,51)" fg:x="593" fg:w="1"/><text x="68.4109%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.1911 (1 samples, 0.11%)</title><rect x="68.1609%" y="181" width="0.1149%" height="15" fill="rgb(224,6,22)" fg:x="593" fg:w="1"/><text x="68.4109%" y="191.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.11%)</title><rect x="68.2759%" y="213" width="0.1149%" height="15" fill="rgb(224,145,5)" fg:x="594" fg:w="1"/><text x="68.5259%" y="223.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.11%)</title><rect x="68.3908%" y="213" width="0.1149%" height="15" fill="rgb(234,130,49)" fg:x="595" fg:w="1"/><text x="68.6408%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.11%)</title><rect x="68.5057%" y="213" width="0.1149%" height="15" fill="rgb(254,6,2)" fg:x="596" fg:w="1"/><text x="68.7557%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (18 samples, 2.07%)</title><rect x="66.6667%" y="245" width="2.0690%" height="15" fill="rgb(208,96,46)" fg:x="580" fg:w="18"/><text x="66.9167%" y="255.50">&lt;..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (18 samples, 2.07%)</title><rect x="66.6667%" y="229" width="2.0690%" height="15" fill="rgb(239,3,39)" fg:x="580" fg:w="18"/><text x="66.9167%" y="239.50">h..</text></g><g><title>http::header::map::VacantEntry&lt;T&gt;::try_insert (1 samples, 0.11%)</title><rect x="68.6207%" y="213" width="0.1149%" height="15" fill="rgb(233,210,1)" fg:x="597" fg:w="1"/><text x="68.8707%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="68.6207%" y="197" width="0.1149%" height="15" fill="rgb(244,137,37)" fg:x="597" fg:w="1"/><text x="68.8707%" y="207.50"></text></g><g><title>url::host::Host::parse (1 samples, 0.11%)</title><rect x="69.3103%" y="213" width="0.1149%" height="15" fill="rgb(240,136,2)" fg:x="603" fg:w="1"/><text x="69.5603%" y="223.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.11%)</title><rect x="69.3103%" y="197" width="0.1149%" height="15" fill="rgb(239,18,37)" fg:x="603" fg:w="1"/><text x="69.5603%" y="207.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.5869 (1 samples, 0.11%)</title><rect x="69.3103%" y="181" width="0.1149%" height="15" fill="rgb(218,185,22)" fg:x="603" fg:w="1"/><text x="69.5603%" y="191.50"></text></g><g><title>url::parser::Parser::parse_path (3 samples, 0.34%)</title><rect x="69.4253%" y="213" width="0.3448%" height="15" fill="rgb(225,218,4)" fg:x="604" fg:w="3"/><text x="69.6753%" y="223.50"></text></g><g><title>url::parser::Parser::check_url_code_point (1 samples, 0.11%)</title><rect x="69.6552%" y="197" width="0.1149%" height="15" fill="rgb(230,182,32)" fg:x="606" fg:w="1"/><text x="69.9052%" y="207.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (30 samples, 3.45%)</title><rect x="66.4368%" y="261" width="3.4483%" height="15" fill="rgb(242,56,43)" fg:x="578" fg:w="30"/><text x="66.6868%" y="271.50">&lt;re..</text></g><g><title>url::ParseOptions::parse (10 samples, 1.15%)</title><rect x="68.7356%" y="245" width="1.1494%" height="15" fill="rgb(233,99,24)" fg:x="598" fg:w="10"/><text x="68.9856%" y="255.50"></text></g><g><title>url::parser::Parser::after_double_slash (9 samples, 1.03%)</title><rect x="68.8506%" y="229" width="1.0345%" height="15" fill="rgb(234,209,42)" fg:x="599" fg:w="9"/><text x="69.1006%" y="239.50"></text></g><g><title>url::parser::Parser::with_query_and_fragment (1 samples, 0.11%)</title><rect x="69.7701%" y="213" width="0.1149%" height="15" fill="rgb(227,7,12)" fg:x="607" fg:w="1"/><text x="70.0201%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (2 samples, 0.23%)</title><rect x="70.2299%" y="245" width="0.2299%" height="15" fill="rgb(245,203,43)" fg:x="611" fg:w="2"/><text x="70.4799%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.11%)</title><rect x="70.3448%" y="229" width="0.1149%" height="15" fill="rgb(238,205,33)" fg:x="612" fg:w="1"/><text x="70.5948%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.11%)</title><rect x="70.3448%" y="213" width="0.1149%" height="15" fill="rgb(231,56,7)" fg:x="612" fg:w="1"/><text x="70.5948%" y="223.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.11%)</title><rect x="71.7241%" y="197" width="0.1149%" height="15" fill="rgb(244,186,29)" fg:x="624" fg:w="1"/><text x="71.9741%" y="207.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.11%)</title><rect x="71.7241%" y="181" width="0.1149%" height="15" fill="rgb(234,111,31)" fg:x="624" fg:w="1"/><text x="71.9741%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::net::addr::&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for (&amp;str,u16)&gt;::to_socket_addrs::{{closure}}&gt;,tokio::runtime::blocking::schedule::BlockingSchedule&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="71.8391%" y="197" width="0.1149%" height="15" fill="rgb(241,149,10)" fg:x="625" fg:w="1"/><text x="72.0891%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.23%)</title><rect x="71.9540%" y="197" width="0.2299%" height="15" fill="rgb(249,206,44)" fg:x="626" fg:w="2"/><text x="72.2040%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.23%)</title><rect x="71.9540%" y="181" width="0.2299%" height="15" fill="rgb(251,153,30)" fg:x="626" fg:w="2"/><text x="72.2040%" y="191.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.11%)</title><rect x="72.0690%" y="165" width="0.1149%" height="15" fill="rgb(239,152,38)" fg:x="627" fg:w="1"/><text x="72.3190%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (2 samples, 0.23%)</title><rect x="72.1839%" y="197" width="0.2299%" height="15" fill="rgb(249,139,47)" fg:x="628" fg:w="2"/><text x="72.4339%" y="207.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2 samples, 0.23%)</title><rect x="72.1839%" y="181" width="0.2299%" height="15" fill="rgb(244,64,35)" fg:x="628" fg:w="2"/><text x="72.4339%" y="191.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 0.92%)</title><rect x="71.6092%" y="213" width="0.9195%" height="15" fill="rgb(216,46,15)" fg:x="623" fg:w="8"/><text x="71.8592%" y="223.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="72.4138%" y="197" width="0.1149%" height="15" fill="rgb(250,74,19)" fg:x="630" fg:w="1"/><text x="72.6638%" y="207.50"></text></g><g><title>__connect (1 samples, 0.11%)</title><rect x="72.5287%" y="213" width="0.1149%" height="15" fill="rgb(249,42,33)" fg:x="631" fg:w="1"/><text x="72.7787%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream::connect&lt;&amp;core::net::socket_addr::SocketAddr&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="72.6437%" y="213" width="0.1149%" height="15" fill="rgb(242,149,17)" fg:x="632" fg:w="1"/><text x="72.8937%" y="223.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.23%)</title><rect x="73.1034%" y="181" width="0.2299%" height="15" fill="rgb(244,29,21)" fg:x="636" fg:w="2"/><text x="73.3534%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="73.2184%" y="165" width="0.1149%" height="15" fill="rgb(220,130,37)" fg:x="637" fg:w="1"/><text x="73.4684%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (7 samples, 0.80%)</title><rect x="72.8736%" y="197" width="0.8046%" height="15" fill="rgb(211,67,2)" fg:x="634" fg:w="7"/><text x="73.1236%" y="207.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (3 samples, 0.34%)</title><rect x="73.3333%" y="181" width="0.3448%" height="15" fill="rgb(235,68,52)" fg:x="638" fg:w="3"/><text x="73.5833%" y="191.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (3 samples, 0.34%)</title><rect x="73.3333%" y="165" width="0.3448%" height="15" fill="rgb(246,142,3)" fg:x="638" fg:w="3"/><text x="73.5833%" y="175.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.34%)</title><rect x="73.3333%" y="149" width="0.3448%" height="15" fill="rgb(241,25,7)" fg:x="638" fg:w="3"/><text x="73.5833%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.23%)</title><rect x="73.4483%" y="133" width="0.2299%" height="15" fill="rgb(242,119,39)" fg:x="639" fg:w="2"/><text x="73.6983%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="73.5632%" y="117" width="0.1149%" height="15" fill="rgb(241,98,45)" fg:x="640" fg:w="1"/><text x="73.8132%" y="127.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (4 samples, 0.46%)</title><rect x="73.6782%" y="197" width="0.4598%" height="15" fill="rgb(254,28,30)" fg:x="641" fg:w="4"/><text x="73.9282%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.11%)</title><rect x="74.0230%" y="181" width="0.1149%" height="15" fill="rgb(241,142,54)" fg:x="644" fg:w="1"/><text x="74.2730%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="74.1379%" y="181" width="0.1149%" height="15" fill="rgb(222,85,15)" fg:x="645" fg:w="1"/><text x="74.3879%" y="191.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (14 samples, 1.61%)</title><rect x="72.7586%" y="213" width="1.6092%" height="15" fill="rgb(210,85,47)" fg:x="633" fg:w="14"/><text x="73.0086%" y="223.50"></text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.23%)</title><rect x="74.1379%" y="197" width="0.2299%" height="15" fill="rgb(224,206,25)" fg:x="645" fg:w="2"/><text x="74.3879%" y="207.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="74.2529%" y="181" width="0.1149%" height="15" fill="rgb(243,201,19)" fg:x="646" fg:w="1"/><text x="74.5029%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.34%)</title><rect x="74.4828%" y="197" width="0.3448%" height="15" fill="rgb(236,59,4)" fg:x="648" fg:w="3"/><text x="74.7328%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.23%)</title><rect x="74.5977%" y="181" width="0.2299%" height="15" fill="rgb(254,179,45)" fg:x="649" fg:w="2"/><text x="74.8477%" y="191.50"></text></g><g><title>redis::connection::connection_setup_pipeline (6 samples, 0.69%)</title><rect x="74.3678%" y="213" width="0.6897%" height="15" fill="rgb(226,14,10)" fg:x="647" fg:w="6"/><text x="74.6178%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.23%)</title><rect x="74.8276%" y="197" width="0.2299%" height="15" fill="rgb(244,27,41)" fg:x="651" fg:w="2"/><text x="75.0776%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.23%)</title><rect x="74.8276%" y="181" width="0.2299%" height="15" fill="rgb(235,35,32)" fg:x="651" fg:w="2"/><text x="75.0776%" y="191.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (2 samples, 0.23%)</title><rect x="75.0575%" y="213" width="0.2299%" height="15" fill="rgb(218,68,31)" fg:x="653" fg:w="2"/><text x="75.3075%" y="223.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (2 samples, 0.23%)</title><rect x="75.0575%" y="197" width="0.2299%" height="15" fill="rgb(207,120,37)" fg:x="653" fg:w="2"/><text x="75.3075%" y="207.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (2 samples, 0.23%)</title><rect x="75.2874%" y="213" width="0.2299%" height="15" fill="rgb(227,98,0)" fg:x="655" fg:w="2"/><text x="75.5374%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.23%)</title><rect x="75.2874%" y="197" width="0.2299%" height="15" fill="rgb(207,7,3)" fg:x="655" fg:w="2"/><text x="75.5374%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="75.4023%" y="181" width="0.1149%" height="15" fill="rgb(206,98,19)" fg:x="656" fg:w="1"/><text x="75.6523%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.23%)</title><rect x="75.5172%" y="213" width="0.2299%" height="15" fill="rgb(217,5,26)" fg:x="657" fg:w="2"/><text x="75.7672%" y="223.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.11%)</title><rect x="75.6322%" y="197" width="0.1149%" height="15" fill="rgb(235,190,38)" fg:x="658" fg:w="1"/><text x="75.8822%" y="207.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (47 samples, 5.40%)</title><rect x="70.4598%" y="245" width="5.4023%" height="15" fill="rgb(247,86,24)" fg:x="613" fg:w="47"/><text x="70.7098%" y="255.50">redis::..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (46 samples, 5.29%)</title><rect x="70.5747%" y="229" width="5.2874%" height="15" fill="rgb(205,101,16)" fg:x="614" fg:w="46"/><text x="70.8247%" y="239.50">redis:..</text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.11%)</title><rect x="75.7471%" y="213" width="0.1149%" height="15" fill="rgb(246,168,33)" fg:x="659" fg:w="1"/><text x="75.9971%" y="223.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (4 samples, 0.46%)</title><rect x="76.2069%" y="213" width="0.4598%" height="15" fill="rgb(231,114,1)" fg:x="663" fg:w="4"/><text x="76.4569%" y="223.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="76.4368%" y="197" width="0.2299%" height="15" fill="rgb(207,184,53)" fg:x="665" fg:w="2"/><text x="76.6868%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="76.5517%" y="181" width="0.1149%" height="15" fill="rgb(224,95,51)" fg:x="666" fg:w="1"/><text x="76.8017%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (6 samples, 0.69%)</title><rect x="76.0920%" y="229" width="0.6897%" height="15" fill="rgb(212,188,45)" fg:x="662" fg:w="6"/><text x="76.3420%" y="239.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.11%)</title><rect x="76.6667%" y="213" width="0.1149%" height="15" fill="rgb(223,154,38)" fg:x="667" fg:w="1"/><text x="76.9167%" y="223.50"></text></g><g><title>&lt;redis::types::Value as core::fmt::Debug&gt;::fmt (1 samples, 0.11%)</title><rect x="76.8966%" y="197" width="0.1149%" height="15" fill="rgb(251,22,52)" fg:x="669" fg:w="1"/><text x="77.1466%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.34%)</title><rect x="76.7816%" y="229" width="0.3448%" height="15" fill="rgb(229,209,22)" fg:x="668" fg:w="3"/><text x="77.0316%" y="239.50"></text></g><g><title>core::fmt::write (3 samples, 0.34%)</title><rect x="76.7816%" y="213" width="0.3448%" height="15" fill="rgb(234,138,34)" fg:x="668" fg:w="3"/><text x="77.0316%" y="223.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.11%)</title><rect x="77.0115%" y="197" width="0.1149%" height="15" fill="rgb(212,95,11)" fg:x="670" fg:w="1"/><text x="77.2615%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.1911 (1 samples, 0.11%)</title><rect x="77.0115%" y="181" width="0.1149%" height="15" fill="rgb(240,179,47)" fg:x="670" fg:w="1"/><text x="77.2615%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (64 samples, 7.36%)</title><rect x="69.8851%" y="261" width="7.3563%" height="15" fill="rgb(240,163,11)" fg:x="608" fg:w="64"/><text x="70.1351%" y="271.50">&lt;rinha_de_..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (12 samples, 1.38%)</title><rect x="75.8621%" y="245" width="1.3793%" height="15" fill="rgb(236,37,12)" fg:x="660" fg:w="12"/><text x="76.1121%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="77.1264%" y="229" width="0.1149%" height="15" fill="rgb(232,164,16)" fg:x="671" fg:w="1"/><text x="77.3764%" y="239.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (3 samples, 0.34%)</title><rect x="77.9310%" y="229" width="0.3448%" height="15" fill="rgb(244,205,15)" fg:x="678" fg:w="3"/><text x="78.1810%" y="239.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (3 samples, 0.34%)</title><rect x="77.9310%" y="213" width="0.3448%" height="15" fill="rgb(223,117,47)" fg:x="678" fg:w="3"/><text x="78.1810%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="78.1609%" y="197" width="0.1149%" height="15" fill="rgb(244,107,35)" fg:x="680" fg:w="1"/><text x="78.4109%" y="207.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.11%)</title><rect x="78.2759%" y="213" width="0.1149%" height="15" fill="rgb(205,140,8)" fg:x="681" fg:w="1"/><text x="78.5259%" y="223.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (9 samples, 1.03%)</title><rect x="77.4713%" y="245" width="1.0345%" height="15" fill="rgb(228,84,46)" fg:x="674" fg:w="9"/><text x="77.7213%" y="255.50"></text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.23%)</title><rect x="78.2759%" y="229" width="0.2299%" height="15" fill="rgb(254,188,9)" fg:x="681" fg:w="2"/><text x="78.5259%" y="239.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="78.3908%" y="213" width="0.1149%" height="15" fill="rgb(206,112,54)" fg:x="682" fg:w="1"/><text x="78.6408%" y="223.50"></text></g><g><title>&lt;time::date::Date as powerfmt::smart_display::SmartDisplay&gt;::metadata (1 samples, 0.11%)</title><rect x="78.5057%" y="229" width="0.1149%" height="15" fill="rgb(216,84,49)" fg:x="683" fg:w="1"/><text x="78.7557%" y="239.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="78.8506%" y="213" width="0.1149%" height="15" fill="rgb(214,194,35)" fg:x="686" fg:w="1"/><text x="79.1006%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="78.8506%" y="197" width="0.1149%" height="15" fill="rgb(249,28,3)" fg:x="686" fg:w="1"/><text x="79.1006%" y="207.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.11%)</title><rect x="78.8506%" y="181" width="0.1149%" height="15" fill="rgb(222,56,52)" fg:x="686" fg:w="1"/><text x="79.1006%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.11%)</title><rect x="78.8506%" y="165" width="0.1149%" height="15" fill="rgb(245,217,50)" fg:x="686" fg:w="1"/><text x="79.1006%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.11%)</title><rect x="78.8506%" y="149" width="0.1149%" height="15" fill="rgb(213,201,24)" fg:x="686" fg:w="1"/><text x="79.1006%" y="159.50"></text></g><g><title>&lt;core::fmt::Formatter as powerfmt::ext::FormatterExt&gt;::pad_with_width (1 samples, 0.11%)</title><rect x="78.9655%" y="197" width="0.1149%" height="15" fill="rgb(248,116,28)" fg:x="687" fg:w="1"/><text x="79.2155%" y="207.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="79.1954%" y="181" width="0.1149%" height="15" fill="rgb(219,72,43)" fg:x="689" fg:w="1"/><text x="79.4454%" y="191.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (8 samples, 0.92%)</title><rect x="78.5057%" y="245" width="0.9195%" height="15" fill="rgb(209,138,14)" fg:x="683" fg:w="8"/><text x="78.7557%" y="255.50"></text></g><g><title>core::fmt::write (7 samples, 0.80%)</title><rect x="78.6207%" y="229" width="0.8046%" height="15" fill="rgb(222,18,33)" fg:x="684" fg:w="7"/><text x="78.8707%" y="239.50"></text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (4 samples, 0.46%)</title><rect x="78.9655%" y="213" width="0.4598%" height="15" fill="rgb(213,199,7)" fg:x="687" fg:w="4"/><text x="79.2155%" y="223.50"></text></g><g><title>core::fmt::write (3 samples, 0.34%)</title><rect x="79.0805%" y="197" width="0.3448%" height="15" fill="rgb(250,110,10)" fg:x="688" fg:w="3"/><text x="79.3305%" y="207.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="79.3103%" y="181" width="0.1149%" height="15" fill="rgb(248,123,6)" fg:x="690" fg:w="1"/><text x="79.5603%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.11%)</title><rect x="79.3103%" y="165" width="0.1149%" height="15" fill="rgb(206,91,31)" fg:x="690" fg:w="1"/><text x="79.5603%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4122 (1 samples, 0.11%)</title><rect x="79.3103%" y="149" width="0.1149%" height="15" fill="rgb(211,154,13)" fg:x="690" fg:w="1"/><text x="79.5603%" y="159.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.34%)</title><rect x="79.4253%" y="245" width="0.3448%" height="15" fill="rgb(225,148,7)" fg:x="691" fg:w="3"/><text x="79.6753%" y="255.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="79.6552%" y="229" width="0.1149%" height="15" fill="rgb(220,160,43)" fg:x="693" fg:w="1"/><text x="79.9052%" y="239.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.11%)</title><rect x="79.6552%" y="213" width="0.1149%" height="15" fill="rgb(213,52,39)" fg:x="693" fg:w="1"/><text x="79.9052%" y="223.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (1 samples, 0.11%)</title><rect x="79.6552%" y="197" width="0.1149%" height="15" fill="rgb(243,137,7)" fg:x="693" fg:w="1"/><text x="79.9052%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.23%)</title><rect x="79.7701%" y="245" width="0.2299%" height="15" fill="rgb(230,79,13)" fg:x="694" fg:w="2"/><text x="80.0201%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="79.8851%" y="229" width="0.1149%" height="15" fill="rgb(247,105,23)" fg:x="695" fg:w="1"/><text x="80.1351%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.11%)</title><rect x="80.0000%" y="245" width="0.1149%" height="15" fill="rgb(223,179,41)" fg:x="696" fg:w="1"/><text x="80.2500%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="80.8046%" y="213" width="0.1149%" height="15" fill="rgb(218,9,34)" fg:x="703" fg:w="1"/><text x="81.0546%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 0.57%)</title><rect x="80.9195%" y="213" width="0.5747%" height="15" fill="rgb(222,106,8)" fg:x="704" fg:w="5"/><text x="81.1695%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.23%)</title><rect x="81.2644%" y="197" width="0.2299%" height="15" fill="rgb(211,220,0)" fg:x="707" fg:w="2"/><text x="81.5144%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.11%)</title><rect x="81.3793%" y="181" width="0.1149%" height="15" fill="rgb(229,52,16)" fg:x="708" fg:w="1"/><text x="81.6293%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream::connect&lt;&amp;core::net::socket_addr::SocketAddr&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="81.4943%" y="213" width="0.1149%" height="15" fill="rgb(212,155,18)" fg:x="709" fg:w="1"/><text x="81.7443%" y="223.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.11%)</title><rect x="81.8391%" y="181" width="0.1149%" height="15" fill="rgb(242,21,14)" fg:x="712" fg:w="1"/><text x="82.0891%" y="191.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (9 samples, 1.03%)</title><rect x="81.7241%" y="197" width="1.0345%" height="15" fill="rgb(222,19,48)" fg:x="711" fg:w="9"/><text x="81.9741%" y="207.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (7 samples, 0.80%)</title><rect x="81.9540%" y="181" width="0.8046%" height="15" fill="rgb(232,45,27)" fg:x="713" fg:w="7"/><text x="82.2040%" y="191.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (4 samples, 0.46%)</title><rect x="82.2989%" y="165" width="0.4598%" height="15" fill="rgb(249,103,42)" fg:x="716" fg:w="4"/><text x="82.5489%" y="175.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.34%)</title><rect x="82.4138%" y="149" width="0.3448%" height="15" fill="rgb(246,81,33)" fg:x="717" fg:w="3"/><text x="82.6638%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.23%)</title><rect x="82.5287%" y="133" width="0.2299%" height="15" fill="rgb(252,33,42)" fg:x="718" fg:w="2"/><text x="82.7787%" y="143.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.11%)</title><rect x="82.6437%" y="117" width="0.1149%" height="15" fill="rgb(209,212,41)" fg:x="719" fg:w="1"/><text x="82.8937%" y="127.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (11 samples, 1.26%)</title><rect x="81.6092%" y="213" width="1.2644%" height="15" fill="rgb(207,154,6)" fg:x="710" fg:w="11"/><text x="81.8592%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.11%)</title><rect x="82.7586%" y="197" width="0.1149%" height="15" fill="rgb(223,64,47)" fg:x="720" fg:w="1"/><text x="83.0086%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="83.1034%" y="197" width="0.1149%" height="15" fill="rgb(211,161,38)" fg:x="723" fg:w="1"/><text x="83.3534%" y="207.50"></text></g><g><title>redis::connection::connection_setup_pipeline (4 samples, 0.46%)</title><rect x="82.8736%" y="213" width="0.4598%" height="15" fill="rgb(219,138,40)" fg:x="721" fg:w="4"/><text x="83.1236%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.11%)</title><rect x="83.2184%" y="197" width="0.1149%" height="15" fill="rgb(241,228,46)" fg:x="724" fg:w="1"/><text x="83.4684%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="83.2184%" y="181" width="0.1149%" height="15" fill="rgb(223,209,38)" fg:x="724" fg:w="1"/><text x="83.4684%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="83.2184%" y="165" width="0.1149%" height="15" fill="rgb(236,164,45)" fg:x="724" fg:w="1"/><text x="83.4684%" y="175.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.11%)</title><rect x="83.3333%" y="213" width="0.1149%" height="15" fill="rgb(231,15,5)" fg:x="725" fg:w="1"/><text x="83.5833%" y="223.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.11%)</title><rect x="83.3333%" y="197" width="0.1149%" height="15" fill="rgb(252,35,15)" fg:x="725" fg:w="1"/><text x="83.5833%" y="207.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (30 samples, 3.45%)</title><rect x="80.1149%" y="245" width="3.4483%" height="15" fill="rgb(248,181,18)" fg:x="697" fg:w="30"/><text x="80.3649%" y="255.50">red..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (30 samples, 3.45%)</title><rect x="80.1149%" y="229" width="3.4483%" height="15" fill="rgb(233,39,42)" fg:x="697" fg:w="30"/><text x="80.3649%" y="239.50">red..</text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.11%)</title><rect x="83.4483%" y="213" width="0.1149%" height="15" fill="rgb(238,110,33)" fg:x="726" fg:w="1"/><text x="83.6983%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="83.4483%" y="197" width="0.1149%" height="15" fill="rgb(233,195,10)" fg:x="726" fg:w="1"/><text x="83.6983%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="83.4483%" y="181" width="0.1149%" height="15" fill="rgb(254,105,3)" fg:x="726" fg:w="1"/><text x="83.6983%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (58 samples, 6.67%)</title><rect x="77.2414%" y="261" width="6.6667%" height="15" fill="rgb(221,225,9)" fg:x="672" fg:w="58"/><text x="77.4914%" y="271.50">&lt;rinha_de..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (3 samples, 0.34%)</title><rect x="83.5632%" y="245" width="0.3448%" height="15" fill="rgb(224,227,45)" fg:x="727" fg:w="3"/><text x="83.8132%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4121 (2 samples, 0.23%)</title><rect x="83.6782%" y="229" width="0.2299%" height="15" fill="rgb(229,198,43)" fg:x="728" fg:w="2"/><text x="83.9282%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.23%)</title><rect x="83.6782%" y="213" width="0.2299%" height="15" fill="rgb(206,209,35)" fg:x="728" fg:w="2"/><text x="83.9282%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="83.7931%" y="197" width="0.1149%" height="15" fill="rgb(245,195,53)" fg:x="729" fg:w="1"/><text x="84.0431%" y="207.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.11%)</title><rect x="84.5977%" y="229" width="0.1149%" height="15" fill="rgb(240,92,26)" fg:x="736" fg:w="1"/><text x="84.8477%" y="239.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.11%)</title><rect x="84.5977%" y="213" width="0.1149%" height="15" fill="rgb(207,40,23)" fg:x="736" fg:w="1"/><text x="84.8477%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.34%)</title><rect x="84.4828%" y="245" width="0.3448%" height="15" fill="rgb(223,111,35)" fg:x="735" fg:w="3"/><text x="84.7328%" y="255.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (1 samples, 0.11%)</title><rect x="84.7126%" y="229" width="0.1149%" height="15" fill="rgb(229,147,28)" fg:x="737" fg:w="1"/><text x="84.9626%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="84.8276%" y="245" width="0.1149%" height="15" fill="rgb(211,29,28)" fg:x="738" fg:w="1"/><text x="85.0776%" y="255.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.11%)</title><rect x="84.8276%" y="229" width="0.1149%" height="15" fill="rgb(228,72,33)" fg:x="738" fg:w="1"/><text x="85.0776%" y="239.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (7 samples, 0.80%)</title><rect x="85.8621%" y="213" width="0.8046%" height="15" fill="rgb(205,214,31)" fg:x="747" fg:w="7"/><text x="86.1121%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.34%)</title><rect x="86.3218%" y="197" width="0.3448%" height="15" fill="rgb(224,111,15)" fg:x="751" fg:w="3"/><text x="86.5718%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.11%)</title><rect x="86.5517%" y="181" width="0.1149%" height="15" fill="rgb(253,21,26)" fg:x="753" fg:w="1"/><text x="86.8017%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::connection::connect_simple&lt;redis::aio::tokio::Tokio&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="86.6667%" y="213" width="0.1149%" height="15" fill="rgb(245,139,43)" fg:x="754" fg:w="1"/><text x="86.9167%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::io::poll_evented::PollEvented&lt;mio::net::tcp::stream::TcpStream&gt;&gt; (2 samples, 0.23%)</title><rect x="86.7816%" y="213" width="0.2299%" height="15" fill="rgb(252,170,7)" fg:x="755" fg:w="2"/><text x="87.0316%" y="223.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 0.34%)</title><rect x="87.4713%" y="197" width="0.3448%" height="15" fill="rgb(231,118,14)" fg:x="761" fg:w="3"/><text x="87.7213%" y="207.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (3 samples, 0.34%)</title><rect x="87.4713%" y="181" width="0.3448%" height="15" fill="rgb(238,83,0)" fg:x="761" fg:w="3"/><text x="87.7213%" y="191.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (2 samples, 0.23%)</title><rect x="87.5862%" y="165" width="0.2299%" height="15" fill="rgb(221,39,39)" fg:x="762" fg:w="2"/><text x="87.8362%" y="175.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="87.7011%" y="149" width="0.1149%" height="15" fill="rgb(222,119,46)" fg:x="763" fg:w="1"/><text x="87.9511%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (6 samples, 0.69%)</title><rect x="87.8161%" y="197" width="0.6897%" height="15" fill="rgb(222,165,49)" fg:x="764" fg:w="6"/><text x="88.0661%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.11%)</title><rect x="88.3908%" y="181" width="0.1149%" height="15" fill="rgb(219,113,52)" fg:x="769" fg:w="1"/><text x="88.6408%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="88.3908%" y="165" width="0.1149%" height="15" fill="rgb(214,7,15)" fg:x="769" fg:w="1"/><text x="88.6408%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="88.3908%" y="149" width="0.1149%" height="15" fill="rgb(235,32,4)" fg:x="769" fg:w="1"/><text x="88.6408%" y="159.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.11%)</title><rect x="88.5057%" y="181" width="0.1149%" height="15" fill="rgb(238,90,54)" fg:x="770" fg:w="1"/><text x="88.7557%" y="191.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (15 samples, 1.72%)</title><rect x="87.0115%" y="213" width="1.7241%" height="15" fill="rgb(213,208,19)" fg:x="757" fg:w="15"/><text x="87.2615%" y="223.50"></text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.23%)</title><rect x="88.5057%" y="197" width="0.2299%" height="15" fill="rgb(233,156,4)" fg:x="770" fg:w="2"/><text x="88.7557%" y="207.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="88.6207%" y="181" width="0.1149%" height="15" fill="rgb(207,194,5)" fg:x="771" fg:w="1"/><text x="88.8707%" y="191.50"></text></g><g><title>redis::connection::connection_setup_pipeline (3 samples, 0.34%)</title><rect x="88.7356%" y="213" width="0.3448%" height="15" fill="rgb(206,111,30)" fg:x="772" fg:w="3"/><text x="88.9856%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.34%)</title><rect x="88.7356%" y="197" width="0.3448%" height="15" fill="rgb(243,70,54)" fg:x="772" fg:w="3"/><text x="88.9856%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.34%)</title><rect x="88.7356%" y="181" width="0.3448%" height="15" fill="rgb(242,28,8)" fg:x="772" fg:w="3"/><text x="88.9856%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.23%)</title><rect x="88.8506%" y="165" width="0.2299%" height="15" fill="rgb(219,106,18)" fg:x="773" fg:w="2"/><text x="89.1006%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.11%)</title><rect x="89.0805%" y="213" width="0.1149%" height="15" fill="rgb(244,222,10)" fg:x="775" fg:w="1"/><text x="89.3305%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="89.0805%" y="197" width="0.1149%" height="15" fill="rgb(236,179,52)" fg:x="775" fg:w="1"/><text x="89.3305%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="89.0805%" y="181" width="0.1149%" height="15" fill="rgb(213,23,39)" fg:x="775" fg:w="1"/><text x="89.3305%" y="191.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (39 samples, 4.48%)</title><rect x="84.9425%" y="245" width="4.4828%" height="15" fill="rgb(238,48,10)" fg:x="739" fg:w="39"/><text x="85.1925%" y="255.50">redis..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (36 samples, 4.14%)</title><rect x="85.2874%" y="229" width="4.1379%" height="15" fill="rgb(251,196,23)" fg:x="742" fg:w="36"/><text x="85.5374%" y="239.50">redis..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.23%)</title><rect x="89.1954%" y="213" width="0.2299%" height="15" fill="rgb(250,152,24)" fg:x="776" fg:w="2"/><text x="89.4454%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="89.3103%" y="197" width="0.1149%" height="15" fill="rgb(209,150,17)" fg:x="777" fg:w="1"/><text x="89.5603%" y="207.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (1 samples, 0.11%)</title><rect x="89.8851%" y="229" width="0.1149%" height="15" fill="rgb(234,202,34)" fg:x="782" fg:w="1"/><text x="90.1351%" y="239.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (5 samples, 0.57%)</title><rect x="90.0000%" y="213" width="0.5747%" height="15" fill="rgb(253,148,53)" fg:x="783" fg:w="5"/><text x="90.2500%" y="223.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (4 samples, 0.46%)</title><rect x="90.1149%" y="197" width="0.4598%" height="15" fill="rgb(218,129,16)" fg:x="784" fg:w="4"/><text x="90.3649%" y="207.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (6 samples, 0.69%)</title><rect x="90.0000%" y="229" width="0.6897%" height="15" fill="rgb(216,85,19)" fg:x="783" fg:w="6"/><text x="90.2500%" y="239.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="90.5747%" y="213" width="0.1149%" height="15" fill="rgb(235,228,7)" fg:x="788" fg:w="1"/><text x="90.8247%" y="223.50"></text></g><g><title>redis::types::Value::extract_error (2 samples, 0.23%)</title><rect x="90.6897%" y="229" width="0.2299%" height="15" fill="rgb(245,175,0)" fg:x="789" fg:w="2"/><text x="90.9397%" y="239.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (62 samples, 7.13%)</title><rect x="83.9080%" y="261" width="7.1264%" height="15" fill="rgb(208,168,36)" fg:x="730" fg:w="62"/><text x="84.1580%" y="271.50">&lt;rinha_de_..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (14 samples, 1.61%)</title><rect x="89.4253%" y="245" width="1.6092%" height="15" fill="rgb(246,171,24)" fg:x="778" fg:w="14"/><text x="89.6753%" y="255.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.11%)</title><rect x="90.9195%" y="229" width="0.1149%" height="15" fill="rgb(215,142,24)" fg:x="791" fg:w="1"/><text x="91.1695%" y="239.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.11%)</title><rect x="91.0345%" y="245" width="0.1149%" height="15" fill="rgb(250,187,7)" fg:x="792" fg:w="1"/><text x="91.2845%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.11%)</title><rect x="91.0345%" y="229" width="0.1149%" height="15" fill="rgb(228,66,33)" fg:x="792" fg:w="1"/><text x="91.2845%" y="239.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (1 samples, 0.11%)</title><rect x="91.3793%" y="213" width="0.1149%" height="15" fill="rgb(234,215,21)" fg:x="795" fg:w="1"/><text x="91.6293%" y="223.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.11%)</title><rect x="91.3793%" y="197" width="0.1149%" height="15" fill="rgb(222,191,20)" fg:x="795" fg:w="1"/><text x="91.6293%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.11%)</title><rect x="91.3793%" y="181" width="0.1149%" height="15" fill="rgb(245,79,54)" fg:x="795" fg:w="1"/><text x="91.6293%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="91.3793%" y="165" width="0.1149%" height="15" fill="rgb(240,10,37)" fg:x="795" fg:w="1"/><text x="91.6293%" y="175.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (4 samples, 0.46%)</title><rect x="91.1494%" y="245" width="0.4598%" height="15" fill="rgb(214,192,32)" fg:x="793" fg:w="4"/><text x="91.3994%" y="255.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (4 samples, 0.46%)</title><rect x="91.1494%" y="229" width="0.4598%" height="15" fill="rgb(209,36,54)" fg:x="793" fg:w="4"/><text x="91.3994%" y="239.50"></text></g><g><title>redis::connection::connection_setup_pipeline (1 samples, 0.11%)</title><rect x="91.4943%" y="213" width="0.1149%" height="15" fill="rgb(220,10,11)" fg:x="796" fg:w="1"/><text x="91.7443%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="91.4943%" y="197" width="0.1149%" height="15" fill="rgb(221,106,17)" fg:x="796" fg:w="1"/><text x="91.7443%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="91.4943%" y="181" width="0.1149%" height="15" fill="rgb(251,142,44)" fg:x="796" fg:w="1"/><text x="91.7443%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (7 samples, 0.80%)</title><rect x="91.0345%" y="261" width="0.8046%" height="15" fill="rgb(238,13,15)" fg:x="792" fg:w="7"/><text x="91.2845%" y="271.50"></text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (2 samples, 0.23%)</title><rect x="91.6092%" y="245" width="0.2299%" height="15" fill="rgb(208,107,27)" fg:x="797" fg:w="2"/><text x="91.8592%" y="255.50"></text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (2 samples, 0.23%)</title><rect x="91.6092%" y="229" width="0.2299%" height="15" fill="rgb(205,136,37)" fg:x="797" fg:w="2"/><text x="91.8592%" y="239.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (2 samples, 0.23%)</title><rect x="91.6092%" y="213" width="0.2299%" height="15" fill="rgb(250,205,27)" fg:x="797" fg:w="2"/><text x="91.8592%" y="223.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (2 samples, 0.23%)</title><rect x="91.6092%" y="197" width="0.2299%" height="15" fill="rgb(210,80,43)" fg:x="797" fg:w="2"/><text x="91.8592%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="91.6092%" y="181" width="0.2299%" height="15" fill="rgb(247,160,36)" fg:x="797" fg:w="2"/><text x="91.8592%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.11%)</title><rect x="91.8391%" y="261" width="0.1149%" height="15" fill="rgb(234,13,49)" fg:x="799" fg:w="1"/><text x="92.0891%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="91.9540%" y="261" width="0.1149%" height="15" fill="rgb(234,122,0)" fg:x="800" fg:w="1"/><text x="92.2040%" y="271.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.11%)</title><rect x="92.1839%" y="245" width="0.1149%" height="15" fill="rgb(207,146,38)" fg:x="802" fg:w="1"/><text x="92.4339%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.11%)</title><rect x="92.2989%" y="245" width="0.1149%" height="15" fill="rgb(207,177,25)" fg:x="803" fg:w="1"/><text x="92.5489%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (4 samples, 0.46%)</title><rect x="92.0690%" y="261" width="0.4598%" height="15" fill="rgb(211,178,42)" fg:x="801" fg:w="4"/><text x="92.3190%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::HyperService&gt; (1 samples, 0.11%)</title><rect x="92.4138%" y="245" width="0.1149%" height="15" fill="rgb(230,69,54)" fg:x="804" fg:w="1"/><text x="92.6638%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (4 samples, 0.46%)</title><rect x="92.5287%" y="261" width="0.4598%" height="15" fill="rgb(214,135,41)" fg:x="805" fg:w="4"/><text x="92.7787%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (3 samples, 0.34%)</title><rect x="92.6437%" y="245" width="0.3448%" height="15" fill="rgb(237,67,25)" fg:x="806" fg:w="3"/><text x="92.8937%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.11%)</title><rect x="92.8736%" y="229" width="0.1149%" height="15" fill="rgb(222,189,50)" fg:x="808" fg:w="1"/><text x="93.1236%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.11%)</title><rect x="92.8736%" y="213" width="0.1149%" height="15" fill="rgb(245,148,34)" fg:x="808" fg:w="1"/><text x="93.1236%" y="223.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (2 samples, 0.23%)</title><rect x="92.9885%" y="261" width="0.2299%" height="15" fill="rgb(222,29,6)" fg:x="809" fg:w="2"/><text x="93.2385%" y="271.50"></text></g><g><title>url::Url::username (1 samples, 0.11%)</title><rect x="93.1034%" y="245" width="0.1149%" height="15" fill="rgb(221,189,43)" fg:x="810" fg:w="1"/><text x="93.3534%" y="255.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="93.3333%" y="245" width="0.1149%" height="15" fill="rgb(207,36,27)" fg:x="812" fg:w="1"/><text x="93.5833%" y="255.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (4 samples, 0.46%)</title><rect x="93.4483%" y="245" width="0.4598%" height="15" fill="rgb(217,90,24)" fg:x="813" fg:w="4"/><text x="93.6983%" y="255.50"></text></g><g><title>url::ParseOptions::parse (2 samples, 0.23%)</title><rect x="93.6782%" y="229" width="0.2299%" height="15" fill="rgb(224,66,35)" fg:x="815" fg:w="2"/><text x="93.9282%" y="239.50"></text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 0.11%)</title><rect x="93.7931%" y="213" width="0.1149%" height="15" fill="rgb(221,13,50)" fg:x="816" fg:w="1"/><text x="94.0431%" y="223.50"></text></g><g><title>url::host::Host::parse (1 samples, 0.11%)</title><rect x="93.7931%" y="197" width="0.1149%" height="15" fill="rgb(236,68,49)" fg:x="816" fg:w="1"/><text x="94.0431%" y="207.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.11%)</title><rect x="93.7931%" y="181" width="0.1149%" height="15" fill="rgb(229,146,28)" fg:x="816" fg:w="1"/><text x="94.0431%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="93.9080%" y="245" width="0.1149%" height="15" fill="rgb(225,31,38)" fg:x="817" fg:w="1"/><text x="94.1580%" y="255.50"></text></g><g><title>bytes::bytes::Bytes::split_to (1 samples, 0.11%)</title><rect x="94.1379%" y="229" width="0.1149%" height="15" fill="rgb(250,208,3)" fg:x="819" fg:w="1"/><text x="94.3879%" y="239.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.11%)</title><rect x="94.1379%" y="213" width="0.1149%" height="15" fill="rgb(246,54,23)" fg:x="819" fg:w="1"/><text x="94.3879%" y="223.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (1 samples, 0.11%)</title><rect x="94.1379%" y="197" width="0.1149%" height="15" fill="rgb(243,76,11)" fg:x="819" fg:w="1"/><text x="94.3879%" y="207.50"></text></g><g><title>http::uri::Uri::from_shared (3 samples, 0.34%)</title><rect x="94.0230%" y="245" width="0.3448%" height="15" fill="rgb(245,21,50)" fg:x="818" fg:w="3"/><text x="94.2730%" y="255.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.11%)</title><rect x="94.2529%" y="229" width="0.1149%" height="15" fill="rgb(228,9,43)" fg:x="820" fg:w="1"/><text x="94.5029%" y="239.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.1930 (1 samples, 0.11%)</title><rect x="94.3678%" y="197" width="0.1149%" height="15" fill="rgb(208,100,47)" fg:x="821" fg:w="1"/><text x="94.6178%" y="207.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (12 samples, 1.38%)</title><rect x="93.2184%" y="261" width="1.3793%" height="15" fill="rgb(232,26,8)" fg:x="811" fg:w="12"/><text x="93.4684%" y="271.50"></text></g><g><title>reqwest::proxy::Matcher::intercept (2 samples, 0.23%)</title><rect x="94.3678%" y="245" width="0.2299%" height="15" fill="rgb(216,166,38)" fg:x="821" fg:w="2"/><text x="94.6178%" y="255.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (2 samples, 0.23%)</title><rect x="94.3678%" y="229" width="0.2299%" height="15" fill="rgb(251,202,51)" fg:x="821" fg:w="2"/><text x="94.6178%" y="239.50"></text></g><g><title>http::uri::authority::host (2 samples, 0.23%)</title><rect x="94.3678%" y="213" width="0.2299%" height="15" fill="rgb(254,216,34)" fg:x="821" fg:w="2"/><text x="94.6178%" y="223.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.11%)</title><rect x="94.4828%" y="197" width="0.1149%" height="15" fill="rgb(251,32,27)" fg:x="822" fg:w="1"/><text x="94.7328%" y="207.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (1 samples, 0.11%)</title><rect x="94.4828%" y="181" width="0.1149%" height="15" fill="rgb(208,127,28)" fg:x="822" fg:w="1"/><text x="94.7328%" y="191.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.11%)</title><rect x="94.5977%" y="261" width="0.1149%" height="15" fill="rgb(224,137,22)" fg:x="823" fg:w="1"/><text x="94.8477%" y="271.50"></text></g><g><title>time::serde::rfc3339::option::serialize (1 samples, 0.11%)</title><rect x="94.7126%" y="261" width="0.1149%" height="15" fill="rgb(254,70,32)" fg:x="824" fg:w="1"/><text x="94.9626%" y="271.50"></text></g><g><title>time::formatting::format_number_pad_zero (1 samples, 0.11%)</title><rect x="94.7126%" y="245" width="0.1149%" height="15" fill="rgb(229,75,37)" fg:x="824" fg:w="1"/><text x="94.9626%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="94.7126%" y="229" width="0.1149%" height="15" fill="rgb(252,64,23)" fg:x="824" fg:w="1"/><text x="94.9626%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="94.7126%" y="213" width="0.1149%" height="15" fill="rgb(232,162,48)" fg:x="824" fg:w="1"/><text x="94.9626%" y="223.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (274 samples, 31.49%)</title><rect x="63.4483%" y="277" width="31.4943%" height="15" fill="rgb(246,160,12)" fg:x="552" fg:w="274"/><text x="63.6983%" y="287.50">rinha_de_backend::infrastructure::workers::payment_..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (1 samples, 0.11%)</title><rect x="94.8276%" y="261" width="0.1149%" height="15" fill="rgb(247,166,0)" fg:x="825" fg:w="1"/><text x="95.0776%" y="271.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::processor_health_monitor_worker::processor_health_monitor_worker::{{closure}} (1 samples, 0.11%)</title><rect x="94.9425%" y="277" width="0.1149%" height="15" fill="rgb(249,219,21)" fg:x="826" fg:w="1"/><text x="95.1925%" y="287.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="94.9425%" y="261" width="0.1149%" height="15" fill="rgb(205,209,3)" fg:x="826" fg:w="1"/><text x="95.1925%" y="271.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (1 samples, 0.11%)</title><rect x="94.9425%" y="245" width="0.1149%" height="15" fill="rgb(243,44,1)" fg:x="826" fg:w="1"/><text x="95.1925%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (2 samples, 0.23%)</title><rect x="95.4023%" y="229" width="0.2299%" height="15" fill="rgb(206,159,16)" fg:x="830" fg:w="2"/><text x="95.6523%" y="239.50"></text></g><g><title>rinha-de-backen (465 samples, 53.45%)</title><rect x="42.4138%" y="389" width="53.4483%" height="15" fill="rgb(244,77,30)" fg:x="369" fg:w="465"/><text x="42.6638%" y="399.50">rinha-de-backen</text></g><g><title>_start (465 samples, 53.45%)</title><rect x="42.4138%" y="373" width="53.4483%" height="15" fill="rgb(218,69,12)" fg:x="369" fg:w="465"/><text x="42.6638%" y="383.50">_start</text></g><g><title>__libc_start_main (465 samples, 53.45%)</title><rect x="42.4138%" y="357" width="53.4483%" height="15" fill="rgb(212,87,7)" fg:x="369" fg:w="465"/><text x="42.6638%" y="367.50">__libc_start_main</text></g><g><title>main (465 samples, 53.45%)</title><rect x="42.4138%" y="341" width="53.4483%" height="15" fill="rgb(245,114,25)" fg:x="369" fg:w="465"/><text x="42.6638%" y="351.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (465 samples, 53.45%)</title><rect x="42.4138%" y="325" width="53.4483%" height="15" fill="rgb(210,61,42)" fg:x="369" fg:w="465"/><text x="42.6638%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (465 samples, 53.45%)</title><rect x="42.4138%" y="309" width="53.4483%" height="15" fill="rgb(211,52,33)" fg:x="369" fg:w="465"/><text x="42.6638%" y="319.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (383 samples, 44.02%)</title><rect x="51.8391%" y="293" width="44.0230%" height="15" fill="rgb(234,58,33)" fg:x="451" fg:w="383"/><text x="52.0891%" y="303.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (7 samples, 0.80%)</title><rect x="95.0575%" y="277" width="0.8046%" height="15" fill="rgb(220,115,36)" fg:x="827" fg:w="7"/><text x="95.3075%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (7 samples, 0.80%)</title><rect x="95.0575%" y="261" width="0.8046%" height="15" fill="rgb(243,153,54)" fg:x="827" fg:w="7"/><text x="95.3075%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (4 samples, 0.46%)</title><rect x="95.4023%" y="245" width="0.4598%" height="15" fill="rgb(251,47,18)" fg:x="830" fg:w="4"/><text x="95.6523%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (2 samples, 0.23%)</title><rect x="95.6322%" y="229" width="0.2299%" height="15" fill="rgb(242,102,42)" fg:x="832" fg:w="2"/><text x="95.8822%" y="239.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (10 samples, 1.15%)</title><rect x="96.7816%" y="309" width="1.1494%" height="15" fill="rgb(234,31,38)" fg:x="842" fg:w="10"/><text x="97.0316%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.11%)</title><rect x="97.8161%" y="293" width="0.1149%" height="15" fill="rgb(221,117,51)" fg:x="851" fg:w="1"/><text x="98.0661%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.11%)</title><rect x="97.9310%" y="309" width="0.1149%" height="15" fill="rgb(212,20,18)" fg:x="852" fg:w="1"/><text x="98.1810%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.23%)</title><rect x="98.0460%" y="293" width="0.2299%" height="15" fill="rgb(245,133,36)" fg:x="853" fg:w="2"/><text x="98.2960%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.23%)</title><rect x="98.2759%" y="293" width="0.2299%" height="15" fill="rgb(212,6,19)" fg:x="855" fg:w="2"/><text x="98.5259%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (6 samples, 0.69%)</title><rect x="98.0460%" y="309" width="0.6897%" height="15" fill="rgb(218,1,36)" fg:x="853" fg:w="6"/><text x="98.2960%" y="319.50"></text></g><g><title>tokio::task::local::Shared::schedule (2 samples, 0.23%)</title><rect x="98.5057%" y="293" width="0.2299%" height="15" fill="rgb(246,84,54)" fg:x="857" fg:w="2"/><text x="98.7557%" y="303.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (1 samples, 0.11%)</title><rect x="98.6207%" y="277" width="0.1149%" height="15" fill="rgb(242,110,6)" fg:x="858" fg:w="1"/><text x="98.8707%" y="287.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.11%)</title><rect x="98.6207%" y="261" width="0.1149%" height="15" fill="rgb(214,47,5)" fg:x="858" fg:w="1"/><text x="98.8707%" y="271.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.11%)</title><rect x="98.6207%" y="245" width="0.1149%" height="15" fill="rgb(218,159,25)" fg:x="858" fg:w="1"/><text x="98.8707%" y="255.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (3 samples, 0.34%)</title><rect x="99.3103%" y="277" width="0.3448%" height="15" fill="rgb(215,211,28)" fg:x="864" fg:w="3"/><text x="99.5603%" y="287.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (8 samples, 0.92%)</title><rect x="98.8506%" y="293" width="0.9195%" height="15" fill="rgb(238,59,32)" fg:x="860" fg:w="8"/><text x="99.1006%" y="303.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.11%)</title><rect x="99.6552%" y="277" width="0.1149%" height="15" fill="rgb(226,82,3)" fg:x="867" fg:w="1"/><text x="99.9052%" y="287.50"></text></g><g><title>all (870 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(240,164,32)" fg:x="0" fg:w="870"/><text x="0.2500%" y="415.50"></text></g><g><title>tokio-runtime-w (36 samples, 4.14%)</title><rect x="95.8621%" y="389" width="4.1379%" height="15" fill="rgb(232,46,7)" fg:x="834" fg:w="36"/><text x="96.1121%" y="399.50">tokio..</text></g><g><title>__clone (36 samples, 4.14%)</title><rect x="95.8621%" y="373" width="4.1379%" height="15" fill="rgb(229,129,53)" fg:x="834" fg:w="36"/><text x="96.1121%" y="383.50">__clo..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (36 samples, 4.14%)</title><rect x="95.8621%" y="357" width="4.1379%" height="15" fill="rgb(234,188,29)" fg:x="834" fg:w="36"/><text x="96.1121%" y="367.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (36 samples, 4.14%)</title><rect x="95.8621%" y="341" width="4.1379%" height="15" fill="rgb(246,141,4)" fg:x="834" fg:w="36"/><text x="96.1121%" y="351.50">core:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (36 samples, 4.14%)</title><rect x="95.8621%" y="325" width="4.1379%" height="15" fill="rgb(229,23,39)" fg:x="834" fg:w="36"/><text x="96.1121%" y="335.50">std::..</text></g><g><title>tokio::runtime::task::raw::poll (11 samples, 1.26%)</title><rect x="98.7356%" y="309" width="1.2644%" height="15" fill="rgb(206,12,3)" fg:x="859" fg:w="11"/><text x="98.9856%" y="319.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2 samples, 0.23%)</title><rect x="99.7701%" y="293" width="0.2299%" height="15" fill="rgb(252,226,20)" fg:x="868" fg:w="2"/><text x="100.0201%" y="303.50"></text></g></svg></svg>