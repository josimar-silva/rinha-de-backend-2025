<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="990"><g><title>&lt;tokio::task::local::LocalSet as core::ops::drop::Drop&gt;::drop::{{closure}} (1 samples, 0.10%)</title><rect x="0.2020%" y="277" width="0.1010%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1"/><text x="0.4520%" y="287.50"></text></g><g><title>tokio::runtime::task::raw::shutdown (1 samples, 0.10%)</title><rect x="0.2020%" y="261" width="0.1010%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4520%" y="271.50"></text></g><g><title>tokio::runtime::task::harness::cancel_task (1 samples, 0.10%)</title><rect x="0.2020%" y="245" width="0.1010%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.4520%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;actix_server::service::StreamService&lt;actix_service::and_then::AndThenService&lt;actix_service::fn_service::FnService&lt;actix_http::service::HttpService&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_config::MapConfig&lt;actix_service::map_err::MapErrServiceFactory&lt;actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},()&gt;,actix_http::body::boxed::BoxBody&gt;::tcp::{{closure}},actix_http::service::HttpService&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_config::MapConfig&lt;actix_service::map_err::MapErrServiceFactory&lt;actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},()&gt;,actix_http::body::boxed::BoxBody&gt;::tcp::{{closure}}::{{closure}},tokio::net::tcp::stream::TcpStream,(tokio::net::tcp::stream::TcpStream,actix_http::Protocol,core::option::Option&lt;core::net::socket_addr::SocketAddr&gt;),actix_http::error::DispatchError&gt;,actix_http::service::HttpServiceHandler&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler,actix_http::h1::upgrade::UpgradeHandler&gt;,tokio::net::tcp::stream::TcpStream&gt;,tokio::net::tcp::stream::TcpStream&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="0.2020%" y="229" width="0.1010%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.4520%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::service::State&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler,actix_http::h1::upgrade::UpgradeHandler&gt;&gt; (1 samples, 0.10%)</title><rect x="0.2020%" y="213" width="0.1010%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.4520%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (1 samples, 0.10%)</title><rect x="0.2020%" y="197" width="0.1010%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.4520%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;actix_web::resource::Resource as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="0.2020%" y="181" width="0.1010%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.4520%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_web::handler::handler_service&lt;&lt;rinha_de_backend::adapters::web::payments_handler::payments as actix_web::service::HttpServiceFactory&gt;::register::payments,(actix_web::types::json::Json&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;,actix_web::data::Data&lt;rinha_de_backend::use_cases::create_payment::CreatePaymentUseCase&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue&gt;&gt;)&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="0.2020%" y="165" width="0.1010%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.4520%" y="175.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="0.2020%" y="149" width="0.1010%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.4520%" y="159.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (4 samples, 0.40%)</title><rect x="0.4040%" y="261" width="0.4040%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="4"/><text x="0.6540%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.40%)</title><rect x="0.4040%" y="245" width="0.4040%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="4"/><text x="0.6540%" y="255.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.10%)</title><rect x="0.9091%" y="245" width="0.1010%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="1"/><text x="1.1591%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.30%)</title><rect x="2.3232%" y="229" width="0.3030%" height="15" fill="rgb(216,20,37)" fg:x="23" fg:w="3"/><text x="2.5732%" y="239.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (3 samples, 0.30%)</title><rect x="2.3232%" y="213" width="0.3030%" height="15" fill="rgb(206,188,39)" fg:x="23" fg:w="3"/><text x="2.5732%" y="223.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.10%)</title><rect x="3.0303%" y="197" width="0.1010%" height="15" fill="rgb(217,207,13)" fg:x="30" fg:w="1"/><text x="3.2803%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (32 samples, 3.23%)</title><rect x="0.3030%" y="277" width="3.2323%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="32"/><text x="0.5530%" y="287.50">tok..</text></g><g><title>tokio::runtime::time::Driver::park_internal (27 samples, 2.73%)</title><rect x="0.8081%" y="261" width="2.7273%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="27"/><text x="1.0581%" y="271.50">to..</text></g><g><title>tokio::runtime::io::driver::Driver::turn (25 samples, 2.53%)</title><rect x="1.0101%" y="245" width="2.5253%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="25"/><text x="1.2601%" y="255.50">to..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (9 samples, 0.91%)</title><rect x="2.6263%" y="229" width="0.9091%" height="15" fill="rgb(221,200,47)" fg:x="26" fg:w="9"/><text x="2.8763%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.81%)</title><rect x="2.7273%" y="213" width="0.8081%" height="15" fill="rgb(226,26,5)" fg:x="27" fg:w="8"/><text x="2.9773%" y="223.50"></text></g><g><title>tokio::task::local::Shared::schedule (4 samples, 0.40%)</title><rect x="3.1313%" y="197" width="0.4040%" height="15" fill="rgb(249,33,26)" fg:x="31" fg:w="4"/><text x="3.3813%" y="207.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (1 samples, 0.10%)</title><rect x="3.4343%" y="181" width="0.1010%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="1"/><text x="3.6843%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.30%)</title><rect x="4.1414%" y="213" width="0.3030%" height="15" fill="rgb(221,5,38)" fg:x="41" fg:w="3"/><text x="4.3914%" y="223.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="4.3434%" y="197" width="0.1010%" height="15" fill="rgb(247,18,42)" fg:x="43" fg:w="1"/><text x="4.5934%" y="207.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.91%)</title><rect x="4.0404%" y="229" width="0.9091%" height="15" fill="rgb(241,131,45)" fg:x="40" fg:w="9"/><text x="4.2904%" y="239.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (5 samples, 0.51%)</title><rect x="4.4444%" y="213" width="0.5051%" height="15" fill="rgb(249,31,29)" fg:x="44" fg:w="5"/><text x="4.6944%" y="223.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (2 samples, 0.20%)</title><rect x="4.7475%" y="197" width="0.2020%" height="15" fill="rgb(225,111,53)" fg:x="47" fg:w="2"/><text x="4.9975%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.10%)</title><rect x="5.1515%" y="213" width="0.1010%" height="15" fill="rgb(238,160,17)" fg:x="51" fg:w="1"/><text x="5.4015%" y="223.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (5 samples, 0.51%)</title><rect x="4.9495%" y="229" width="0.5051%" height="15" fill="rgb(214,148,48)" fg:x="49" fg:w="5"/><text x="5.1995%" y="239.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 0.20%)</title><rect x="5.2525%" y="213" width="0.2020%" height="15" fill="rgb(232,36,49)" fg:x="52" fg:w="2"/><text x="5.5025%" y="223.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (17 samples, 1.72%)</title><rect x="3.8384%" y="245" width="1.7172%" height="15" fill="rgb(209,103,24)" fg:x="38" fg:w="17"/><text x="4.0884%" y="255.50"></text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (1 samples, 0.10%)</title><rect x="5.4545%" y="229" width="0.1010%" height="15" fill="rgb(229,88,8)" fg:x="54" fg:w="1"/><text x="5.7045%" y="239.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (1 samples, 0.10%)</title><rect x="5.4545%" y="213" width="0.1010%" height="15" fill="rgb(213,181,19)" fg:x="54" fg:w="1"/><text x="5.7045%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.10%)</title><rect x="5.4545%" y="197" width="0.1010%" height="15" fill="rgb(254,191,54)" fg:x="54" fg:w="1"/><text x="5.7045%" y="207.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (21 samples, 2.12%)</title><rect x="3.5354%" y="261" width="2.1212%" height="15" fill="rgb(241,83,37)" fg:x="35" fg:w="21"/><text x="3.7854%" y="271.50">&lt;..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.10%)</title><rect x="5.5556%" y="245" width="0.1010%" height="15" fill="rgb(233,36,39)" fg:x="55" fg:w="1"/><text x="5.8056%" y="255.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}}::Guard&lt;T,S&gt;::drain (1 samples, 0.10%)</title><rect x="5.6566%" y="229" width="0.1010%" height="15" fill="rgb(226,3,54)" fg:x="56" fg:w="1"/><text x="5.9066%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="5.8586%" y="213" width="0.1010%" height="15" fill="rgb(245,192,40)" fg:x="58" fg:w="1"/><text x="6.1086%" y="223.50"></text></g><g><title>tokio::runtime::task::raw::poll (27 samples, 2.73%)</title><rect x="3.5354%" y="277" width="2.7273%" height="15" fill="rgb(238,167,29)" fg:x="35" fg:w="27"/><text x="3.7854%" y="287.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (6 samples, 0.61%)</title><rect x="5.6566%" y="261" width="0.6061%" height="15" fill="rgb(232,182,51)" fg:x="56" fg:w="6"/><text x="5.9066%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (6 samples, 0.61%)</title><rect x="5.6566%" y="245" width="0.6061%" height="15" fill="rgb(231,60,39)" fg:x="56" fg:w="6"/><text x="5.9066%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (5 samples, 0.51%)</title><rect x="5.7576%" y="229" width="0.5051%" height="15" fill="rgb(208,69,12)" fg:x="57" fg:w="5"/><text x="6.0076%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (3 samples, 0.30%)</title><rect x="5.9596%" y="213" width="0.3030%" height="15" fill="rgb(235,93,37)" fg:x="59" fg:w="3"/><text x="6.2096%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="6.1616%" y="197" width="0.1010%" height="15" fill="rgb(213,116,39)" fg:x="61" fg:w="1"/><text x="6.4116%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="6.1616%" y="181" width="0.1010%" height="15" fill="rgb(222,207,29)" fg:x="61" fg:w="1"/><text x="6.4116%" y="191.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="6.6667%" y="261" width="0.1010%" height="15" fill="rgb(206,96,30)" fg:x="66" fg:w="1"/><text x="6.9167%" y="271.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.10%)</title><rect x="6.6667%" y="245" width="0.1010%" height="15" fill="rgb(218,138,4)" fg:x="66" fg:w="1"/><text x="6.9167%" y="255.50"></text></g><g><title>tokio::task::local::LocalSet::new (1 samples, 0.10%)</title><rect x="6.7677%" y="261" width="0.1010%" height="15" fill="rgb(250,191,14)" fg:x="67" fg:w="1"/><text x="7.0177%" y="271.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.20%)</title><rect x="10.5051%" y="197" width="0.2020%" height="15" fill="rgb(239,60,40)" fg:x="104" fg:w="2"/><text x="10.7551%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="10.6061%" y="181" width="0.1010%" height="15" fill="rgb(206,27,48)" fg:x="105" fg:w="1"/><text x="10.8561%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (4 samples, 0.40%)</title><rect x="10.7071%" y="197" width="0.4040%" height="15" fill="rgb(225,35,8)" fg:x="106" fg:w="4"/><text x="10.9571%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 0.30%)</title><rect x="10.8081%" y="181" width="0.3030%" height="15" fill="rgb(250,213,24)" fg:x="107" fg:w="3"/><text x="11.0581%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="11.0101%" y="165" width="0.1010%" height="15" fill="rgb(247,123,22)" fg:x="109" fg:w="1"/><text x="11.2601%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="11.7172%" y="165" width="0.1010%" height="15" fill="rgb(231,138,38)" fg:x="116" fg:w="1"/><text x="11.9672%" y="175.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="11.8182%" y="165" width="0.1010%" height="15" fill="rgb(231,145,46)" fg:x="117" fg:w="1"/><text x="12.0682%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.20%)</title><rect x="11.9192%" y="165" width="0.2020%" height="15" fill="rgb(251,118,11)" fg:x="118" fg:w="2"/><text x="12.1692%" y="175.50"></text></g><g><title>http::method::Method::from_bytes (1 samples, 0.10%)</title><rect x="12.1212%" y="165" width="0.1010%" height="15" fill="rgb(217,147,25)" fg:x="120" fg:w="1"/><text x="12.3712%" y="175.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (12 samples, 1.21%)</title><rect x="11.2121%" y="181" width="1.2121%" height="15" fill="rgb(247,81,37)" fg:x="111" fg:w="12"/><text x="11.4621%" y="191.50"></text></g><g><title>httparse::parse_headers_iter_uninit (2 samples, 0.20%)</title><rect x="12.2222%" y="165" width="0.2020%" height="15" fill="rgb(209,12,38)" fg:x="121" fg:w="2"/><text x="12.4722%" y="175.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (1 samples, 0.10%)</title><rect x="12.5253%" y="165" width="0.1010%" height="15" fill="rgb(227,1,9)" fg:x="124" fg:w="1"/><text x="12.7753%" y="175.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (1 samples, 0.10%)</title><rect x="12.6263%" y="165" width="0.1010%" height="15" fill="rgb(248,47,43)" fg:x="125" fg:w="1"/><text x="12.8763%" y="175.50"></text></g><g><title>actix_http::extensions::Extensions::insert (1 samples, 0.10%)</title><rect x="12.6263%" y="149" width="0.1010%" height="15" fill="rgb(221,10,30)" fg:x="125" fg:w="1"/><text x="12.8763%" y="159.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (4 samples, 0.40%)</title><rect x="12.4242%" y="181" width="0.4040%" height="15" fill="rgb(210,229,1)" fg:x="123" fg:w="4"/><text x="12.6742%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::message::Message&lt;actix_http::requests::head::RequestHead&gt;&gt; (1 samples, 0.10%)</title><rect x="12.7273%" y="165" width="0.1010%" height="15" fill="rgb(222,148,37)" fg:x="126" fg:w="1"/><text x="12.9773%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (23 samples, 2.32%)</title><rect x="11.1111%" y="197" width="2.3232%" height="15" fill="rgb(234,67,33)" fg:x="110" fg:w="23"/><text x="11.3611%" y="207.50">a..</text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (6 samples, 0.61%)</title><rect x="12.8283%" y="181" width="0.6061%" height="15" fill="rgb(247,98,35)" fg:x="127" fg:w="6"/><text x="13.0783%" y="191.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (6 samples, 0.61%)</title><rect x="12.8283%" y="165" width="0.6061%" height="15" fill="rgb(247,138,52)" fg:x="127" fg:w="6"/><text x="13.0783%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.20%)</title><rect x="13.2323%" y="149" width="0.2020%" height="15" fill="rgb(213,79,30)" fg:x="131" fg:w="2"/><text x="13.4823%" y="159.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (2 samples, 0.20%)</title><rect x="14.2424%" y="181" width="0.2020%" height="15" fill="rgb(246,177,23)" fg:x="141" fg:w="2"/><text x="14.4924%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_web::guard::RegisteredMethods&gt; (1 samples, 0.10%)</title><rect x="14.3434%" y="165" width="0.1010%" height="15" fill="rgb(230,62,27)" fg:x="142" fg:w="1"/><text x="14.5934%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.20%)</title><rect x="16.9697%" y="149" width="0.2020%" height="15" fill="rgb(216,154,8)" fg:x="168" fg:w="2"/><text x="17.2197%" y="159.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.10%)</title><rect x="17.2727%" y="133" width="0.1010%" height="15" fill="rgb(244,35,45)" fg:x="171" fg:w="1"/><text x="17.5227%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.10%)</title><rect x="17.2727%" y="117" width="0.1010%" height="15" fill="rgb(251,115,12)" fg:x="171" fg:w="1"/><text x="17.5227%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.30%)</title><rect x="17.1717%" y="149" width="0.3030%" height="15" fill="rgb(240,54,50)" fg:x="170" fg:w="3"/><text x="17.4217%" y="159.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (1 samples, 0.10%)</title><rect x="17.3737%" y="133" width="0.1010%" height="15" fill="rgb(233,84,52)" fg:x="172" fg:w="1"/><text x="17.6237%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="18.7879%" y="117" width="0.1010%" height="15" fill="rgb(207,117,47)" fg:x="186" fg:w="1"/><text x="19.0379%" y="127.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.20%)</title><rect x="18.7879%" y="133" width="0.2020%" height="15" fill="rgb(249,43,39)" fg:x="186" fg:w="2"/><text x="19.0379%" y="143.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.10%)</title><rect x="18.8889%" y="117" width="0.1010%" height="15" fill="rgb(209,38,44)" fg:x="187" fg:w="1"/><text x="19.1389%" y="127.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.10%)</title><rect x="18.8889%" y="101" width="0.1010%" height="15" fill="rgb(236,212,23)" fg:x="187" fg:w="1"/><text x="19.1389%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::commands::AsyncCommands&gt;::lpush&lt;&amp;str,alloc::string::String,()&gt;::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="18.9899%" y="133" width="0.1010%" height="15" fill="rgb(242,79,21)" fg:x="188" fg:w="1"/><text x="19.2399%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.10%)</title><rect x="19.0909%" y="133" width="0.1010%" height="15" fill="rgb(211,96,35)" fg:x="189" fg:w="1"/><text x="19.3409%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.10%)</title><rect x="21.7172%" y="85" width="0.1010%" height="15" fill="rgb(253,215,40)" fg:x="215" fg:w="1"/><text x="21.9672%" y="95.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.10%)</title><rect x="21.7172%" y="69" width="0.1010%" height="15" fill="rgb(211,81,21)" fg:x="215" fg:w="1"/><text x="21.9672%" y="79.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 0.81%)</title><rect x="21.2121%" y="101" width="0.8081%" height="15" fill="rgb(208,190,38)" fg:x="210" fg:w="8"/><text x="21.4621%" y="111.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (2 samples, 0.20%)</title><rect x="21.8182%" y="85" width="0.2020%" height="15" fill="rgb(235,213,38)" fg:x="216" fg:w="2"/><text x="22.0682%" y="95.50"></text></g><g><title>__connect (1 samples, 0.10%)</title><rect x="22.0202%" y="101" width="0.1010%" height="15" fill="rgb(237,122,38)" fg:x="218" fg:w="1"/><text x="22.2702%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection::new_with_config&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;&gt;::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="22.1212%" y="101" width="0.1010%" height="15" fill="rgb(244,218,35)" fg:x="219" fg:w="1"/><text x="22.3712%" y="111.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.10%)</title><rect x="22.5253%" y="69" width="0.1010%" height="15" fill="rgb(240,68,47)" fg:x="223" fg:w="1"/><text x="22.7753%" y="79.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="22.5253%" y="53" width="0.1010%" height="15" fill="rgb(210,16,53)" fg:x="223" fg:w="1"/><text x="22.7753%" y="63.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 0.30%)</title><rect x="22.4242%" y="85" width="0.3030%" height="15" fill="rgb(235,124,12)" fg:x="222" fg:w="3"/><text x="22.6742%" y="95.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (1 samples, 0.10%)</title><rect x="22.6263%" y="69" width="0.1010%" height="15" fill="rgb(224,169,11)" fg:x="224" fg:w="1"/><text x="22.8763%" y="79.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.20%)</title><rect x="22.7273%" y="85" width="0.2020%" height="15" fill="rgb(250,166,2)" fg:x="225" fg:w="2"/><text x="22.9773%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::pipeline::Pipeline&gt; (1 samples, 0.10%)</title><rect x="22.9293%" y="85" width="0.1010%" height="15" fill="rgb(242,216,29)" fg:x="227" fg:w="1"/><text x="23.1793%" y="95.50"></text></g><g><title>redis::cmd::args_len (2 samples, 0.20%)</title><rect x="23.0303%" y="69" width="0.2020%" height="15" fill="rgb(230,116,27)" fg:x="228" fg:w="2"/><text x="23.2803%" y="79.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (12 samples, 1.21%)</title><rect x="22.2222%" y="101" width="1.2121%" height="15" fill="rgb(228,99,48)" fg:x="220" fg:w="12"/><text x="22.4722%" y="111.50"></text></g><g><title>redis::pipeline::encode_pipeline (4 samples, 0.40%)</title><rect x="23.0303%" y="85" width="0.4040%" height="15" fill="rgb(253,11,6)" fg:x="228" fg:w="4"/><text x="23.2803%" y="95.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.20%)</title><rect x="23.2323%" y="69" width="0.2020%" height="15" fill="rgb(247,143,39)" fg:x="230" fg:w="2"/><text x="23.4823%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="23.6364%" y="85" width="0.1010%" height="15" fill="rgb(236,97,10)" fg:x="234" fg:w="1"/><text x="23.8864%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="23.7374%" y="85" width="0.1010%" height="15" fill="rgb(233,208,19)" fg:x="235" fg:w="1"/><text x="23.9874%" y="95.50"></text></g><g><title>redis::connection::connection_setup_pipeline (5 samples, 0.51%)</title><rect x="23.4343%" y="101" width="0.5051%" height="15" fill="rgb(216,164,2)" fg:x="232" fg:w="5"/><text x="23.6843%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="23.8384%" y="85" width="0.1010%" height="15" fill="rgb(220,129,5)" fg:x="236" fg:w="1"/><text x="24.0884%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.10%)</title><rect x="23.8384%" y="69" width="0.1010%" height="15" fill="rgb(242,17,10)" fg:x="236" fg:w="1"/><text x="24.0884%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="23.8384%" y="53" width="0.1010%" height="15" fill="rgb(242,107,0)" fg:x="236" fg:w="1"/><text x="24.0884%" y="63.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (2 samples, 0.20%)</title><rect x="23.9394%" y="101" width="0.2020%" height="15" fill="rgb(251,28,31)" fg:x="237" fg:w="2"/><text x="24.1894%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="24.0404%" y="85" width="0.1010%" height="15" fill="rgb(233,223,10)" fg:x="238" fg:w="1"/><text x="24.2904%" y="95.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.10%)</title><rect x="24.0404%" y="69" width="0.1010%" height="15" fill="rgb(215,21,27)" fg:x="238" fg:w="1"/><text x="24.2904%" y="79.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (2 samples, 0.20%)</title><rect x="24.1414%" y="101" width="0.2020%" height="15" fill="rgb(232,23,21)" fg:x="239" fg:w="2"/><text x="24.3914%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="24.2424%" y="85" width="0.1010%" height="15" fill="rgb(244,5,23)" fg:x="240" fg:w="1"/><text x="24.4924%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="24.2424%" y="69" width="0.1010%" height="15" fill="rgb(226,81,46)" fg:x="240" fg:w="1"/><text x="24.4924%" y="79.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (53 samples, 5.35%)</title><rect x="19.1919%" y="133" width="5.3535%" height="15" fill="rgb(247,70,30)" fg:x="190" fg:w="53"/><text x="19.4419%" y="143.50">redis::..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (51 samples, 5.15%)</title><rect x="19.3939%" y="117" width="5.1515%" height="15" fill="rgb(212,68,19)" fg:x="192" fg:w="51"/><text x="19.6439%" y="127.50">redis:..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.20%)</title><rect x="24.3434%" y="101" width="0.2020%" height="15" fill="rgb(240,187,13)" fg:x="241" fg:w="2"/><text x="24.5934%" y="111.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="24.4444%" y="85" width="0.1010%" height="15" fill="rgb(223,113,26)" fg:x="242" fg:w="1"/><text x="24.6944%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.20%)</title><rect x="24.5455%" y="117" width="0.2020%" height="15" fill="rgb(206,192,2)" fg:x="243" fg:w="2"/><text x="24.7955%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="24.6465%" y="101" width="0.1010%" height="15" fill="rgb(241,108,4)" fg:x="244" fg:w="1"/><text x="24.8965%" y="111.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (77 samples, 7.78%)</title><rect x="17.4747%" y="149" width="7.7778%" height="15" fill="rgb(247,173,49)" fg:x="173" fg:w="77"/><text x="17.7247%" y="159.50">&lt;rinha_de_b..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (7 samples, 0.71%)</title><rect x="24.5455%" y="133" width="0.7071%" height="15" fill="rgb(224,114,35)" fg:x="243" fg:w="7"/><text x="24.7955%" y="143.50"></text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (5 samples, 0.51%)</title><rect x="24.7475%" y="117" width="0.5051%" height="15" fill="rgb(245,159,27)" fg:x="245" fg:w="5"/><text x="24.9975%" y="127.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (4 samples, 0.40%)</title><rect x="24.8485%" y="101" width="0.4040%" height="15" fill="rgb(245,172,44)" fg:x="246" fg:w="4"/><text x="25.0985%" y="111.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (3 samples, 0.30%)</title><rect x="24.9495%" y="85" width="0.3030%" height="15" fill="rgb(236,23,11)" fg:x="247" fg:w="3"/><text x="25.1995%" y="95.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (3 samples, 0.30%)</title><rect x="24.9495%" y="69" width="0.3030%" height="15" fill="rgb(205,117,38)" fg:x="247" fg:w="3"/><text x="25.1995%" y="79.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.10%)</title><rect x="25.2525%" y="149" width="0.1010%" height="15" fill="rgb(237,72,25)" fg:x="250" fg:w="1"/><text x="25.5025%" y="159.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.10%)</title><rect x="25.3535%" y="149" width="0.1010%" height="15" fill="rgb(244,70,9)" fg:x="251" fg:w="1"/><text x="25.6035%" y="159.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.10%)</title><rect x="25.3535%" y="133" width="0.1010%" height="15" fill="rgb(217,125,39)" fg:x="251" fg:w="1"/><text x="25.6035%" y="143.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (1 samples, 0.10%)</title><rect x="25.4545%" y="149" width="0.1010%" height="15" fill="rgb(235,36,10)" fg:x="252" fg:w="1"/><text x="25.7045%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.10%)</title><rect x="25.4545%" y="133" width="0.1010%" height="15" fill="rgb(251,123,47)" fg:x="252" fg:w="1"/><text x="25.7045%" y="143.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.10%)</title><rect x="25.4545%" y="117" width="0.1010%" height="15" fill="rgb(221,13,13)" fg:x="252" fg:w="1"/><text x="25.7045%" y="127.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (111 samples, 11.21%)</title><rect x="14.4444%" y="181" width="11.2121%" height="15" fill="rgb(238,131,9)" fg:x="143" fg:w="111"/><text x="14.6944%" y="191.50">&lt;actix_web::resou..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (105 samples, 10.61%)</title><rect x="15.0505%" y="165" width="10.6061%" height="15" fill="rgb(211,50,8)" fg:x="149" fg:w="105"/><text x="15.3005%" y="175.50">actix_web::hand..</text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (1 samples, 0.10%)</title><rect x="25.5556%" y="149" width="0.1010%" height="15" fill="rgb(245,182,24)" fg:x="253" fg:w="1"/><text x="25.8056%" y="159.50"></text></g><g><title>actix_http::header::map::HeaderMap::insert (1 samples, 0.10%)</title><rect x="25.5556%" y="133" width="0.1010%" height="15" fill="rgb(242,14,37)" fg:x="253" fg:w="1"/><text x="25.8056%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (125 samples, 12.63%)</title><rect x="13.4343%" y="197" width="12.6263%" height="15" fill="rgb(246,228,12)" fg:x="133" fg:w="125"/><text x="13.6843%" y="207.50">actix_http::h1::dis..</text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (4 samples, 0.40%)</title><rect x="25.6566%" y="181" width="0.4040%" height="15" fill="rgb(213,55,15)" fg:x="254" fg:w="4"/><text x="25.9066%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (4 samples, 0.40%)</title><rect x="25.6566%" y="165" width="0.4040%" height="15" fill="rgb(209,9,3)" fg:x="254" fg:w="4"/><text x="25.9066%" y="175.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (4 samples, 0.40%)</title><rect x="25.6566%" y="149" width="0.4040%" height="15" fill="rgb(230,59,30)" fg:x="254" fg:w="4"/><text x="25.9066%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (5 samples, 0.51%)</title><rect x="26.0606%" y="197" width="0.5051%" height="15" fill="rgb(209,121,21)" fg:x="258" fg:w="5"/><text x="26.3106%" y="207.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="26.4646%" y="181" width="0.1010%" height="15" fill="rgb(220,109,13)" fg:x="262" fg:w="1"/><text x="26.7146%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.10%)</title><rect x="26.4646%" y="165" width="0.1010%" height="15" fill="rgb(232,18,1)" fg:x="262" fg:w="1"/><text x="26.7146%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (2 samples, 0.20%)</title><rect x="26.5657%" y="197" width="0.2020%" height="15" fill="rgb(215,41,42)" fg:x="263" fg:w="2"/><text x="26.8157%" y="207.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (174 samples, 17.58%)</title><rect x="9.3939%" y="213" width="17.5758%" height="15" fill="rgb(224,123,36)" fg:x="93" fg:w="174"/><text x="9.6439%" y="223.50">&lt;actix_http::h1::dispatcher..</text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (2 samples, 0.20%)</title><rect x="26.7677%" y="197" width="0.2020%" height="15" fill="rgb(240,125,3)" fg:x="265" fg:w="2"/><text x="27.0177%" y="207.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.20%)</title><rect x="26.7677%" y="181" width="0.2020%" height="15" fill="rgb(205,98,50)" fg:x="265" fg:w="2"/><text x="27.0177%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.10%)</title><rect x="26.8687%" y="165" width="0.1010%" height="15" fill="rgb(205,185,37)" fg:x="266" fg:w="1"/><text x="27.1187%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.40%)</title><rect x="27.1717%" y="181" width="0.4040%" height="15" fill="rgb(238,207,15)" fg:x="269" fg:w="4"/><text x="27.4217%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (4 samples, 0.40%)</title><rect x="27.1717%" y="165" width="0.4040%" height="15" fill="rgb(213,199,42)" fg:x="269" fg:w="4"/><text x="27.4217%" y="175.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (8 samples, 0.81%)</title><rect x="27.9798%" y="149" width="0.8081%" height="15" fill="rgb(235,201,11)" fg:x="277" fg:w="8"/><text x="28.2298%" y="159.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="28.7879%" y="149" width="0.1010%" height="15" fill="rgb(207,46,11)" fg:x="285" fg:w="1"/><text x="29.0379%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.10%)</title><rect x="28.8889%" y="149" width="0.1010%" height="15" fill="rgb(241,35,35)" fg:x="286" fg:w="1"/><text x="29.1389%" y="159.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (3 samples, 0.30%)</title><rect x="28.9899%" y="149" width="0.3030%" height="15" fill="rgb(243,32,47)" fg:x="287" fg:w="3"/><text x="29.2399%" y="159.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (18 samples, 1.82%)</title><rect x="27.6768%" y="165" width="1.8182%" height="15" fill="rgb(247,202,23)" fg:x="274" fg:w="18"/><text x="27.9268%" y="175.50">&lt;..</text></g><g><title>httparse::parse_headers_iter_uninit (2 samples, 0.20%)</title><rect x="29.2929%" y="149" width="0.2020%" height="15" fill="rgb(219,102,11)" fg:x="290" fg:w="2"/><text x="29.5429%" y="159.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (3 samples, 0.30%)</title><rect x="29.6970%" y="149" width="0.3030%" height="15" fill="rgb(243,110,44)" fg:x="294" fg:w="3"/><text x="29.9470%" y="159.50"></text></g><g><title>actix_http::extensions::Extensions::insert (1 samples, 0.10%)</title><rect x="29.8990%" y="133" width="0.1010%" height="15" fill="rgb(222,74,54)" fg:x="296" fg:w="1"/><text x="30.1490%" y="143.50"></text></g><g><title>actix_router::path::Path&lt;T&gt;::unprocessed (1 samples, 0.10%)</title><rect x="30.0000%" y="149" width="0.1010%" height="15" fill="rgb(216,99,12)" fg:x="297" fg:w="1"/><text x="30.2500%" y="159.50"></text></g><g><title>actix_router::quoter::Quoter::requote_str_lossy (1 samples, 0.10%)</title><rect x="30.1010%" y="149" width="0.1010%" height="15" fill="rgb(226,22,26)" fg:x="298" fg:w="1"/><text x="30.3510%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (2 samples, 0.20%)</title><rect x="30.2020%" y="149" width="0.2020%" height="15" fill="rgb(217,163,10)" fg:x="299" fg:w="2"/><text x="30.4520%" y="159.50"></text></g><g><title> 16]&gt; (2 samples, 0.20%)</title><rect x="30.2020%" y="133" width="0.2020%" height="15" fill="rgb(213,25,53)" fg:x="299" fg:w="2"/><text x="30.4520%" y="143.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (10 samples, 1.01%)</title><rect x="29.4949%" y="165" width="1.0101%" height="15" fill="rgb(252,105,26)" fg:x="292" fg:w="10"/><text x="29.7449%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::message::Message&lt;actix_http::requests::head::RequestHead&gt;&gt; (1 samples, 0.10%)</title><rect x="30.4040%" y="149" width="0.1010%" height="15" fill="rgb(220,39,43)" fg:x="301" fg:w="1"/><text x="30.6540%" y="159.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (4 samples, 0.40%)</title><rect x="30.5051%" y="165" width="0.4040%" height="15" fill="rgb(229,68,48)" fg:x="302" fg:w="4"/><text x="30.7551%" y="175.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (4 samples, 0.40%)</title><rect x="30.5051%" y="149" width="0.4040%" height="15" fill="rgb(252,8,32)" fg:x="302" fg:w="4"/><text x="30.7551%" y="159.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (2 samples, 0.20%)</title><rect x="30.7071%" y="133" width="0.2020%" height="15" fill="rgb(223,20,43)" fg:x="304" fg:w="2"/><text x="30.9571%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (34 samples, 3.43%)</title><rect x="27.5758%" y="181" width="3.4343%" height="15" fill="rgb(229,81,49)" fg:x="273" fg:w="34"/><text x="27.8258%" y="191.50">act..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="30.9091%" y="165" width="0.1010%" height="15" fill="rgb(236,28,36)" fg:x="306" fg:w="1"/><text x="31.1591%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.10%)</title><rect x="31.4141%" y="133" width="0.1010%" height="15" fill="rgb(249,185,26)" fg:x="311" fg:w="1"/><text x="31.6641%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.10%)</title><rect x="31.4141%" y="117" width="0.1010%" height="15" fill="rgb(249,174,33)" fg:x="311" fg:w="1"/><text x="31.6641%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.10%)</title><rect x="31.4141%" y="101" width="0.1010%" height="15" fill="rgb(233,201,37)" fg:x="311" fg:w="1"/><text x="31.6641%" y="111.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.10%)</title><rect x="32.0202%" y="69" width="0.1010%" height="15" fill="rgb(221,78,26)" fg:x="317" fg:w="1"/><text x="32.2702%" y="79.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.10%)</title><rect x="32.0202%" y="53" width="0.1010%" height="15" fill="rgb(250,127,30)" fg:x="317" fg:w="1"/><text x="32.2702%" y="63.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.20%)</title><rect x="32.1212%" y="69" width="0.2020%" height="15" fill="rgb(230,49,44)" fg:x="318" fg:w="2"/><text x="32.3712%" y="79.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.10%)</title><rect x="32.2222%" y="53" width="0.1010%" height="15" fill="rgb(229,67,23)" fg:x="319" fg:w="1"/><text x="32.4722%" y="63.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="32.2222%" y="37" width="0.1010%" height="15" fill="rgb(249,83,47)" fg:x="319" fg:w="1"/><text x="32.4722%" y="47.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.40%)</title><rect x="32.0202%" y="85" width="0.4040%" height="15" fill="rgb(215,43,3)" fg:x="317" fg:w="4"/><text x="32.2702%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::Handle::current::panic_cold_display (1 samples, 0.10%)</title><rect x="32.3232%" y="69" width="0.1010%" height="15" fill="rgb(238,154,13)" fg:x="320" fg:w="1"/><text x="32.5732%" y="79.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (10 samples, 1.01%)</title><rect x="31.5152%" y="133" width="1.0101%" height="15" fill="rgb(219,56,2)" fg:x="312" fg:w="10"/><text x="31.7652%" y="143.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (10 samples, 1.01%)</title><rect x="31.5152%" y="117" width="1.0101%" height="15" fill="rgb(233,0,4)" fg:x="312" fg:w="10"/><text x="31.7652%" y="127.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (9 samples, 0.91%)</title><rect x="31.6162%" y="101" width="0.9091%" height="15" fill="rgb(235,30,7)" fg:x="313" fg:w="9"/><text x="31.8662%" y="111.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1 samples, 0.10%)</title><rect x="32.4242%" y="85" width="0.1010%" height="15" fill="rgb(250,79,13)" fg:x="321" fg:w="1"/><text x="32.6742%" y="95.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.20%)</title><rect x="32.5253%" y="133" width="0.2020%" height="15" fill="rgb(211,146,34)" fg:x="322" fg:w="2"/><text x="32.7753%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="32.6263%" y="117" width="0.1010%" height="15" fill="rgb(228,22,38)" fg:x="323" fg:w="1"/><text x="32.8763%" y="127.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (18 samples, 1.82%)</title><rect x="31.0101%" y="165" width="1.8182%" height="15" fill="rgb(235,168,5)" fg:x="307" fg:w="18"/><text x="31.2601%" y="175.50">&lt;..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (18 samples, 1.82%)</title><rect x="31.0101%" y="149" width="1.8182%" height="15" fill="rgb(221,155,16)" fg:x="307" fg:w="18"/><text x="31.2601%" y="159.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (1 samples, 0.10%)</title><rect x="32.7273%" y="133" width="0.1010%" height="15" fill="rgb(215,215,53)" fg:x="324" fg:w="1"/><text x="32.9773%" y="143.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="32.7273%" y="117" width="0.1010%" height="15" fill="rgb(223,4,10)" fg:x="324" fg:w="1"/><text x="32.9773%" y="127.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (19 samples, 1.92%)</title><rect x="31.0101%" y="181" width="1.9192%" height="15" fill="rgb(234,103,6)" fg:x="307" fg:w="19"/><text x="31.2601%" y="191.50">a..</text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (1 samples, 0.10%)</title><rect x="32.8283%" y="165" width="0.1010%" height="15" fill="rgb(227,97,0)" fg:x="325" fg:w="1"/><text x="33.0783%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (1 samples, 0.10%)</title><rect x="32.9293%" y="181" width="0.1010%" height="15" fill="rgb(234,150,53)" fg:x="326" fg:w="1"/><text x="33.1793%" y="191.50"></text></g><g><title>&lt;actix_service::and_then::AndThenServiceResponse&lt;A,B,Req&gt; as core::future::future::Future&gt;::poll (61 samples, 6.16%)</title><rect x="26.9697%" y="213" width="6.1616%" height="15" fill="rgb(228,201,54)" fg:x="267" fg:w="61"/><text x="27.2197%" y="223.50">&lt;actix_s..</text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (59 samples, 5.96%)</title><rect x="27.1717%" y="197" width="5.9596%" height="15" fill="rgb(222,22,37)" fg:x="269" fg:w="59"/><text x="27.4217%" y="207.50">&lt;actix_h..</text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (1 samples, 0.10%)</title><rect x="33.0303%" y="181" width="0.1010%" height="15" fill="rgb(237,53,32)" fg:x="327" fg:w="1"/><text x="33.2803%" y="191.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="33.0303%" y="165" width="0.1010%" height="15" fill="rgb(233,25,53)" fg:x="327" fg:w="1"/><text x="33.2803%" y="175.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.10%)</title><rect x="33.0303%" y="149" width="0.1010%" height="15" fill="rgb(210,40,34)" fg:x="327" fg:w="1"/><text x="33.2803%" y="159.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (247 samples, 24.95%)</title><rect x="8.4848%" y="229" width="24.9495%" height="15" fill="rgb(241,220,44)" fg:x="84" fg:w="247"/><text x="8.7348%" y="239.50">&lt;actix_server::service::StreamService&lt;S,..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::service::State&lt;tokio::net::tcp::stream::TcpStream,actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler,actix_http::h1::upgrade::UpgradeHandler&gt;&gt; (3 samples, 0.30%)</title><rect x="33.1313%" y="213" width="0.3030%" height="15" fill="rgb(235,28,35)" fg:x="328" fg:w="3"/><text x="33.3813%" y="223.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call (1 samples, 0.10%)</title><rect x="33.4343%" y="213" width="0.1010%" height="15" fill="rgb(210,56,17)" fg:x="331" fg:w="1"/><text x="33.6843%" y="223.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.10%)</title><rect x="33.4343%" y="197" width="0.1010%" height="15" fill="rgb(224,130,29)" fg:x="331" fg:w="1"/><text x="33.6843%" y="207.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="33.4343%" y="181" width="0.1010%" height="15" fill="rgb(235,212,8)" fg:x="331" fg:w="1"/><text x="33.6843%" y="191.50"></text></g><g><title>&lt;actix_server::worker::ServerWorker as core::future::future::Future&gt;::poll (2 samples, 0.20%)</title><rect x="33.4343%" y="229" width="0.2020%" height="15" fill="rgb(223,33,50)" fg:x="331" fg:w="2"/><text x="33.6843%" y="239.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (1 samples, 0.10%)</title><rect x="33.5354%" y="213" width="0.1010%" height="15" fill="rgb(219,149,13)" fg:x="332" fg:w="1"/><text x="33.7854%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.10%)</title><rect x="33.5354%" y="197" width="0.1010%" height="15" fill="rgb(250,156,29)" fg:x="332" fg:w="1"/><text x="33.7854%" y="207.50"></text></g><g><title>tokio::task::local::LocalSet::tick (266 samples, 26.87%)</title><rect x="6.8687%" y="261" width="26.8687%" height="15" fill="rgb(216,193,19)" fg:x="68" fg:w="266"/><text x="7.1187%" y="271.50">tokio::task::local::LocalSet::tick</text></g><g><title>tokio::runtime::task::raw::poll (258 samples, 26.06%)</title><rect x="7.6768%" y="245" width="26.0606%" height="15" fill="rgb(216,135,14)" fg:x="76" fg:w="258"/><text x="7.9268%" y="255.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.10%)</title><rect x="33.6364%" y="229" width="0.1010%" height="15" fill="rgb(241,47,5)" fg:x="333" fg:w="1"/><text x="33.8864%" y="239.50"></text></g><g><title>actix-rt|system (335 samples, 33.84%)</title><rect x="0.0000%" y="357" width="33.8384%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="335"/><text x="0.2500%" y="367.50">actix-rt|system</text></g><g><title>__clone (335 samples, 33.84%)</title><rect x="0.0000%" y="341" width="33.8384%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="335"/><text x="0.2500%" y="351.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (335 samples, 33.84%)</title><rect x="0.0000%" y="325" width="33.8384%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="335"/><text x="0.2500%" y="335.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (335 samples, 33.84%)</title><rect x="0.0000%" y="309" width="33.8384%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="335"/><text x="0.2500%" y="319.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (335 samples, 33.84%)</title><rect x="0.0000%" y="293" width="33.8384%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="335"/><text x="0.2500%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (273 samples, 27.58%)</title><rect x="6.2626%" y="277" width="27.5758%" height="15" fill="rgb(206,124,46)" fg:x="62" fg:w="273"/><text x="6.5126%" y="287.50">tokio::task::local::LocalSet::run_until::{{c..</text></g><g><title>tokio::util::wake::clone_arc_raw (1 samples, 0.10%)</title><rect x="33.7374%" y="261" width="0.1010%" height="15" fill="rgb(249,21,11)" fg:x="334" fg:w="1"/><text x="33.9874%" y="271.50"></text></g><g><title>actix_server::accept::Accept::send_connection (3 samples, 0.30%)</title><rect x="34.2424%" y="261" width="0.3030%" height="15" fill="rgb(222,201,40)" fg:x="339" fg:w="3"/><text x="34.4924%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="34.4444%" y="245" width="0.1010%" height="15" fill="rgb(235,61,29)" fg:x="341" fg:w="1"/><text x="34.6944%" y="255.50"></text></g><g><title>actix-server ac (8 samples, 0.81%)</title><rect x="33.8384%" y="357" width="0.8081%" height="15" fill="rgb(219,207,3)" fg:x="335" fg:w="8"/><text x="34.0884%" y="367.50"></text></g><g><title>__clone (8 samples, 0.81%)</title><rect x="33.8384%" y="341" width="0.8081%" height="15" fill="rgb(222,56,46)" fg:x="335" fg:w="8"/><text x="34.0884%" y="351.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (8 samples, 0.81%)</title><rect x="33.8384%" y="325" width="0.8081%" height="15" fill="rgb(239,76,54)" fg:x="335" fg:w="8"/><text x="34.0884%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8 samples, 0.81%)</title><rect x="33.8384%" y="309" width="0.8081%" height="15" fill="rgb(231,124,27)" fg:x="335" fg:w="8"/><text x="34.0884%" y="319.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (8 samples, 0.81%)</title><rect x="33.8384%" y="293" width="0.8081%" height="15" fill="rgb(249,195,6)" fg:x="335" fg:w="8"/><text x="34.0884%" y="303.50"></text></g><g><title>actix_server::accept::Accept::accept (7 samples, 0.71%)</title><rect x="33.9394%" y="277" width="0.7071%" height="15" fill="rgb(237,174,47)" fg:x="336" fg:w="7"/><text x="34.1894%" y="287.50"></text></g><g><title>std::io::error::Error::kind (1 samples, 0.10%)</title><rect x="34.5455%" y="261" width="0.1010%" height="15" fill="rgb(206,201,31)" fg:x="342" fg:w="1"/><text x="34.7955%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.30%)</title><rect x="35.9596%" y="261" width="0.3030%" height="15" fill="rgb(231,57,52)" fg:x="356" fg:w="3"/><text x="36.2096%" y="271.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (12 samples, 1.21%)</title><rect x="37.0707%" y="245" width="1.2121%" height="15" fill="rgb(248,177,22)" fg:x="367" fg:w="12"/><text x="37.3207%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (7 samples, 0.71%)</title><rect x="37.5758%" y="229" width="0.7071%" height="15" fill="rgb(215,211,37)" fg:x="372" fg:w="7"/><text x="37.8258%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (4 samples, 0.40%)</title><rect x="38.8889%" y="229" width="0.4040%" height="15" fill="rgb(241,128,51)" fg:x="385" fg:w="4"/><text x="39.1389%" y="239.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 0.20%)</title><rect x="39.2929%" y="229" width="0.2020%" height="15" fill="rgb(227,165,31)" fg:x="389" fg:w="2"/><text x="39.5429%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.20%)</title><rect x="40.5051%" y="213" width="0.2020%" height="15" fill="rgb(228,167,24)" fg:x="401" fg:w="2"/><text x="40.7551%" y="223.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (2 samples, 0.20%)</title><rect x="40.5051%" y="197" width="0.2020%" height="15" fill="rgb(228,143,12)" fg:x="401" fg:w="2"/><text x="40.7551%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (4 samples, 0.40%)</title><rect x="41.3131%" y="181" width="0.4040%" height="15" fill="rgb(249,149,8)" fg:x="409" fg:w="4"/><text x="41.5631%" y="191.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (25 samples, 2.53%)</title><rect x="39.4949%" y="229" width="2.5253%" height="15" fill="rgb(243,35,44)" fg:x="391" fg:w="25"/><text x="39.7449%" y="239.50">to..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (13 samples, 1.31%)</title><rect x="40.7071%" y="213" width="1.3131%" height="15" fill="rgb(246,89,9)" fg:x="403" fg:w="13"/><text x="40.9571%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (11 samples, 1.11%)</title><rect x="40.9091%" y="197" width="1.1111%" height="15" fill="rgb(233,213,13)" fg:x="405" fg:w="11"/><text x="41.1591%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::schedule (3 samples, 0.30%)</title><rect x="41.7172%" y="181" width="0.3030%" height="15" fill="rgb(233,141,41)" fg:x="413" fg:w="3"/><text x="41.9672%" y="191.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.10%)</title><rect x="42.0202%" y="229" width="0.1010%" height="15" fill="rgb(239,167,4)" fg:x="416" fg:w="1"/><text x="42.2702%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (59 samples, 5.96%)</title><rect x="36.2626%" y="261" width="5.9596%" height="15" fill="rgb(209,217,16)" fg:x="359" fg:w="59"/><text x="36.5126%" y="271.50">tokio::r..</text></g><g><title>tokio::runtime::time::Driver::park_internal (39 samples, 3.94%)</title><rect x="38.2828%" y="245" width="3.9394%" height="15" fill="rgb(219,88,35)" fg:x="379" fg:w="39"/><text x="38.5328%" y="255.50">toki..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.10%)</title><rect x="42.1212%" y="229" width="0.1010%" height="15" fill="rgb(220,193,23)" fg:x="417" fg:w="1"/><text x="42.3712%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (9 samples, 0.91%)</title><rect x="42.2222%" y="261" width="0.9091%" height="15" fill="rgb(230,90,52)" fg:x="418" fg:w="9"/><text x="42.4722%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.20%)</title><rect x="47.4747%" y="213" width="0.2020%" height="15" fill="rgb(252,106,19)" fg:x="470" fg:w="2"/><text x="47.7247%" y="223.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (1 samples, 0.10%)</title><rect x="47.6768%" y="213" width="0.1010%" height="15" fill="rgb(206,74,20)" fg:x="472" fg:w="1"/><text x="47.9268%" y="223.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (1 samples, 0.10%)</title><rect x="47.6768%" y="197" width="0.1010%" height="15" fill="rgb(230,138,44)" fg:x="472" fg:w="1"/><text x="47.9268%" y="207.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (1 samples, 0.10%)</title><rect x="47.6768%" y="181" width="0.1010%" height="15" fill="rgb(235,182,43)" fg:x="472" fg:w="1"/><text x="47.9268%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.10%)</title><rect x="47.6768%" y="165" width="0.1010%" height="15" fill="rgb(242,16,51)" fg:x="472" fg:w="1"/><text x="47.9268%" y="175.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (2 samples, 0.20%)</title><rect x="47.7778%" y="213" width="0.2020%" height="15" fill="rgb(248,9,4)" fg:x="473" fg:w="2"/><text x="48.0278%" y="223.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::contains_key (1 samples, 0.10%)</title><rect x="47.9798%" y="213" width="0.1010%" height="15" fill="rgb(210,31,22)" fg:x="475" fg:w="1"/><text x="48.2298%" y="223.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.10%)</title><rect x="48.0808%" y="213" width="0.1010%" height="15" fill="rgb(239,54,39)" fg:x="476" fg:w="1"/><text x="48.3308%" y="223.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (4 samples, 0.40%)</title><rect x="48.1818%" y="213" width="0.4040%" height="15" fill="rgb(230,99,41)" fg:x="477" fg:w="4"/><text x="48.4318%" y="223.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (1 samples, 0.10%)</title><rect x="48.4848%" y="197" width="0.1010%" height="15" fill="rgb(253,106,12)" fg:x="480" fg:w="1"/><text x="48.7348%" y="207.50"></text></g><g><title>http::status::StatusCode::canonical_reason (2 samples, 0.20%)</title><rect x="48.5859%" y="213" width="0.2020%" height="15" fill="rgb(213,46,41)" fg:x="481" fg:w="2"/><text x="48.8359%" y="223.50"></text></g><g><title>httparse::parse_headers_iter_uninit (2 samples, 0.20%)</title><rect x="48.7879%" y="213" width="0.2020%" height="15" fill="rgb(215,133,35)" fg:x="483" fg:w="2"/><text x="49.0379%" y="223.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (1 samples, 0.10%)</title><rect x="48.9899%" y="197" width="0.1010%" height="15" fill="rgb(213,28,5)" fg:x="485" fg:w="1"/><text x="49.2399%" y="207.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (4 samples, 0.40%)</title><rect x="48.9899%" y="213" width="0.4040%" height="15" fill="rgb(215,77,49)" fg:x="485" fg:w="4"/><text x="49.2399%" y="223.50"></text></g><g><title>hyper::headers::is_chunked (3 samples, 0.30%)</title><rect x="49.0909%" y="197" width="0.3030%" height="15" fill="rgb(248,100,22)" fg:x="486" fg:w="3"/><text x="49.3409%" y="207.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (3 samples, 0.30%)</title><rect x="49.0909%" y="181" width="0.3030%" height="15" fill="rgb(208,67,9)" fg:x="486" fg:w="3"/><text x="49.3409%" y="191.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.10%)</title><rect x="49.2929%" y="165" width="0.1010%" height="15" fill="rgb(219,133,21)" fg:x="488" fg:w="1"/><text x="49.5429%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.10%)</title><rect x="49.3939%" y="197" width="0.1010%" height="15" fill="rgb(246,46,29)" fg:x="489" fg:w="1"/><text x="49.6439%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.10%)</title><rect x="49.3939%" y="181" width="0.1010%" height="15" fill="rgb(246,185,52)" fg:x="489" fg:w="1"/><text x="49.6439%" y="191.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (1 samples, 0.10%)</title><rect x="49.3939%" y="165" width="0.1010%" height="15" fill="rgb(252,136,11)" fg:x="489" fg:w="1"/><text x="49.6439%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.10%)</title><rect x="49.3939%" y="149" width="0.1010%" height="15" fill="rgb(219,138,53)" fg:x="489" fg:w="1"/><text x="49.6439%" y="159.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.10%)</title><rect x="49.4949%" y="197" width="0.1010%" height="15" fill="rgb(211,51,23)" fg:x="490" fg:w="1"/><text x="49.7449%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (2 samples, 0.20%)</title><rect x="49.6970%" y="181" width="0.2020%" height="15" fill="rgb(247,221,28)" fg:x="492" fg:w="2"/><text x="49.9470%" y="191.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.20%)</title><rect x="49.6970%" y="165" width="0.2020%" height="15" fill="rgb(251,222,45)" fg:x="492" fg:w="2"/><text x="49.9470%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (6 samples, 0.61%)</title><rect x="49.3939%" y="213" width="0.6061%" height="15" fill="rgb(217,162,53)" fg:x="489" fg:w="6"/><text x="49.6439%" y="223.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (4 samples, 0.40%)</title><rect x="49.5960%" y="197" width="0.4040%" height="15" fill="rgb(229,93,14)" fg:x="491" fg:w="4"/><text x="49.8460%" y="207.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.10%)</title><rect x="49.8990%" y="181" width="0.1010%" height="15" fill="rgb(209,67,49)" fg:x="494" fg:w="1"/><text x="50.1490%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="50.5051%" y="197" width="0.1010%" height="15" fill="rgb(213,87,29)" fg:x="500" fg:w="1"/><text x="50.7551%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="50.6061%" y="197" width="0.1010%" height="15" fill="rgb(205,151,52)" fg:x="501" fg:w="1"/><text x="50.8561%" y="207.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="50.6061%" y="181" width="0.1010%" height="15" fill="rgb(253,215,39)" fg:x="501" fg:w="1"/><text x="50.8561%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="50.6061%" y="165" width="0.1010%" height="15" fill="rgb(221,220,41)" fg:x="501" fg:w="1"/><text x="50.8561%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.10%)</title><rect x="50.6061%" y="149" width="0.1010%" height="15" fill="rgb(218,133,21)" fg:x="501" fg:w="1"/><text x="50.8561%" y="159.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert2 (3 samples, 0.30%)</title><rect x="50.7071%" y="197" width="0.3030%" height="15" fill="rgb(221,193,43)" fg:x="502" fg:w="3"/><text x="50.9571%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.10%)</title><rect x="50.9091%" y="181" width="0.1010%" height="15" fill="rgb(240,128,52)" fg:x="504" fg:w="1"/><text x="51.1591%" y="191.50"></text></g><g><title>hyper::headers::content_length_parse_all (1 samples, 0.10%)</title><rect x="51.0101%" y="197" width="0.1010%" height="15" fill="rgb(253,114,12)" fg:x="505" fg:w="1"/><text x="51.2601%" y="207.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (12 samples, 1.21%)</title><rect x="50.0000%" y="213" width="1.2121%" height="15" fill="rgb(215,223,47)" fg:x="495" fg:w="12"/><text x="50.2500%" y="223.50"></text></g><g><title>hyper::proto::h1::role::write_headers (1 samples, 0.10%)</title><rect x="51.1111%" y="197" width="0.1010%" height="15" fill="rgb(248,225,23)" fg:x="506" fg:w="1"/><text x="51.3611%" y="207.50"></text></g><g><title>http::header::name::StandardHeader::as_str.3320 (1 samples, 0.10%)</title><rect x="51.1111%" y="181" width="0.1010%" height="15" fill="rgb(250,108,0)" fg:x="506" fg:w="1"/><text x="51.3611%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::encode::EncodedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.10%)</title><rect x="51.4141%" y="197" width="0.1010%" height="15" fill="rgb(228,208,7)" fg:x="509" fg:w="1"/><text x="51.6641%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="51.5152%" y="197" width="0.1010%" height="15" fill="rgb(244,45,10)" fg:x="510" fg:w="1"/><text x="51.7652%" y="207.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (5 samples, 0.51%)</title><rect x="51.2121%" y="213" width="0.5051%" height="15" fill="rgb(207,125,25)" fg:x="507" fg:w="5"/><text x="51.4621%" y="223.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.10%)</title><rect x="51.6162%" y="197" width="0.1010%" height="15" fill="rgb(210,195,18)" fg:x="511" fg:w="1"/><text x="51.8662%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4 samples, 0.40%)</title><rect x="51.7172%" y="213" width="0.4040%" height="15" fill="rgb(249,80,12)" fg:x="512" fg:w="4"/><text x="51.9672%" y="223.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (4 samples, 0.40%)</title><rect x="51.7172%" y="197" width="0.4040%" height="15" fill="rgb(221,65,9)" fg:x="512" fg:w="4"/><text x="51.9672%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.10%)</title><rect x="52.0202%" y="181" width="0.1010%" height="15" fill="rgb(235,49,36)" fg:x="515" fg:w="1"/><text x="52.2702%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="52.1212%" y="213" width="0.1010%" height="15" fill="rgb(225,32,20)" fg:x="516" fg:w="1"/><text x="52.3712%" y="223.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (69 samples, 6.97%)</title><rect x="45.3535%" y="229" width="6.9697%" height="15" fill="rgb(215,141,46)" fg:x="449" fg:w="69"/><text x="45.6035%" y="239.50">&lt;hyper::c..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (1 samples, 0.10%)</title><rect x="52.2222%" y="213" width="0.1010%" height="15" fill="rgb(250,160,47)" fg:x="517" fg:w="1"/><text x="52.4722%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.10%)</title><rect x="52.2222%" y="197" width="0.1010%" height="15" fill="rgb(216,222,40)" fg:x="517" fg:w="1"/><text x="52.4722%" y="207.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.10%)</title><rect x="53.4343%" y="165" width="0.1010%" height="15" fill="rgb(234,217,39)" fg:x="529" fg:w="1"/><text x="53.6843%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (7 samples, 0.71%)</title><rect x="52.9293%" y="197" width="0.7071%" height="15" fill="rgb(207,178,40)" fg:x="524" fg:w="7"/><text x="53.1793%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.61%)</title><rect x="53.0303%" y="181" width="0.6061%" height="15" fill="rgb(221,136,13)" fg:x="525" fg:w="6"/><text x="53.2803%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="53.5354%" y="165" width="0.1010%" height="15" fill="rgb(249,199,10)" fg:x="530" fg:w="1"/><text x="53.7854%" y="175.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="54.9495%" y="133" width="0.1010%" height="15" fill="rgb(249,222,13)" fg:x="544" fg:w="1"/><text x="55.1995%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (3 samples, 0.30%)</title><rect x="54.8485%" y="149" width="0.3030%" height="15" fill="rgb(244,185,38)" fg:x="543" fg:w="3"/><text x="55.0985%" y="159.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="55.0505%" y="133" width="0.1010%" height="15" fill="rgb(236,202,9)" fg:x="545" fg:w="1"/><text x="55.3005%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="55.0505%" y="117" width="0.1010%" height="15" fill="rgb(250,229,37)" fg:x="545" fg:w="1"/><text x="55.3005%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.10%)</title><rect x="55.8586%" y="85" width="0.1010%" height="15" fill="rgb(206,174,23)" fg:x="553" fg:w="1"/><text x="56.1086%" y="95.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="55.8586%" y="69" width="0.1010%" height="15" fill="rgb(211,33,43)" fg:x="553" fg:w="1"/><text x="56.1086%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (5 samples, 0.51%)</title><rect x="55.5556%" y="101" width="0.5051%" height="15" fill="rgb(245,58,50)" fg:x="550" fg:w="5"/><text x="55.8056%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.10%)</title><rect x="55.9596%" y="85" width="0.1010%" height="15" fill="rgb(244,68,36)" fg:x="554" fg:w="1"/><text x="56.2096%" y="95.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (1 samples, 0.10%)</title><rect x="55.9596%" y="69" width="0.1010%" height="15" fill="rgb(232,229,15)" fg:x="554" fg:w="1"/><text x="56.2096%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (11 samples, 1.11%)</title><rect x="55.1515%" y="149" width="1.1111%" height="15" fill="rgb(254,30,23)" fg:x="546" fg:w="11"/><text x="55.4015%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (9 samples, 0.91%)</title><rect x="55.3535%" y="133" width="0.9091%" height="15" fill="rgb(235,160,14)" fg:x="548" fg:w="9"/><text x="55.6035%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (8 samples, 0.81%)</title><rect x="55.4545%" y="117" width="0.8081%" height="15" fill="rgb(212,155,44)" fg:x="549" fg:w="8"/><text x="55.7045%" y="127.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (2 samples, 0.20%)</title><rect x="56.0606%" y="101" width="0.2020%" height="15" fill="rgb(226,2,50)" fg:x="555" fg:w="2"/><text x="56.3106%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="56.3636%" y="133" width="0.1010%" height="15" fill="rgb(234,177,6)" fg:x="558" fg:w="1"/><text x="56.6136%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (24 samples, 2.42%)</title><rect x="54.1414%" y="165" width="2.4242%" height="15" fill="rgb(217,24,9)" fg:x="536" fg:w="24"/><text x="54.3914%" y="175.50">co..</text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.30%)</title><rect x="56.2626%" y="149" width="0.3030%" height="15" fill="rgb(220,13,46)" fg:x="557" fg:w="3"/><text x="56.5126%" y="159.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.10%)</title><rect x="56.4646%" y="133" width="0.1010%" height="15" fill="rgb(239,221,27)" fg:x="559" fg:w="1"/><text x="56.7146%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (26 samples, 2.63%)</title><rect x="54.0404%" y="181" width="2.6263%" height="15" fill="rgb(222,198,25)" fg:x="535" fg:w="26"/><text x="54.2904%" y="191.50">&lt;c..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="56.5657%" y="165" width="0.1010%" height="15" fill="rgb(211,99,13)" fg:x="560" fg:w="1"/><text x="56.8157%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (43 samples, 4.34%)</title><rect x="52.4242%" y="213" width="4.3434%" height="15" fill="rgb(232,111,31)" fg:x="519" fg:w="43"/><text x="52.6742%" y="223.50">&lt;toki..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (31 samples, 3.13%)</title><rect x="53.6364%" y="197" width="3.1313%" height="15" fill="rgb(245,82,37)" fg:x="531" fg:w="31"/><text x="53.8864%" y="207.50">red..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.10%)</title><rect x="56.6667%" y="181" width="0.1010%" height="15" fill="rgb(227,149,46)" fg:x="561" fg:w="1"/><text x="56.9167%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (1 samples, 0.10%)</title><rect x="56.8687%" y="197" width="0.1010%" height="15" fill="rgb(218,36,50)" fg:x="563" fg:w="1"/><text x="57.1187%" y="207.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (4 samples, 0.40%)</title><rect x="56.7677%" y="213" width="0.4040%" height="15" fill="rgb(226,80,48)" fg:x="562" fg:w="4"/><text x="57.0177%" y="223.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 0.20%)</title><rect x="56.9697%" y="197" width="0.2020%" height="15" fill="rgb(238,224,15)" fg:x="564" fg:w="2"/><text x="57.2197%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="57.6768%" y="197" width="0.1010%" height="15" fill="rgb(241,136,10)" fg:x="571" fg:w="1"/><text x="57.9268%" y="207.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (57 samples, 5.76%)</title><rect x="52.3232%" y="229" width="5.7576%" height="15" fill="rgb(208,32,45)" fg:x="518" fg:w="57"/><text x="52.5732%" y="239.50">&lt;redis:..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (9 samples, 0.91%)</title><rect x="57.1717%" y="213" width="0.9091%" height="15" fill="rgb(207,135,9)" fg:x="566" fg:w="9"/><text x="57.4217%" y="223.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.30%)</title><rect x="57.7778%" y="197" width="0.3030%" height="15" fill="rgb(206,86,44)" fg:x="572" fg:w="3"/><text x="58.0278%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.20%)</title><rect x="57.8788%" y="181" width="0.2020%" height="15" fill="rgb(245,177,15)" fg:x="573" fg:w="2"/><text x="58.1288%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (3 samples, 0.30%)</title><rect x="58.0808%" y="229" width="0.3030%" height="15" fill="rgb(206,64,50)" fg:x="575" fg:w="3"/><text x="58.3308%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="58.2828%" y="213" width="0.1010%" height="15" fill="rgb(234,36,40)" fg:x="577" fg:w="1"/><text x="58.5328%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="58.5859%" y="213" width="0.1010%" height="15" fill="rgb(213,64,8)" fg:x="580" fg:w="1"/><text x="58.8359%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="58.5859%" y="197" width="0.1010%" height="15" fill="rgb(210,75,36)" fg:x="580" fg:w="1"/><text x="58.8359%" y="207.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.10%)</title><rect x="58.6869%" y="213" width="0.1010%" height="15" fill="rgb(229,88,21)" fg:x="581" fg:w="1"/><text x="58.9369%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (7 samples, 0.71%)</title><rect x="58.3838%" y="229" width="0.7071%" height="15" fill="rgb(252,204,47)" fg:x="578" fg:w="7"/><text x="58.6338%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.30%)</title><rect x="58.7879%" y="213" width="0.3030%" height="15" fill="rgb(208,77,27)" fg:x="582" fg:w="3"/><text x="59.0379%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="58.9899%" y="197" width="0.1010%" height="15" fill="rgb(221,76,26)" fg:x="584" fg:w="1"/><text x="59.2399%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="59.0909%" y="229" width="0.1010%" height="15" fill="rgb(225,139,18)" fg:x="585" fg:w="1"/><text x="59.3409%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.10%)</title><rect x="59.1919%" y="229" width="0.1010%" height="15" fill="rgb(230,137,11)" fg:x="586" fg:w="1"/><text x="59.4419%" y="239.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (145 samples, 14.65%)</title><rect x="44.8485%" y="245" width="14.6465%" height="15" fill="rgb(212,28,1)" fg:x="444" fg:w="145"/><text x="45.0985%" y="255.50">&lt;futures_util::future:..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.20%)</title><rect x="59.2929%" y="229" width="0.2020%" height="15" fill="rgb(248,164,17)" fg:x="587" fg:w="2"/><text x="59.5429%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="61.1111%" y="229" width="0.1010%" height="15" fill="rgb(222,171,42)" fg:x="605" fg:w="1"/><text x="61.3611%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="61.6162%" y="181" width="0.1010%" height="15" fill="rgb(243,84,45)" fg:x="610" fg:w="1"/><text x="61.8662%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.10%)</title><rect x="61.6162%" y="165" width="0.1010%" height="15" fill="rgb(252,49,23)" fg:x="610" fg:w="1"/><text x="61.8662%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.10%)</title><rect x="61.9192%" y="165" width="0.1010%" height="15" fill="rgb(215,19,7)" fg:x="613" fg:w="1"/><text x="62.1692%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.5869 (1 samples, 0.10%)</title><rect x="61.9192%" y="149" width="0.1010%" height="15" fill="rgb(238,81,41)" fg:x="613" fg:w="1"/><text x="62.1692%" y="159.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.10%)</title><rect x="61.9192%" y="133" width="0.1010%" height="15" fill="rgb(210,199,37)" fg:x="613" fg:w="1"/><text x="62.1692%" y="143.50"></text></g><g><title>url::host::Host::parse (6 samples, 0.61%)</title><rect x="61.7172%" y="181" width="0.6061%" height="15" fill="rgb(244,192,49)" fg:x="611" fg:w="6"/><text x="61.9672%" y="191.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (3 samples, 0.30%)</title><rect x="62.0202%" y="165" width="0.3030%" height="15" fill="rgb(226,211,11)" fg:x="614" fg:w="3"/><text x="62.2702%" y="175.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (12 samples, 1.21%)</title><rect x="61.2121%" y="229" width="1.2121%" height="15" fill="rgb(236,162,54)" fg:x="606" fg:w="12"/><text x="61.4621%" y="239.50"></text></g><g><title>url::ParseOptions::parse (12 samples, 1.21%)</title><rect x="61.2121%" y="213" width="1.2121%" height="15" fill="rgb(220,229,9)" fg:x="606" fg:w="12"/><text x="61.4621%" y="223.50"></text></g><g><title>url::parser::Parser::after_double_slash (11 samples, 1.11%)</title><rect x="61.3131%" y="197" width="1.1111%" height="15" fill="rgb(250,87,22)" fg:x="607" fg:w="11"/><text x="61.5631%" y="207.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.10%)</title><rect x="62.3232%" y="181" width="0.1010%" height="15" fill="rgb(239,43,17)" fg:x="617" fg:w="1"/><text x="62.5732%" y="191.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log (1 samples, 0.10%)</title><rect x="62.4242%" y="229" width="0.1010%" height="15" fill="rgb(231,177,25)" fg:x="618" fg:w="1"/><text x="62.6742%" y="239.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::{{closure}} (1 samples, 0.10%)</title><rect x="62.4242%" y="213" width="0.1010%" height="15" fill="rgb(219,179,1)" fg:x="618" fg:w="1"/><text x="62.6742%" y="223.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.10%)</title><rect x="62.7273%" y="213" width="0.1010%" height="15" fill="rgb(238,219,53)" fg:x="621" fg:w="1"/><text x="62.9773%" y="223.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.20%)</title><rect x="62.8283%" y="213" width="0.2020%" height="15" fill="rgb(232,167,36)" fg:x="622" fg:w="2"/><text x="63.0783%" y="223.50"></text></g><g><title>core::fmt::write (2 samples, 0.20%)</title><rect x="62.8283%" y="197" width="0.2020%" height="15" fill="rgb(244,19,51)" fg:x="622" fg:w="2"/><text x="63.0783%" y="207.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.20%)</title><rect x="63.4343%" y="181" width="0.2020%" height="15" fill="rgb(224,6,22)" fg:x="628" fg:w="2"/><text x="63.6843%" y="191.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.10%)</title><rect x="63.5354%" y="165" width="0.1010%" height="15" fill="rgb(224,145,5)" fg:x="629" fg:w="1"/><text x="63.7854%" y="175.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (1 samples, 0.10%)</title><rect x="63.6364%" y="181" width="0.1010%" height="15" fill="rgb(234,130,49)" fg:x="630" fg:w="1"/><text x="63.8864%" y="191.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (2 samples, 0.20%)</title><rect x="63.7374%" y="181" width="0.2020%" height="15" fill="rgb(254,6,2)" fg:x="631" fg:w="2"/><text x="63.9874%" y="191.50"></text></g><g><title>hyper_util::client::legacy::pool::Pool&lt;T,K&gt;::reuse (1 samples, 0.10%)</title><rect x="63.8384%" y="165" width="0.1010%" height="15" fill="rgb(208,96,46)" fg:x="632" fg:w="1"/><text x="64.0884%" y="175.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="63.9394%" y="181" width="0.1010%" height="15" fill="rgb(239,3,39)" fg:x="633" fg:w="1"/><text x="64.1894%" y="191.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (1 samples, 0.10%)</title><rect x="64.0404%" y="181" width="0.1010%" height="15" fill="rgb(233,210,1)" fg:x="634" fg:w="1"/><text x="64.2904%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.20%)</title><rect x="64.1414%" y="181" width="0.2020%" height="15" fill="rgb(244,137,37)" fg:x="635" fg:w="2"/><text x="64.3914%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.10%)</title><rect x="64.2424%" y="165" width="0.1010%" height="15" fill="rgb(240,136,2)" fg:x="636" fg:w="1"/><text x="64.4924%" y="175.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="64.3434%" y="181" width="0.1010%" height="15" fill="rgb(239,18,37)" fg:x="637" fg:w="1"/><text x="64.5934%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="64.4444%" y="181" width="0.1010%" height="15" fill="rgb(218,185,22)" fg:x="638" fg:w="1"/><text x="64.6944%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.10%)</title><rect x="64.4444%" y="165" width="0.1010%" height="15" fill="rgb(225,218,4)" fg:x="638" fg:w="1"/><text x="64.6944%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Checkout&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (2 samples, 0.20%)</title><rect x="64.5455%" y="181" width="0.2020%" height="15" fill="rgb(230,182,32)" fg:x="639" fg:w="2"/><text x="64.7955%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.10%)</title><rect x="64.7475%" y="181" width="0.1010%" height="15" fill="rgb(242,56,43)" fg:x="641" fg:w="1"/><text x="64.9975%" y="191.50"></text></g><g><title>http::uri::authority::Authority::port (2 samples, 0.20%)</title><rect x="64.8485%" y="181" width="0.2020%" height="15" fill="rgb(233,99,24)" fg:x="642" fg:w="2"/><text x="65.0985%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (1 samples, 0.10%)</title><rect x="64.9495%" y="165" width="0.1010%" height="15" fill="rgb(234,209,42)" fg:x="643" fg:w="1"/><text x="65.1995%" y="175.50"></text></g><g><title>http::uri::authority::host (1 samples, 0.10%)</title><rect x="65.0505%" y="181" width="0.1010%" height="15" fill="rgb(227,7,12)" fg:x="644" fg:w="1"/><text x="65.3005%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.1930 (1 samples, 0.10%)</title><rect x="65.0505%" y="165" width="0.1010%" height="15" fill="rgb(245,203,43)" fg:x="644" fg:w="1"/><text x="65.3005%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (23 samples, 2.32%)</title><rect x="63.0303%" y="213" width="2.3232%" height="15" fill="rgb(238,205,33)" fg:x="624" fg:w="23"/><text x="63.2803%" y="223.50">&lt;..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (21 samples, 2.12%)</title><rect x="63.2323%" y="197" width="2.1212%" height="15" fill="rgb(231,56,7)" fg:x="626" fg:w="21"/><text x="63.4823%" y="207.50">h..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (2 samples, 0.20%)</title><rect x="65.1515%" y="181" width="0.2020%" height="15" fill="rgb(244,186,29)" fg:x="645" fg:w="2"/><text x="65.4015%" y="191.50"></text></g><g><title>http::uri::builder::Builder::map (1 samples, 0.10%)</title><rect x="65.2525%" y="165" width="0.1010%" height="15" fill="rgb(234,111,31)" fg:x="646" fg:w="1"/><text x="65.5025%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.5871 (1 samples, 0.10%)</title><rect x="65.7576%" y="165" width="0.1010%" height="15" fill="rgb(241,149,10)" fg:x="651" fg:w="1"/><text x="66.0076%" y="175.50"></text></g><g><title>core::fmt::write (3 samples, 0.30%)</title><rect x="65.7576%" y="181" width="0.3030%" height="15" fill="rgb(249,206,44)" fg:x="651" fg:w="3"/><text x="66.0076%" y="191.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (2 samples, 0.20%)</title><rect x="65.8586%" y="165" width="0.2020%" height="15" fill="rgb(251,153,30)" fg:x="652" fg:w="2"/><text x="66.1086%" y="175.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (1 samples, 0.10%)</title><rect x="66.2626%" y="165" width="0.1010%" height="15" fill="rgb(239,152,38)" fg:x="656" fg:w="1"/><text x="66.5126%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.10%)</title><rect x="66.3636%" y="165" width="0.1010%" height="15" fill="rgb(249,139,47)" fg:x="657" fg:w="1"/><text x="66.6136%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (40 samples, 4.04%)</title><rect x="62.5253%" y="229" width="4.0404%" height="15" fill="rgb(244,64,35)" fg:x="619" fg:w="40"/><text x="62.7753%" y="239.50">&lt;req..</text></g><g><title>url::ParseOptions::parse (12 samples, 1.21%)</title><rect x="65.3535%" y="213" width="1.2121%" height="15" fill="rgb(216,46,15)" fg:x="647" fg:w="12"/><text x="65.6035%" y="223.50"></text></g><g><title>url::parser::Parser::after_double_slash (12 samples, 1.21%)</title><rect x="65.3535%" y="197" width="1.2121%" height="15" fill="rgb(250,74,19)" fg:x="647" fg:w="12"/><text x="65.6035%" y="207.50"></text></g><g><title>url::host::Host::parse (5 samples, 0.51%)</title><rect x="66.0606%" y="181" width="0.5051%" height="15" fill="rgb(249,42,33)" fg:x="654" fg:w="5"/><text x="66.3106%" y="191.50"></text></g><g><title>url::host::parse_ipv4number (1 samples, 0.10%)</title><rect x="66.4646%" y="165" width="0.1010%" height="15" fill="rgb(242,149,17)" fg:x="658" fg:w="1"/><text x="66.7146%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.10%)</title><rect x="68.9899%" y="165" width="0.1010%" height="15" fill="rgb(244,29,21)" fg:x="683" fg:w="1"/><text x="69.2399%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.10%)</title><rect x="68.9899%" y="149" width="0.1010%" height="15" fill="rgb(220,130,37)" fg:x="683" fg:w="1"/><text x="69.2399%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.30%)</title><rect x="69.0909%" y="165" width="0.3030%" height="15" fill="rgb(211,67,2)" fg:x="684" fg:w="3"/><text x="69.3409%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.30%)</title><rect x="69.0909%" y="149" width="0.3030%" height="15" fill="rgb(235,68,52)" fg:x="684" fg:w="3"/><text x="69.3409%" y="159.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (2 samples, 0.20%)</title><rect x="69.1919%" y="133" width="0.2020%" height="15" fill="rgb(246,142,3)" fg:x="685" fg:w="2"/><text x="69.4419%" y="143.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (7 samples, 0.71%)</title><rect x="68.7879%" y="181" width="0.7071%" height="15" fill="rgb(241,25,7)" fg:x="681" fg:w="7"/><text x="69.0379%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.10%)</title><rect x="69.3939%" y="165" width="0.1010%" height="15" fill="rgb(242,119,39)" fg:x="687" fg:w="1"/><text x="69.6439%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.10%)</title><rect x="69.3939%" y="149" width="0.1010%" height="15" fill="rgb(241,98,45)" fg:x="687" fg:w="1"/><text x="69.6439%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.10%)</title><rect x="69.3939%" y="133" width="0.1010%" height="15" fill="rgb(254,28,30)" fg:x="687" fg:w="1"/><text x="69.6439%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.30%)</title><rect x="69.4949%" y="149" width="0.3030%" height="15" fill="rgb(241,142,54)" fg:x="688" fg:w="3"/><text x="69.7449%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.20%)</title><rect x="69.5960%" y="133" width="0.2020%" height="15" fill="rgb(222,85,15)" fg:x="689" fg:w="2"/><text x="69.8460%" y="143.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (8 samples, 0.81%)</title><rect x="69.4949%" y="165" width="0.8081%" height="15" fill="rgb(210,85,47)" fg:x="688" fg:w="8"/><text x="69.7449%" y="175.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (5 samples, 0.51%)</title><rect x="69.7980%" y="149" width="0.5051%" height="15" fill="rgb(224,206,25)" fg:x="691" fg:w="5"/><text x="70.0480%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (4 samples, 0.40%)</title><rect x="69.8990%" y="133" width="0.4040%" height="15" fill="rgb(243,201,19)" fg:x="692" fg:w="4"/><text x="70.1490%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (4 samples, 0.40%)</title><rect x="69.8990%" y="117" width="0.4040%" height="15" fill="rgb(236,59,4)" fg:x="692" fg:w="4"/><text x="70.1490%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="70.2020%" y="101" width="0.1010%" height="15" fill="rgb(254,179,45)" fg:x="695" fg:w="1"/><text x="70.4520%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.10%)</title><rect x="70.2020%" y="85" width="0.1010%" height="15" fill="rgb(226,14,10)" fg:x="695" fg:w="1"/><text x="70.4520%" y="95.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (3 samples, 0.30%)</title><rect x="70.3030%" y="165" width="0.3030%" height="15" fill="rgb(244,27,41)" fg:x="696" fg:w="3"/><text x="70.5530%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="70.5051%" y="149" width="0.1010%" height="15" fill="rgb(235,35,32)" fg:x="698" fg:w="1"/><text x="70.7551%" y="159.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (13 samples, 1.31%)</title><rect x="69.4949%" y="181" width="1.3131%" height="15" fill="rgb(218,68,31)" fg:x="688" fg:w="13"/><text x="69.7449%" y="191.50"></text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.20%)</title><rect x="70.6061%" y="165" width="0.2020%" height="15" fill="rgb(207,120,37)" fg:x="699" fg:w="2"/><text x="70.8561%" y="175.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.10%)</title><rect x="70.7071%" y="149" width="0.1010%" height="15" fill="rgb(227,98,0)" fg:x="700" fg:w="1"/><text x="70.9571%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="71.0101%" y="165" width="0.1010%" height="15" fill="rgb(207,7,3)" fg:x="703" fg:w="1"/><text x="71.2601%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="71.1111%" y="165" width="0.1010%" height="15" fill="rgb(206,98,19)" fg:x="704" fg:w="1"/><text x="71.3611%" y="175.50"></text></g><g><title>redis::connection::connection_setup_pipeline (7 samples, 0.71%)</title><rect x="70.8081%" y="181" width="0.7071%" height="15" fill="rgb(217,5,26)" fg:x="701" fg:w="7"/><text x="71.0581%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.30%)</title><rect x="71.2121%" y="165" width="0.3030%" height="15" fill="rgb(235,190,38)" fg:x="705" fg:w="3"/><text x="71.4621%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.30%)</title><rect x="71.2121%" y="149" width="0.3030%" height="15" fill="rgb(247,86,24)" fg:x="705" fg:w="3"/><text x="71.4621%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.30%)</title><rect x="71.2121%" y="133" width="0.3030%" height="15" fill="rgb(205,101,16)" fg:x="705" fg:w="3"/><text x="71.4621%" y="143.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.10%)</title><rect x="71.5152%" y="181" width="0.1010%" height="15" fill="rgb(246,168,33)" fg:x="708" fg:w="1"/><text x="71.7652%" y="191.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (45 samples, 4.55%)</title><rect x="67.1717%" y="213" width="4.5455%" height="15" fill="rgb(231,114,1)" fg:x="665" fg:w="45"/><text x="67.4217%" y="223.50">redis..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (42 samples, 4.24%)</title><rect x="67.4747%" y="197" width="4.2424%" height="15" fill="rgb(207,184,53)" fg:x="668" fg:w="42"/><text x="67.7247%" y="207.50">redis..</text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1 samples, 0.10%)</title><rect x="71.6162%" y="181" width="0.1010%" height="15" fill="rgb(224,95,51)" fg:x="709" fg:w="1"/><text x="71.8662%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="71.6162%" y="165" width="0.1010%" height="15" fill="rgb(212,188,45)" fg:x="709" fg:w="1"/><text x="71.8662%" y="175.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.10%)</title><rect x="71.6162%" y="149" width="0.1010%" height="15" fill="rgb(223,154,38)" fg:x="709" fg:w="1"/><text x="71.8662%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (1 samples, 0.10%)</title><rect x="71.9192%" y="197" width="0.1010%" height="15" fill="rgb(251,22,52)" fg:x="712" fg:w="1"/><text x="72.1692%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (1 samples, 0.10%)</title><rect x="71.9192%" y="181" width="0.1010%" height="15" fill="rgb(229,209,22)" fg:x="712" fg:w="1"/><text x="72.1692%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (1 samples, 0.10%)</title><rect x="71.9192%" y="165" width="0.1010%" height="15" fill="rgb(234,138,34)" fg:x="712" fg:w="1"/><text x="72.1692%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (56 samples, 5.66%)</title><rect x="66.5657%" y="229" width="5.6566%" height="15" fill="rgb(212,95,11)" fg:x="659" fg:w="56"/><text x="66.8157%" y="239.50">&lt;rinha_..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (5 samples, 0.51%)</title><rect x="71.7172%" y="213" width="0.5051%" height="15" fill="rgb(240,179,47)" fg:x="710" fg:w="5"/><text x="71.9672%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.20%)</title><rect x="72.0202%" y="197" width="0.2020%" height="15" fill="rgb(240,163,11)" fg:x="713" fg:w="2"/><text x="72.2702%" y="207.50"></text></g><g><title>core::fmt::write (2 samples, 0.20%)</title><rect x="72.0202%" y="181" width="0.2020%" height="15" fill="rgb(236,37,12)" fg:x="713" fg:w="2"/><text x="72.2702%" y="191.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.10%)</title><rect x="72.1212%" y="165" width="0.1010%" height="15" fill="rgb(232,164,16)" fg:x="714" fg:w="1"/><text x="72.3712%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.1911 (1 samples, 0.10%)</title><rect x="72.1212%" y="149" width="0.1010%" height="15" fill="rgb(244,205,15)" fg:x="714" fg:w="1"/><text x="72.3712%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="72.1212%" y="133" width="0.1010%" height="15" fill="rgb(223,117,47)" fg:x="714" fg:w="1"/><text x="72.3712%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="72.1212%" y="117" width="0.1010%" height="15" fill="rgb(244,107,35)" fg:x="714" fg:w="1"/><text x="72.3712%" y="127.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (5 samples, 0.51%)</title><rect x="73.4343%" y="197" width="0.5051%" height="15" fill="rgb(205,140,8)" fg:x="727" fg:w="5"/><text x="73.6843%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (4 samples, 0.40%)</title><rect x="73.5354%" y="181" width="0.4040%" height="15" fill="rgb(228,84,46)" fg:x="728" fg:w="4"/><text x="73.7854%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (8 samples, 0.81%)</title><rect x="73.2323%" y="213" width="0.8081%" height="15" fill="rgb(254,188,9)" fg:x="725" fg:w="8"/><text x="73.4823%" y="223.50"></text></g><g><title>redis::pipeline::encode_pipeline (1 samples, 0.10%)</title><rect x="73.9394%" y="197" width="0.1010%" height="15" fill="rgb(206,112,54)" fg:x="732" fg:w="1"/><text x="74.1894%" y="207.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.10%)</title><rect x="73.9394%" y="181" width="0.1010%" height="15" fill="rgb(216,84,49)" fg:x="732" fg:w="1"/><text x="74.1894%" y="191.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (5 samples, 0.51%)</title><rect x="74.4444%" y="181" width="0.5051%" height="15" fill="rgb(214,194,35)" fg:x="737" fg:w="5"/><text x="74.6944%" y="191.50"></text></g><g><title>core::fmt::write (4 samples, 0.40%)</title><rect x="74.5455%" y="165" width="0.4040%" height="15" fill="rgb(249,28,3)" fg:x="738" fg:w="4"/><text x="74.7955%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.20%)</title><rect x="74.7475%" y="149" width="0.2020%" height="15" fill="rgb(222,56,52)" fg:x="740" fg:w="2"/><text x="74.9975%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.10%)</title><rect x="74.8485%" y="133" width="0.1010%" height="15" fill="rgb(245,217,50)" fg:x="741" fg:w="1"/><text x="75.0985%" y="143.50"></text></g><g><title>&lt;time::time::Time as powerfmt::smart_display::SmartDisplay&gt;::metadata (1 samples, 0.10%)</title><rect x="74.9495%" y="165" width="0.1010%" height="15" fill="rgb(213,201,24)" fg:x="742" fg:w="1"/><text x="75.1995%" y="175.50"></text></g><g><title>&lt;time::time::Time as core::fmt::Display&gt;::fmt (7 samples, 0.71%)</title><rect x="74.9495%" y="181" width="0.7071%" height="15" fill="rgb(248,116,28)" fg:x="742" fg:w="7"/><text x="75.1995%" y="191.50"></text></g><g><title>core::fmt::write (6 samples, 0.61%)</title><rect x="75.0505%" y="165" width="0.6061%" height="15" fill="rgb(219,72,43)" fg:x="743" fg:w="6"/><text x="75.3005%" y="175.50"></text></g><g><title>&lt;deranged::RangedU8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.20%)</title><rect x="75.4545%" y="149" width="0.2020%" height="15" fill="rgb(209,138,14)" fg:x="747" fg:w="2"/><text x="75.7045%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4121 (2 samples, 0.20%)</title><rect x="75.4545%" y="133" width="0.2020%" height="15" fill="rgb(222,18,33)" fg:x="747" fg:w="2"/><text x="75.7045%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="75.5556%" y="117" width="0.1010%" height="15" fill="rgb(213,199,7)" fg:x="748" fg:w="1"/><text x="75.8056%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="75.5556%" y="101" width="0.1010%" height="15" fill="rgb(250,110,10)" fg:x="748" fg:w="1"/><text x="75.8056%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4121 (1 samples, 0.10%)</title><rect x="75.7576%" y="149" width="0.1010%" height="15" fill="rgb(248,123,6)" fg:x="750" fg:w="1"/><text x="76.0076%" y="159.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (19 samples, 1.92%)</title><rect x="74.0404%" y="213" width="1.9192%" height="15" fill="rgb(206,91,31)" fg:x="733" fg:w="19"/><text x="74.2904%" y="223.50">&lt;..</text></g><g><title>core::fmt::write (16 samples, 1.62%)</title><rect x="74.3434%" y="197" width="1.6162%" height="15" fill="rgb(211,154,13)" fg:x="736" fg:w="16"/><text x="74.5934%" y="207.50"></text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (3 samples, 0.30%)</title><rect x="75.6566%" y="181" width="0.3030%" height="15" fill="rgb(225,148,7)" fg:x="749" fg:w="3"/><text x="75.9066%" y="191.50"></text></g><g><title>core::fmt::write (2 samples, 0.20%)</title><rect x="75.7576%" y="165" width="0.2020%" height="15" fill="rgb(220,160,43)" fg:x="750" fg:w="2"/><text x="76.0076%" y="175.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="75.8586%" y="149" width="0.1010%" height="15" fill="rgb(213,52,39)" fg:x="751" fg:w="1"/><text x="76.1086%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.10%)</title><rect x="75.8586%" y="133" width="0.1010%" height="15" fill="rgb(243,137,7)" fg:x="751" fg:w="1"/><text x="76.1086%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.1911 (1 samples, 0.10%)</title><rect x="75.9596%" y="181" width="0.1010%" height="15" fill="rgb(230,79,13)" fg:x="752" fg:w="1"/><text x="76.2096%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="75.9596%" y="165" width="0.1010%" height="15" fill="rgb(247,105,23)" fg:x="752" fg:w="1"/><text x="76.2096%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.51%)</title><rect x="75.9596%" y="213" width="0.5051%" height="15" fill="rgb(223,179,41)" fg:x="752" fg:w="5"/><text x="76.2096%" y="223.50"></text></g><g><title>core::fmt::write (5 samples, 0.51%)</title><rect x="75.9596%" y="197" width="0.5051%" height="15" fill="rgb(218,9,34)" fg:x="752" fg:w="5"/><text x="76.2096%" y="207.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (4 samples, 0.40%)</title><rect x="76.0606%" y="181" width="0.4040%" height="15" fill="rgb(222,106,8)" fg:x="753" fg:w="4"/><text x="76.3106%" y="191.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (3 samples, 0.30%)</title><rect x="76.1616%" y="165" width="0.3030%" height="15" fill="rgb(211,220,0)" fg:x="754" fg:w="3"/><text x="76.4116%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (1 samples, 0.10%)</title><rect x="76.3636%" y="149" width="0.1010%" height="15" fill="rgb(229,52,16)" fg:x="756" fg:w="1"/><text x="76.6136%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="76.4646%" y="213" width="0.1010%" height="15" fill="rgb(212,155,18)" fg:x="757" fg:w="1"/><text x="76.7146%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.10%)</title><rect x="76.5657%" y="213" width="0.1010%" height="15" fill="rgb(242,21,14)" fg:x="758" fg:w="1"/><text x="76.8157%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="76.5657%" y="197" width="0.1010%" height="15" fill="rgb(222,19,48)" fg:x="758" fg:w="1"/><text x="76.8157%" y="207.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.10%)</title><rect x="77.6768%" y="165" width="0.1010%" height="15" fill="rgb(232,45,27)" fg:x="769" fg:w="1"/><text x="77.9268%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.10%)</title><rect x="77.7778%" y="165" width="0.1010%" height="15" fill="rgb(249,103,42)" fg:x="770" fg:w="1"/><text x="78.0278%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.10%)</title><rect x="77.7778%" y="149" width="0.1010%" height="15" fill="rgb(246,81,33)" fg:x="770" fg:w="1"/><text x="78.0278%" y="159.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.40%)</title><rect x="77.6768%" y="181" width="0.4040%" height="15" fill="rgb(252,33,42)" fg:x="769" fg:w="4"/><text x="77.9268%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (2 samples, 0.20%)</title><rect x="77.8788%" y="165" width="0.2020%" height="15" fill="rgb(209,212,41)" fg:x="771" fg:w="2"/><text x="78.1288%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (2 samples, 0.20%)</title><rect x="77.8788%" y="149" width="0.2020%" height="15" fill="rgb(207,154,6)" fg:x="771" fg:w="2"/><text x="78.1288%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.51%)</title><rect x="78.5859%" y="165" width="0.5051%" height="15" fill="rgb(223,64,47)" fg:x="778" fg:w="5"/><text x="78.8359%" y="175.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (5 samples, 0.51%)</title><rect x="78.5859%" y="149" width="0.5051%" height="15" fill="rgb(211,161,38)" fg:x="778" fg:w="5"/><text x="78.8359%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (3 samples, 0.30%)</title><rect x="78.7879%" y="133" width="0.3030%" height="15" fill="rgb(219,138,40)" fg:x="780" fg:w="3"/><text x="79.0379%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.20%)</title><rect x="78.8889%" y="117" width="0.2020%" height="15" fill="rgb(241,228,46)" fg:x="781" fg:w="2"/><text x="79.1389%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.10%)</title><rect x="78.9899%" y="101" width="0.1010%" height="15" fill="rgb(223,209,38)" fg:x="782" fg:w="1"/><text x="79.2399%" y="111.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.20%)</title><rect x="79.0909%" y="165" width="0.2020%" height="15" fill="rgb(236,164,45)" fg:x="783" fg:w="2"/><text x="79.3409%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.10%)</title><rect x="79.1919%" y="149" width="0.1010%" height="15" fill="rgb(231,15,5)" fg:x="784" fg:w="1"/><text x="79.4419%" y="159.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (13 samples, 1.31%)</title><rect x="78.0808%" y="181" width="1.3131%" height="15" fill="rgb(252,35,15)" fg:x="773" fg:w="13"/><text x="78.3308%" y="191.50"></text></g><g><title>redis::pipeline::encode_pipeline (1 samples, 0.10%)</title><rect x="79.2929%" y="165" width="0.1010%" height="15" fill="rgb(248,181,18)" fg:x="785" fg:w="1"/><text x="79.5429%" y="175.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.10%)</title><rect x="79.2929%" y="149" width="0.1010%" height="15" fill="rgb(233,39,42)" fg:x="785" fg:w="1"/><text x="79.5429%" y="159.50"></text></g><g><title>redis::connection::connection_setup_pipeline (4 samples, 0.40%)</title><rect x="79.3939%" y="181" width="0.4040%" height="15" fill="rgb(238,110,33)" fg:x="786" fg:w="4"/><text x="79.6439%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.30%)</title><rect x="79.4949%" y="165" width="0.3030%" height="15" fill="rgb(233,195,10)" fg:x="787" fg:w="3"/><text x="79.7449%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.20%)</title><rect x="79.5960%" y="149" width="0.2020%" height="15" fill="rgb(254,105,3)" fg:x="788" fg:w="2"/><text x="79.8460%" y="159.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (2 samples, 0.20%)</title><rect x="79.7980%" y="181" width="0.2020%" height="15" fill="rgb(221,225,9)" fg:x="790" fg:w="2"/><text x="80.0480%" y="191.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (36 samples, 3.64%)</title><rect x="76.6667%" y="213" width="3.6364%" height="15" fill="rgb(224,227,45)" fg:x="759" fg:w="36"/><text x="76.9167%" y="223.50">redi..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (36 samples, 3.64%)</title><rect x="76.6667%" y="197" width="3.6364%" height="15" fill="rgb(229,198,43)" fg:x="759" fg:w="36"/><text x="76.9167%" y="207.50">redi..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.30%)</title><rect x="80.0000%" y="181" width="0.3030%" height="15" fill="rgb(206,209,35)" fg:x="792" fg:w="3"/><text x="80.2500%" y="191.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (1 samples, 0.10%)</title><rect x="80.3030%" y="213" width="0.1010%" height="15" fill="rgb(245,195,53)" fg:x="795" fg:w="1"/><text x="80.5530%" y="223.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (82 samples, 8.28%)</title><rect x="72.2222%" y="229" width="8.2828%" height="15" fill="rgb(240,92,26)" fg:x="715" fg:w="82"/><text x="72.4722%" y="239.50">&lt;rinha_de_ba..</text></g><g><title>redis::types::Value::extract_error (1 samples, 0.10%)</title><rect x="80.4040%" y="213" width="0.1010%" height="15" fill="rgb(207,40,23)" fg:x="796" fg:w="1"/><text x="80.6540%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.10%)</title><rect x="81.1111%" y="197" width="0.1010%" height="15" fill="rgb(223,111,35)" fg:x="803" fg:w="1"/><text x="81.3611%" y="207.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (1 samples, 0.10%)</title><rect x="81.1111%" y="181" width="0.1010%" height="15" fill="rgb(229,147,28)" fg:x="803" fg:w="1"/><text x="81.3611%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.51%)</title><rect x="80.9091%" y="213" width="0.5051%" height="15" fill="rgb(211,29,28)" fg:x="801" fg:w="5"/><text x="81.1591%" y="223.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (2 samples, 0.20%)</title><rect x="81.2121%" y="197" width="0.2020%" height="15" fill="rgb(228,72,33)" fg:x="804" fg:w="2"/><text x="81.4621%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (2 samples, 0.20%)</title><rect x="81.4141%" y="213" width="0.2020%" height="15" fill="rgb(205,214,31)" fg:x="806" fg:w="2"/><text x="81.6641%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.10%)</title><rect x="81.6162%" y="213" width="0.1010%" height="15" fill="rgb(224,111,15)" fg:x="808" fg:w="1"/><text x="81.8662%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="81.6162%" y="197" width="0.1010%" height="15" fill="rgb(253,21,26)" fg:x="808" fg:w="1"/><text x="81.8662%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::client::Client::get_multiplexed_async_connection_inner_with_timeout&lt;redis::aio::tokio::Tokio&gt;::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="81.8182%" y="197" width="0.1010%" height="15" fill="rgb(245,139,43)" fg:x="810" fg:w="1"/><text x="82.0682%" y="207.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.10%)</title><rect x="83.2323%" y="165" width="0.1010%" height="15" fill="rgb(252,170,7)" fg:x="824" fg:w="1"/><text x="83.4823%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.10%)</title><rect x="83.2323%" y="149" width="0.1010%" height="15" fill="rgb(231,118,14)" fg:x="824" fg:w="1"/><text x="83.4823%" y="159.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (1 samples, 0.10%)</title><rect x="83.2323%" y="133" width="0.1010%" height="15" fill="rgb(238,83,0)" fg:x="824" fg:w="1"/><text x="83.4823%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::net::addr::&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for (&amp;str,u16)&gt;::to_socket_addrs::{{closure}}&gt;,tokio::runtime::blocking::schedule::BlockingSchedule&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="83.3333%" y="165" width="0.1010%" height="15" fill="rgb(221,39,39)" fg:x="825" fg:w="1"/><text x="83.5833%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.30%)</title><rect x="83.4343%" y="165" width="0.3030%" height="15" fill="rgb(222,119,46)" fg:x="826" fg:w="3"/><text x="83.6843%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.30%)</title><rect x="83.4343%" y="149" width="0.3030%" height="15" fill="rgb(222,165,49)" fg:x="826" fg:w="3"/><text x="83.6843%" y="159.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="83.6364%" y="133" width="0.1010%" height="15" fill="rgb(219,113,52)" fg:x="828" fg:w="1"/><text x="83.8864%" y="143.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (2 samples, 0.20%)</title><rect x="83.7374%" y="165" width="0.2020%" height="15" fill="rgb(214,7,15)" fg:x="829" fg:w="2"/><text x="83.9874%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.10%)</title><rect x="83.8384%" y="149" width="0.1010%" height="15" fill="rgb(235,32,4)" fg:x="830" fg:w="1"/><text x="84.0884%" y="159.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (11 samples, 1.11%)</title><rect x="82.9293%" y="181" width="1.1111%" height="15" fill="rgb(238,90,54)" fg:x="821" fg:w="11"/><text x="83.1793%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.10%)</title><rect x="83.9394%" y="165" width="0.1010%" height="15" fill="rgb(213,208,19)" fg:x="831" fg:w="1"/><text x="84.1894%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.30%)</title><rect x="84.4444%" y="149" width="0.3030%" height="15" fill="rgb(233,156,4)" fg:x="836" fg:w="3"/><text x="84.6944%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="84.6465%" y="133" width="0.1010%" height="15" fill="rgb(207,194,5)" fg:x="838" fg:w="1"/><text x="84.8965%" y="143.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 1.21%)</title><rect x="84.1414%" y="165" width="1.2121%" height="15" fill="rgb(206,111,30)" fg:x="833" fg:w="12"/><text x="84.3914%" y="175.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (6 samples, 0.61%)</title><rect x="84.7475%" y="149" width="0.6061%" height="15" fill="rgb(243,70,54)" fg:x="839" fg:w="6"/><text x="84.9975%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (6 samples, 0.61%)</title><rect x="84.7475%" y="133" width="0.6061%" height="15" fill="rgb(242,28,8)" fg:x="839" fg:w="6"/><text x="84.9975%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.30%)</title><rect x="85.0505%" y="117" width="0.3030%" height="15" fill="rgb(219,106,18)" fg:x="842" fg:w="3"/><text x="85.3005%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.30%)</title><rect x="85.0505%" y="101" width="0.3030%" height="15" fill="rgb(244,222,10)" fg:x="842" fg:w="3"/><text x="85.3005%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.10%)</title><rect x="85.2525%" y="85" width="0.1010%" height="15" fill="rgb(236,179,52)" fg:x="844" fg:w="1"/><text x="85.5025%" y="95.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.10%)</title><rect x="85.2525%" y="69" width="0.1010%" height="15" fill="rgb(213,23,39)" fg:x="844" fg:w="1"/><text x="85.5025%" y="79.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (1 samples, 0.10%)</title><rect x="85.3535%" y="165" width="0.1010%" height="15" fill="rgb(238,48,10)" fg:x="845" fg:w="1"/><text x="85.6035%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.10%)</title><rect x="85.3535%" y="149" width="0.1010%" height="15" fill="rgb(251,196,23)" fg:x="845" fg:w="1"/><text x="85.6035%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.10%)</title><rect x="85.4545%" y="165" width="0.1010%" height="15" fill="rgb(250,152,24)" fg:x="846" fg:w="1"/><text x="85.7045%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="85.6566%" y="149" width="0.1010%" height="15" fill="rgb(209,150,17)" fg:x="848" fg:w="1"/><text x="85.9066%" y="159.50"></text></g><g><title>redis::cmd::args_len (2 samples, 0.20%)</title><rect x="85.7576%" y="149" width="0.2020%" height="15" fill="rgb(234,202,34)" fg:x="849" fg:w="2"/><text x="86.0076%" y="159.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (21 samples, 2.12%)</title><rect x="84.0404%" y="181" width="2.1212%" height="15" fill="rgb(253,148,53)" fg:x="832" fg:w="21"/><text x="84.2904%" y="191.50">r..</text></g><g><title>redis::pipeline::encode_pipeline (6 samples, 0.61%)</title><rect x="85.5556%" y="165" width="0.6061%" height="15" fill="rgb(218,129,16)" fg:x="847" fg:w="6"/><text x="85.8056%" y="175.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.20%)</title><rect x="85.9596%" y="149" width="0.2020%" height="15" fill="rgb(216,85,19)" fg:x="851" fg:w="2"/><text x="86.2096%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="86.1616%" y="165" width="0.1010%" height="15" fill="rgb(235,228,7)" fg:x="853" fg:w="1"/><text x="86.4116%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="86.2626%" y="165" width="0.1010%" height="15" fill="rgb(245,175,0)" fg:x="854" fg:w="1"/><text x="86.5126%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="86.2626%" y="149" width="0.1010%" height="15" fill="rgb(208,168,36)" fg:x="854" fg:w="1"/><text x="86.5126%" y="159.50"></text></g><g><title>redis::connection::connection_setup_pipeline (4 samples, 0.40%)</title><rect x="86.1616%" y="181" width="0.4040%" height="15" fill="rgb(246,171,24)" fg:x="853" fg:w="4"/><text x="86.4116%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.20%)</title><rect x="86.3636%" y="165" width="0.2020%" height="15" fill="rgb(215,142,24)" fg:x="855" fg:w="2"/><text x="86.6136%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.20%)</title><rect x="86.3636%" y="149" width="0.2020%" height="15" fill="rgb(250,187,7)" fg:x="855" fg:w="2"/><text x="86.6136%" y="159.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1 samples, 0.10%)</title><rect x="86.5657%" y="181" width="0.1010%" height="15" fill="rgb(228,66,33)" fg:x="857" fg:w="1"/><text x="86.8157%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.10%)</title><rect x="86.5657%" y="165" width="0.1010%" height="15" fill="rgb(234,215,21)" fg:x="857" fg:w="1"/><text x="86.8157%" y="175.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.10%)</title><rect x="86.5657%" y="149" width="0.1010%" height="15" fill="rgb(222,191,20)" fg:x="857" fg:w="1"/><text x="86.8157%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (50 samples, 5.05%)</title><rect x="81.7172%" y="213" width="5.0505%" height="15" fill="rgb(245,79,54)" fg:x="809" fg:w="50"/><text x="81.9672%" y="223.50">redis:..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (48 samples, 4.85%)</title><rect x="81.9192%" y="197" width="4.8485%" height="15" fill="rgb(240,10,37)" fg:x="811" fg:w="48"/><text x="82.1692%" y="207.50">redis:..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.10%)</title><rect x="86.6667%" y="181" width="0.1010%" height="15" fill="rgb(214,192,32)" fg:x="858" fg:w="1"/><text x="86.9167%" y="191.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (1 samples, 0.10%)</title><rect x="86.8687%" y="197" width="0.1010%" height="15" fill="rgb(209,36,54)" fg:x="860" fg:w="1"/><text x="87.1187%" y="207.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_owned_redis_value (1 samples, 0.10%)</title><rect x="86.8687%" y="181" width="0.1010%" height="15" fill="rgb(220,10,11)" fg:x="860" fg:w="1"/><text x="87.1187%" y="191.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="86.8687%" y="165" width="0.1010%" height="15" fill="rgb(221,106,17)" fg:x="860" fg:w="1"/><text x="87.1187%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (4 samples, 0.40%)</title><rect x="86.9697%" y="197" width="0.4040%" height="15" fill="rgb(251,142,44)" fg:x="861" fg:w="4"/><text x="87.2197%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (3 samples, 0.30%)</title><rect x="87.0707%" y="181" width="0.3030%" height="15" fill="rgb(238,13,15)" fg:x="862" fg:w="3"/><text x="87.3207%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (3 samples, 0.30%)</title><rect x="87.0707%" y="165" width="0.3030%" height="15" fill="rgb(208,107,27)" fg:x="862" fg:w="3"/><text x="87.3207%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="87.2727%" y="149" width="0.1010%" height="15" fill="rgb(205,136,37)" fg:x="864" fg:w="1"/><text x="87.5227%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="87.3737%" y="197" width="0.1010%" height="15" fill="rgb(250,205,27)" fg:x="865" fg:w="1"/><text x="87.6237%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="87.4747%" y="197" width="0.1010%" height="15" fill="rgb(210,80,43)" fg:x="866" fg:w="1"/><text x="87.7247%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="87.4747%" y="181" width="0.1010%" height="15" fill="rgb(247,160,36)" fg:x="866" fg:w="1"/><text x="87.7247%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (72 samples, 7.27%)</title><rect x="80.5051%" y="229" width="7.2727%" height="15" fill="rgb(234,13,49)" fg:x="797" fg:w="72"/><text x="80.7551%" y="239.50">&lt;rinha_de_..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (10 samples, 1.01%)</title><rect x="86.7677%" y="213" width="1.0101%" height="15" fill="rgb(234,122,0)" fg:x="859" fg:w="10"/><text x="87.0177%" y="223.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.20%)</title><rect x="87.5758%" y="197" width="0.2020%" height="15" fill="rgb(207,146,38)" fg:x="867" fg:w="2"/><text x="87.8258%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="87.8788%" y="181" width="0.1010%" height="15" fill="rgb(207,177,25)" fg:x="870" fg:w="1"/><text x="88.1288%" y="191.50"></text></g><g><title>redis::connection::connection_setup_pipeline (1 samples, 0.10%)</title><rect x="87.9798%" y="181" width="0.1010%" height="15" fill="rgb(211,178,42)" fg:x="871" fg:w="1"/><text x="88.2298%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="87.9798%" y="165" width="0.1010%" height="15" fill="rgb(230,69,54)" fg:x="871" fg:w="1"/><text x="88.2298%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.10%)</title><rect x="87.9798%" y="149" width="0.1010%" height="15" fill="rgb(214,135,41)" fg:x="871" fg:w="1"/><text x="88.2298%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (4 samples, 0.40%)</title><rect x="87.7778%" y="213" width="0.4040%" height="15" fill="rgb(237,67,25)" fg:x="869" fg:w="4"/><text x="88.0278%" y="223.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (4 samples, 0.40%)</title><rect x="87.7778%" y="197" width="0.4040%" height="15" fill="rgb(222,189,50)" fg:x="869" fg:w="4"/><text x="88.0278%" y="207.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.10%)</title><rect x="88.0808%" y="181" width="0.1010%" height="15" fill="rgb(245,148,34)" fg:x="872" fg:w="1"/><text x="88.3308%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (5 samples, 0.51%)</title><rect x="87.7778%" y="229" width="0.5051%" height="15" fill="rgb(222,29,6)" fg:x="869" fg:w="5"/><text x="88.0278%" y="239.50"></text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (1 samples, 0.10%)</title><rect x="88.1818%" y="213" width="0.1010%" height="15" fill="rgb(221,189,43)" fg:x="873" fg:w="1"/><text x="88.4318%" y="223.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::routing::in_memory_payment_router::InMemoryPaymentRouter as rinha_de_backend::domain::payment_router::PaymentRouter&gt;::get_processor_for_payment::{{closure}} (1 samples, 0.10%)</title><rect x="88.2828%" y="229" width="0.1010%" height="15" fill="rgb(207,36,27)" fg:x="874" fg:w="1"/><text x="88.5328%" y="239.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.20%)</title><rect x="88.3838%" y="229" width="0.2020%" height="15" fill="rgb(217,90,24)" fg:x="875" fg:w="2"/><text x="88.6338%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="88.4848%" y="213" width="0.1010%" height="15" fill="rgb(224,66,35)" fg:x="876" fg:w="1"/><text x="88.7348%" y="223.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.10%)</title><rect x="88.4848%" y="197" width="0.1010%" height="15" fill="rgb(221,13,50)" fg:x="876" fg:w="1"/><text x="88.7348%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="88.5859%" y="229" width="0.1010%" height="15" fill="rgb(236,68,49)" fg:x="877" fg:w="1"/><text x="88.8359%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="88.6869%" y="229" width="0.1010%" height="15" fill="rgb(229,146,28)" fg:x="878" fg:w="1"/><text x="88.9369%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="88.7879%" y="229" width="0.1010%" height="15" fill="rgb(225,31,38)" fg:x="879" fg:w="1"/><text x="89.0379%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::follow_redirect::RequestUri&gt; (1 samples, 0.10%)</title><rect x="88.7879%" y="213" width="0.1010%" height="15" fill="rgb(250,208,3)" fg:x="879" fg:w="1"/><text x="89.0379%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (2 samples, 0.20%)</title><rect x="88.8889%" y="229" width="0.2020%" height="15" fill="rgb(246,54,23)" fg:x="880" fg:w="2"/><text x="89.1389%" y="239.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.10%)</title><rect x="88.9899%" y="213" width="0.1010%" height="15" fill="rgb(243,76,11)" fg:x="881" fg:w="1"/><text x="89.2399%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}}&gt; (1 samples, 0.10%)</title><rect x="89.0909%" y="213" width="0.1010%" height="15" fill="rgb(245,21,50)" fg:x="882" fg:w="1"/><text x="89.3409%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (2 samples, 0.20%)</title><rect x="89.0909%" y="229" width="0.2020%" height="15" fill="rgb(228,9,43)" fg:x="882" fg:w="2"/><text x="89.3409%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.10%)</title><rect x="89.1919%" y="213" width="0.1010%" height="15" fill="rgb(208,100,47)" fg:x="883" fg:w="1"/><text x="89.4419%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="89.3939%" y="213" width="0.1010%" height="15" fill="rgb(232,26,8)" fg:x="885" fg:w="1"/><text x="89.6439%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (5 samples, 0.51%)</title><rect x="89.2929%" y="229" width="0.5051%" height="15" fill="rgb(216,166,38)" fg:x="884" fg:w="5"/><text x="89.5429%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (3 samples, 0.30%)</title><rect x="89.4949%" y="213" width="0.3030%" height="15" fill="rgb(251,202,51)" fg:x="886" fg:w="3"/><text x="89.7449%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="89.6970%" y="197" width="0.1010%" height="15" fill="rgb(254,216,34)" fg:x="888" fg:w="1"/><text x="89.9470%" y="207.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="90.1010%" y="213" width="0.1010%" height="15" fill="rgb(251,32,27)" fg:x="892" fg:w="1"/><text x="90.3510%" y="223.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="90.2020%" y="213" width="0.1010%" height="15" fill="rgb(208,127,28)" fg:x="893" fg:w="1"/><text x="90.4520%" y="223.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (1 samples, 0.10%)</title><rect x="90.3030%" y="197" width="0.1010%" height="15" fill="rgb(224,137,22)" fg:x="894" fg:w="1"/><text x="90.5530%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="90.3030%" y="181" width="0.1010%" height="15" fill="rgb(254,70,32)" fg:x="894" fg:w="1"/><text x="90.5530%" y="191.50"></text></g><g><title>url::host::Host::parse (1 samples, 0.10%)</title><rect x="90.7071%" y="165" width="0.1010%" height="15" fill="rgb(229,75,37)" fg:x="898" fg:w="1"/><text x="90.9571%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.10%)</title><rect x="90.7071%" y="149" width="0.1010%" height="15" fill="rgb(252,64,23)" fg:x="898" fg:w="1"/><text x="90.9571%" y="159.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (6 samples, 0.61%)</title><rect x="90.3030%" y="213" width="0.6061%" height="15" fill="rgb(232,162,48)" fg:x="894" fg:w="6"/><text x="90.5530%" y="223.50"></text></g><g><title>url::ParseOptions::parse (5 samples, 0.51%)</title><rect x="90.4040%" y="197" width="0.5051%" height="15" fill="rgb(246,160,12)" fg:x="895" fg:w="5"/><text x="90.6540%" y="207.50"></text></g><g><title>url::parser::Parser::after_double_slash (3 samples, 0.30%)</title><rect x="90.6061%" y="181" width="0.3030%" height="15" fill="rgb(247,166,0)" fg:x="897" fg:w="3"/><text x="90.8561%" y="191.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.10%)</title><rect x="90.8081%" y="165" width="0.1010%" height="15" fill="rgb(249,219,21)" fg:x="899" fg:w="1"/><text x="91.0581%" y="175.50"></text></g><g><title>url::parser::Parser::check_url_code_point (1 samples, 0.10%)</title><rect x="90.8081%" y="149" width="0.1010%" height="15" fill="rgb(205,209,3)" fg:x="899" fg:w="1"/><text x="91.0581%" y="159.50"></text></g><g><title>bytes::bytes::static_clone.4045 (1 samples, 0.10%)</title><rect x="90.9091%" y="213" width="0.1010%" height="15" fill="rgb(243,44,1)" fg:x="900" fg:w="1"/><text x="91.1591%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.10%)</title><rect x="91.0101%" y="213" width="0.1010%" height="15" fill="rgb(206,159,16)" fg:x="901" fg:w="1"/><text x="91.2601%" y="223.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.10%)</title><rect x="91.1111%" y="213" width="0.1010%" height="15" fill="rgb(244,77,30)" fg:x="902" fg:w="1"/><text x="91.3611%" y="223.50"></text></g><g><title>bytes::bytes::Bytes::split_to (1 samples, 0.10%)</title><rect x="91.5152%" y="197" width="0.1010%" height="15" fill="rgb(218,69,12)" fg:x="906" fg:w="1"/><text x="91.7652%" y="207.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.10%)</title><rect x="91.5152%" y="181" width="0.1010%" height="15" fill="rgb(212,87,7)" fg:x="906" fg:w="1"/><text x="91.7652%" y="191.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (1 samples, 0.10%)</title><rect x="91.5152%" y="165" width="0.1010%" height="15" fill="rgb(245,114,25)" fg:x="906" fg:w="1"/><text x="91.7652%" y="175.50"></text></g><g><title>http::uri::Uri::from_shared (5 samples, 0.51%)</title><rect x="91.2121%" y="213" width="0.5051%" height="15" fill="rgb(210,61,42)" fg:x="903" fg:w="5"/><text x="91.4621%" y="223.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.10%)</title><rect x="91.6162%" y="197" width="0.1010%" height="15" fill="rgb(211,52,33)" fg:x="907" fg:w="1"/><text x="91.8662%" y="207.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.10%)</title><rect x="91.9192%" y="181" width="0.1010%" height="15" fill="rgb(234,58,33)" fg:x="910" fg:w="1"/><text x="92.1692%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.10%)</title><rect x="91.9192%" y="165" width="0.1010%" height="15" fill="rgb(220,115,36)" fg:x="910" fg:w="1"/><text x="92.1692%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.1930 (1 samples, 0.10%)</title><rect x="92.0202%" y="165" width="0.1010%" height="15" fill="rgb(243,153,54)" fg:x="911" fg:w="1"/><text x="92.2702%" y="175.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (24 samples, 2.42%)</title><rect x="89.7980%" y="229" width="2.4242%" height="15" fill="rgb(251,47,18)" fg:x="889" fg:w="24"/><text x="90.0480%" y="239.50">re..</text></g><g><title>reqwest::proxy::Matcher::intercept (5 samples, 0.51%)</title><rect x="91.7172%" y="213" width="0.5051%" height="15" fill="rgb(242,102,42)" fg:x="908" fg:w="5"/><text x="91.9672%" y="223.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (4 samples, 0.40%)</title><rect x="91.8182%" y="197" width="0.4040%" height="15" fill="rgb(234,31,38)" fg:x="909" fg:w="4"/><text x="92.0682%" y="207.50"></text></g><g><title>http::uri::authority::host (2 samples, 0.20%)</title><rect x="92.0202%" y="181" width="0.2020%" height="15" fill="rgb(221,117,51)" fg:x="911" fg:w="2"/><text x="92.2702%" y="191.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.10%)</title><rect x="92.1212%" y="165" width="0.1010%" height="15" fill="rgb(212,20,18)" fg:x="912" fg:w="1"/><text x="92.3712%" y="175.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.10%)</title><rect x="92.2222%" y="229" width="0.1010%" height="15" fill="rgb(245,133,36)" fg:x="913" fg:w="1"/><text x="92.4722%" y="239.50"></text></g><g><title>time::offset_date_time::OffsetDateTime::now_utc (1 samples, 0.10%)</title><rect x="92.3232%" y="229" width="0.1010%" height="15" fill="rgb(212,6,19)" fg:x="914" fg:w="1"/><text x="92.5732%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="92.5253%" y="213" width="0.1010%" height="15" fill="rgb(218,1,36)" fg:x="916" fg:w="1"/><text x="92.7753%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.10%)</title><rect x="92.6263%" y="213" width="0.1010%" height="15" fill="rgb(246,84,54)" fg:x="917" fg:w="1"/><text x="92.8763%" y="223.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="92.6263%" y="197" width="0.1010%" height="15" fill="rgb(242,110,6)" fg:x="917" fg:w="1"/><text x="92.8763%" y="207.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (331 samples, 33.43%)</title><rect x="59.4949%" y="245" width="33.4343%" height="15" fill="rgb(214,47,5)" fg:x="589" fg:w="331"/><text x="59.7449%" y="255.50">rinha_de_backend::infrastructure::workers::payment_pro..</text></g><g><title>time::serde::rfc3339::option::serialize (5 samples, 0.51%)</title><rect x="92.4242%" y="229" width="0.5051%" height="15" fill="rgb(218,159,25)" fg:x="915" fg:w="5"/><text x="92.6742%" y="239.50"></text></g><g><title>time::formatting::format_number_pad_zero (2 samples, 0.20%)</title><rect x="92.7273%" y="213" width="0.2020%" height="15" fill="rgb(215,211,28)" fg:x="918" fg:w="2"/><text x="92.9773%" y="223.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (1 samples, 0.10%)</title><rect x="92.9293%" y="229" width="0.1010%" height="15" fill="rgb(238,59,32)" fg:x="920" fg:w="1"/><text x="93.1793%" y="239.50"></text></g><g><title>url::ParseOptions::parse (1 samples, 0.10%)</title><rect x="92.9293%" y="213" width="0.1010%" height="15" fill="rgb(226,82,3)" fg:x="920" fg:w="1"/><text x="93.1793%" y="223.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::processor_health_monitor_worker::processor_health_monitor_worker::{{closure}} (2 samples, 0.20%)</title><rect x="92.9293%" y="245" width="0.2020%" height="15" fill="rgb(240,164,32)" fg:x="920" fg:w="2"/><text x="93.1793%" y="255.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.10%)</title><rect x="93.0303%" y="229" width="0.1010%" height="15" fill="rgb(232,46,7)" fg:x="921" fg:w="1"/><text x="93.2803%" y="239.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}}::Guard&lt;T,S&gt;::drain (2 samples, 0.20%)</title><rect x="93.4343%" y="213" width="0.2020%" height="15" fill="rgb(229,129,53)" fg:x="925" fg:w="2"/><text x="93.6843%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(((),core::option::Option&lt;(bool,u8)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,u8)&gt;,core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;)&gt; (1 samples, 0.10%)</title><rect x="93.8384%" y="197" width="0.1010%" height="15" fill="rgb(234,188,29)" fg:x="929" fg:w="1"/><text x="94.0884%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (4 samples, 0.40%)</title><rect x="93.9394%" y="197" width="0.4040%" height="15" fill="rgb(246,141,4)" fg:x="930" fg:w="4"/><text x="94.1894%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="94.5455%" y="181" width="0.1010%" height="15" fill="rgb(229,23,39)" fg:x="936" fg:w="1"/><text x="94.7955%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="94.5455%" y="165" width="0.1010%" height="15" fill="rgb(206,12,3)" fg:x="936" fg:w="1"/><text x="94.7955%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (12 samples, 1.21%)</title><rect x="93.6364%" y="213" width="1.2121%" height="15" fill="rgb(252,226,20)" fg:x="927" fg:w="12"/><text x="93.8864%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (5 samples, 0.51%)</title><rect x="94.3434%" y="197" width="0.5051%" height="15" fill="rgb(216,123,35)" fg:x="934" fg:w="5"/><text x="94.5934%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (2 samples, 0.20%)</title><rect x="94.6465%" y="181" width="0.2020%" height="15" fill="rgb(212,68,40)" fg:x="937" fg:w="2"/><text x="94.8965%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (18 samples, 1.82%)</title><rect x="93.1313%" y="245" width="1.8182%" height="15" fill="rgb(254,125,32)" fg:x="922" fg:w="18"/><text x="93.3813%" y="255.50">t..</text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (18 samples, 1.82%)</title><rect x="93.1313%" y="229" width="1.8182%" height="15" fill="rgb(253,97,22)" fg:x="922" fg:w="18"/><text x="93.3813%" y="239.50">c..</text></g><g><title>tokio::sync::notify::Notify::notify_waiters (1 samples, 0.10%)</title><rect x="94.8485%" y="213" width="0.1010%" height="15" fill="rgb(241,101,14)" fg:x="939" fg:w="1"/><text x="95.0985%" y="223.50"></text></g><g><title>rinha-de-backen (598 samples, 60.40%)</title><rect x="34.6465%" y="357" width="60.4040%" height="15" fill="rgb(238,103,29)" fg:x="343" fg:w="598"/><text x="34.8965%" y="367.50">rinha-de-backen</text></g><g><title>_start (598 samples, 60.40%)</title><rect x="34.6465%" y="341" width="60.4040%" height="15" fill="rgb(233,195,47)" fg:x="343" fg:w="598"/><text x="34.8965%" y="351.50">_start</text></g><g><title>__libc_start_main (598 samples, 60.40%)</title><rect x="34.6465%" y="325" width="60.4040%" height="15" fill="rgb(246,218,30)" fg:x="343" fg:w="598"/><text x="34.8965%" y="335.50">__libc_start_main</text></g><g><title>main (598 samples, 60.40%)</title><rect x="34.6465%" y="309" width="60.4040%" height="15" fill="rgb(219,145,47)" fg:x="343" fg:w="598"/><text x="34.8965%" y="319.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (598 samples, 60.40%)</title><rect x="34.6465%" y="293" width="60.4040%" height="15" fill="rgb(243,12,26)" fg:x="343" fg:w="598"/><text x="34.8965%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (598 samples, 60.40%)</title><rect x="34.6465%" y="277" width="60.4040%" height="15" fill="rgb(214,87,16)" fg:x="343" fg:w="598"/><text x="34.8965%" y="287.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (514 samples, 51.92%)</title><rect x="43.1313%" y="261" width="51.9192%" height="15" fill="rgb(208,99,42)" fg:x="427" fg:w="514"/><text x="43.3813%" y="271.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.10%)</title><rect x="94.9495%" y="245" width="0.1010%" height="15" fill="rgb(253,99,2)" fg:x="940" fg:w="1"/><text x="95.1995%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::release (1 samples, 0.10%)</title><rect x="94.9495%" y="229" width="0.1010%" height="15" fill="rgb(220,168,23)" fg:x="940" fg:w="1"/><text x="95.1995%" y="239.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (11 samples, 1.11%)</title><rect x="95.9596%" y="277" width="1.1111%" height="15" fill="rgb(242,38,24)" fg:x="950" fg:w="11"/><text x="96.2096%" y="287.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (5 samples, 0.51%)</title><rect x="97.0707%" y="277" width="0.5051%" height="15" fill="rgb(225,182,9)" fg:x="961" fg:w="5"/><text x="97.3207%" y="287.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.20%)</title><rect x="97.3737%" y="261" width="0.2020%" height="15" fill="rgb(243,178,37)" fg:x="964" fg:w="2"/><text x="97.6237%" y="271.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (2 samples, 0.20%)</title><rect x="98.8889%" y="245" width="0.2020%" height="15" fill="rgb(232,139,19)" fg:x="979" fg:w="2"/><text x="99.1389%" y="255.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (4 samples, 0.40%)</title><rect x="99.0909%" y="245" width="0.4040%" height="15" fill="rgb(225,201,24)" fg:x="981" fg:w="4"/><text x="99.3409%" y="255.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (10 samples, 1.01%)</title><rect x="98.6869%" y="261" width="1.0101%" height="15" fill="rgb(221,47,46)" fg:x="977" fg:w="10"/><text x="98.9369%" y="271.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (2 samples, 0.20%)</title><rect x="99.4949%" y="245" width="0.2020%" height="15" fill="rgb(249,23,13)" fg:x="985" fg:w="2"/><text x="99.7449%" y="255.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (2 samples, 0.20%)</title><rect x="99.4949%" y="229" width="0.2020%" height="15" fill="rgb(219,9,5)" fg:x="985" fg:w="2"/><text x="99.7449%" y="239.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.10%)</title><rect x="99.5960%" y="213" width="0.1010%" height="15" fill="rgb(254,171,16)" fg:x="986" fg:w="1"/><text x="99.8460%" y="223.50"></text></g><g><title>all (990 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(230,171,20)" fg:x="0" fg:w="990"/><text x="0.2500%" y="383.50"></text></g><g><title>tokio-runtime-w (49 samples, 4.95%)</title><rect x="95.0505%" y="357" width="4.9495%" height="15" fill="rgb(210,71,41)" fg:x="941" fg:w="49"/><text x="95.3005%" y="367.50">tokio-..</text></g><g><title>__clone (49 samples, 4.95%)</title><rect x="95.0505%" y="341" width="4.9495%" height="15" fill="rgb(206,173,20)" fg:x="941" fg:w="49"/><text x="95.3005%" y="351.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (49 samples, 4.95%)</title><rect x="95.0505%" y="325" width="4.9495%" height="15" fill="rgb(233,88,34)" fg:x="941" fg:w="49"/><text x="95.3005%" y="335.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (49 samples, 4.95%)</title><rect x="95.0505%" y="309" width="4.9495%" height="15" fill="rgb(223,209,46)" fg:x="941" fg:w="49"/><text x="95.3005%" y="319.50">core::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (49 samples, 4.95%)</title><rect x="95.0505%" y="293" width="4.9495%" height="15" fill="rgb(250,43,18)" fg:x="941" fg:w="49"/><text x="95.3005%" y="303.50">std::s..</text></g><g><title>tokio::runtime::task::raw::poll (24 samples, 2.42%)</title><rect x="97.5758%" y="277" width="2.4242%" height="15" fill="rgb(208,13,10)" fg:x="966" fg:w="24"/><text x="97.8258%" y="287.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (3 samples, 0.30%)</title><rect x="99.6970%" y="261" width="0.3030%" height="15" fill="rgb(212,200,36)" fg:x="987" fg:w="3"/><text x="99.9470%" y="271.50"></text></g></svg></svg>