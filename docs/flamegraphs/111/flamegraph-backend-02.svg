<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="1186"><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="0.0843%" y="277" width="0.0843%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3343%" y="287.50"></text></g><g><title>tokio::runtime::driver::Driver::park (2 samples, 0.17%)</title><rect x="0.3373%" y="261" width="0.1686%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="2"/><text x="0.5873%" y="271.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.08%)</title><rect x="0.5059%" y="261" width="0.0843%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="1"/><text x="0.7559%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.08%)</title><rect x="0.5059%" y="245" width="0.0843%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.7559%" y="255.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 0.17%)</title><rect x="0.6745%" y="245" width="0.1686%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="2"/><text x="0.9245%" y="255.50"></text></g><g><title>tokio::runtime::task::raw::schedule (3 samples, 0.25%)</title><rect x="1.0118%" y="197" width="0.2530%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="3"/><text x="1.2618%" y="207.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (7 samples, 0.59%)</title><rect x="0.8432%" y="245" width="0.5902%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="7"/><text x="1.0932%" y="255.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (5 samples, 0.42%)</title><rect x="1.0118%" y="229" width="0.4216%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="5"/><text x="1.2618%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (5 samples, 0.42%)</title><rect x="1.0118%" y="213" width="0.4216%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="5"/><text x="1.2618%" y="223.50"></text></g><g><title>tokio::task::local::Shared::schedule (2 samples, 0.17%)</title><rect x="1.2648%" y="197" width="0.1686%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="2"/><text x="1.5148%" y="207.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (1 samples, 0.08%)</title><rect x="1.3491%" y="181" width="0.0843%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="1"/><text x="1.5991%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (16 samples, 1.35%)</title><rect x="0.1686%" y="277" width="1.3491%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="16"/><text x="0.4186%" y="287.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (11 samples, 0.93%)</title><rect x="0.5902%" y="261" width="0.9275%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="11"/><text x="0.8402%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.08%)</title><rect x="1.4334%" y="245" width="0.0843%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="1"/><text x="1.6834%" y="255.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (2 samples, 0.17%)</title><rect x="1.7707%" y="261" width="0.1686%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="2"/><text x="2.0207%" y="271.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.17%)</title><rect x="1.7707%" y="245" width="0.1686%" height="15" fill="rgb(231,73,38)" fg:x="21" fg:w="2"/><text x="2.0207%" y="255.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.25%)</title><rect x="3.5413%" y="197" width="0.2530%" height="15" fill="rgb(225,20,46)" fg:x="42" fg:w="3"/><text x="3.7913%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.25%)</title><rect x="3.5413%" y="181" width="0.2530%" height="15" fill="rgb(210,31,41)" fg:x="42" fg:w="3"/><text x="3.7913%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (2 samples, 0.17%)</title><rect x="3.7943%" y="197" width="0.1686%" height="15" fill="rgb(221,200,47)" fg:x="45" fg:w="2"/><text x="4.0443%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.08%)</title><rect x="3.8786%" y="181" width="0.0843%" height="15" fill="rgb(226,26,5)" fg:x="46" fg:w="1"/><text x="4.1286%" y="191.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (2 samples, 0.17%)</title><rect x="6.4081%" y="165" width="0.1686%" height="15" fill="rgb(249,33,26)" fg:x="76" fg:w="2"/><text x="6.6581%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="6.4081%" y="149" width="0.1686%" height="15" fill="rgb(235,183,28)" fg:x="76" fg:w="2"/><text x="6.6581%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.08%)</title><rect x="6.5767%" y="165" width="0.0843%" height="15" fill="rgb(221,5,38)" fg:x="78" fg:w="1"/><text x="6.8267%" y="175.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.17%)</title><rect x="6.6610%" y="165" width="0.1686%" height="15" fill="rgb(247,18,42)" fg:x="79" fg:w="2"/><text x="6.9110%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.17%)</title><rect x="6.8297%" y="165" width="0.1686%" height="15" fill="rgb(241,131,45)" fg:x="81" fg:w="2"/><text x="7.0797%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3 samples, 0.25%)</title><rect x="6.9983%" y="165" width="0.2530%" height="15" fill="rgb(249,31,29)" fg:x="83" fg:w="3"/><text x="7.2483%" y="175.50"></text></g><g><title>bytes::bytes_mut::shared_v_is_unique (1 samples, 0.08%)</title><rect x="7.1669%" y="149" width="0.0843%" height="15" fill="rgb(225,111,53)" fg:x="85" fg:w="1"/><text x="7.4169%" y="159.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (4 samples, 0.34%)</title><rect x="7.2513%" y="165" width="0.3373%" height="15" fill="rgb(238,160,17)" fg:x="86" fg:w="4"/><text x="7.5013%" y="175.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.08%)</title><rect x="7.5885%" y="165" width="0.0843%" height="15" fill="rgb(214,148,48)" fg:x="90" fg:w="1"/><text x="7.8385%" y="175.50"></text></g><g><title>httparse::parse_headers_iter_uninit (8 samples, 0.67%)</title><rect x="7.6728%" y="165" width="0.6745%" height="15" fill="rgb(232,36,49)" fg:x="91" fg:w="8"/><text x="7.9228%" y="175.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (1 samples, 0.08%)</title><rect x="8.2631%" y="149" width="0.0843%" height="15" fill="rgb(209,103,24)" fg:x="98" fg:w="1"/><text x="8.5131%" y="159.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (45 samples, 3.79%)</title><rect x="4.6374%" y="181" width="3.7943%" height="15" fill="rgb(229,88,8)" fg:x="55" fg:w="45"/><text x="4.8874%" y="191.50">&lt;act..</text></g><g><title>httparse::simd::avx2::match_uri_vectored (1 samples, 0.08%)</title><rect x="8.3474%" y="165" width="0.0843%" height="15" fill="rgb(213,181,19)" fg:x="99" fg:w="1"/><text x="8.5974%" y="175.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (5 samples, 0.42%)</title><rect x="9.1062%" y="165" width="0.4216%" height="15" fill="rgb(254,191,54)" fg:x="108" fg:w="5"/><text x="9.3562%" y="175.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (2 samples, 0.17%)</title><rect x="9.3592%" y="149" width="0.1686%" height="15" fill="rgb(241,83,37)" fg:x="111" fg:w="2"/><text x="9.6092%" y="159.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (2 samples, 0.17%)</title><rect x="9.5278%" y="165" width="0.1686%" height="15" fill="rgb(233,36,39)" fg:x="113" fg:w="2"/><text x="9.7778%" y="175.50"></text></g><g><title>actix_http::extensions::Extensions::insert (2 samples, 0.17%)</title><rect x="9.5278%" y="149" width="0.1686%" height="15" fill="rgb(226,3,54)" fg:x="113" fg:w="2"/><text x="9.7778%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.17%)</title><rect x="9.5278%" y="133" width="0.1686%" height="15" fill="rgb(245,192,40)" fg:x="113" fg:w="2"/><text x="9.7778%" y="143.50"></text></g><g><title>actix_router::path::Path&lt;T&gt;::unprocessed (2 samples, 0.17%)</title><rect x="9.6965%" y="165" width="0.1686%" height="15" fill="rgb(238,167,29)" fg:x="115" fg:w="2"/><text x="9.9465%" y="175.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (2 samples, 0.17%)</title><rect x="9.8651%" y="165" width="0.1686%" height="15" fill="rgb(232,182,51)" fg:x="117" fg:w="2"/><text x="10.1151%" y="175.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.08%)</title><rect x="10.0337%" y="165" width="0.0843%" height="15" fill="rgb(231,60,39)" fg:x="119" fg:w="1"/><text x="10.2837%" y="175.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (22 samples, 1.85%)</title><rect x="8.4317%" y="181" width="1.8550%" height="15" fill="rgb(208,69,12)" fg:x="100" fg:w="22"/><text x="8.6817%" y="191.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (2 samples, 0.17%)</title><rect x="10.1180%" y="165" width="0.1686%" height="15" fill="rgb(235,93,37)" fg:x="120" fg:w="2"/><text x="10.3680%" y="175.50"></text></g><g><title> 16]&gt; (2 samples, 0.17%)</title><rect x="10.1180%" y="149" width="0.1686%" height="15" fill="rgb(213,116,39)" fg:x="120" fg:w="2"/><text x="10.3680%" y="159.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.08%)</title><rect x="11.9730%" y="149" width="0.0843%" height="15" fill="rgb(222,207,29)" fg:x="142" fg:w="1"/><text x="12.2230%" y="159.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (3 samples, 0.25%)</title><rect x="12.0573%" y="149" width="0.2530%" height="15" fill="rgb(206,96,30)" fg:x="143" fg:w="3"/><text x="12.3073%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.34%)</title><rect x="12.3103%" y="149" width="0.3373%" height="15" fill="rgb(218,138,4)" fg:x="146" fg:w="4"/><text x="12.5603%" y="159.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (29 samples, 2.45%)</title><rect x="10.2867%" y="181" width="2.4452%" height="15" fill="rgb(250,191,14)" fg:x="122" fg:w="29"/><text x="10.5367%" y="191.50">&lt;a..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (29 samples, 2.45%)</title><rect x="10.2867%" y="165" width="2.4452%" height="15" fill="rgb(239,60,40)" fg:x="122" fg:w="29"/><text x="10.5367%" y="175.50">ac..</text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="12.6476%" y="149" width="0.0843%" height="15" fill="rgb(206,27,48)" fg:x="150" fg:w="1"/><text x="12.8976%" y="159.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (2 samples, 0.17%)</title><rect x="12.7319%" y="181" width="0.1686%" height="15" fill="rgb(225,35,8)" fg:x="151" fg:w="2"/><text x="12.9819%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (4 samples, 0.34%)</title><rect x="12.9005%" y="181" width="0.3373%" height="15" fill="rgb(250,213,24)" fg:x="153" fg:w="4"/><text x="13.1505%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="13.1535%" y="165" width="0.0843%" height="15" fill="rgb(247,123,22)" fg:x="156" fg:w="1"/><text x="13.4035%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.1535%" y="149" width="0.0843%" height="15" fill="rgb(231,138,38)" fg:x="156" fg:w="1"/><text x="13.4035%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (113 samples, 9.53%)</title><rect x="3.9629%" y="197" width="9.5278%" height="15" fill="rgb(231,145,46)" fg:x="47" fg:w="113"/><text x="4.2129%" y="207.50">actix_http::h1..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 0.25%)</title><rect x="13.2378%" y="181" width="0.2530%" height="15" fill="rgb(251,118,11)" fg:x="157" fg:w="3"/><text x="13.4878%" y="191.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.8280%" y="181" width="0.0843%" height="15" fill="rgb(217,147,25)" fg:x="164" fg:w="1"/><text x="14.0780%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.25%)</title><rect x="15.3457%" y="149" width="0.2530%" height="15" fill="rgb(247,81,37)" fg:x="182" fg:w="3"/><text x="15.5957%" y="159.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (5 samples, 0.42%)</title><rect x="15.7673%" y="133" width="0.4216%" height="15" fill="rgb(209,12,38)" fg:x="187" fg:w="5"/><text x="16.0173%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.17%)</title><rect x="16.0202%" y="117" width="0.1686%" height="15" fill="rgb(227,1,9)" fg:x="190" fg:w="2"/><text x="16.2702%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.93%)</title><rect x="15.5987%" y="149" width="0.9275%" height="15" fill="rgb(248,47,43)" fg:x="185" fg:w="11"/><text x="15.8487%" y="159.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (4 samples, 0.34%)</title><rect x="16.1889%" y="133" width="0.3373%" height="15" fill="rgb(221,10,30)" fg:x="192" fg:w="4"/><text x="16.4389%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}} (4 samples, 0.34%)</title><rect x="16.5261%" y="149" width="0.3373%" height="15" fill="rgb(210,229,1)" fg:x="196" fg:w="4"/><text x="16.7761%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.17%)</title><rect x="16.6948%" y="133" width="0.1686%" height="15" fill="rgb(222,148,37)" fg:x="198" fg:w="2"/><text x="16.9448%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.17%)</title><rect x="16.6948%" y="117" width="0.1686%" height="15" fill="rgb(234,67,33)" fg:x="198" fg:w="2"/><text x="16.9448%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="16.9477%" y="133" width="0.0843%" height="15" fill="rgb(247,98,35)" fg:x="201" fg:w="1"/><text x="17.1977%" y="143.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.34%)</title><rect x="16.8634%" y="149" width="0.3373%" height="15" fill="rgb(247,138,52)" fg:x="200" fg:w="4"/><text x="17.1134%" y="159.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.17%)</title><rect x="17.0320%" y="133" width="0.1686%" height="15" fill="rgb(213,79,30)" fg:x="202" fg:w="2"/><text x="17.2820%" y="143.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (2 samples, 0.17%)</title><rect x="17.2007%" y="149" width="0.1686%" height="15" fill="rgb(246,177,23)" fg:x="204" fg:w="2"/><text x="17.4507%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.17%)</title><rect x="17.2007%" y="133" width="0.1686%" height="15" fill="rgb(230,62,27)" fg:x="204" fg:w="2"/><text x="17.4507%" y="143.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::body (2 samples, 0.17%)</title><rect x="17.3693%" y="149" width="0.1686%" height="15" fill="rgb(216,154,8)" fg:x="206" fg:w="2"/><text x="17.6193%" y="159.50"></text></g><g><title>actix_http::header::map::HeaderMap::insert (3 samples, 0.25%)</title><rect x="17.6223%" y="133" width="0.2530%" height="15" fill="rgb(244,35,45)" fg:x="209" fg:w="3"/><text x="17.8723%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.7909%" y="117" width="0.0843%" height="15" fill="rgb(251,115,12)" fg:x="211" fg:w="1"/><text x="18.0409%" y="127.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (5 samples, 0.42%)</title><rect x="17.5379%" y="149" width="0.4216%" height="15" fill="rgb(240,54,50)" fg:x="208" fg:w="5"/><text x="17.7879%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::header::map::Removed&gt; (1 samples, 0.08%)</title><rect x="17.8752%" y="133" width="0.0843%" height="15" fill="rgb(233,84,52)" fg:x="212" fg:w="1"/><text x="18.1252%" y="143.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (50 samples, 4.22%)</title><rect x="13.9123%" y="181" width="4.2159%" height="15" fill="rgb(207,117,47)" fg:x="165" fg:w="50"/><text x="14.1623%" y="191.50">&lt;acti..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (49 samples, 4.13%)</title><rect x="13.9966%" y="165" width="4.1315%" height="15" fill="rgb(249,43,39)" fg:x="166" fg:w="49"/><text x="14.2466%" y="175.50">actix..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (2 samples, 0.17%)</title><rect x="17.9595%" y="149" width="0.1686%" height="15" fill="rgb(209,38,44)" fg:x="213" fg:w="2"/><text x="18.2095%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="18.0438%" y="133" width="0.0843%" height="15" fill="rgb(236,212,23)" fg:x="214" fg:w="1"/><text x="18.2938%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (8 samples, 0.67%)</title><rect x="18.2125%" y="165" width="0.6745%" height="15" fill="rgb(242,79,21)" fg:x="216" fg:w="8"/><text x="18.4625%" y="175.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (8 samples, 0.67%)</title><rect x="18.2125%" y="149" width="0.6745%" height="15" fill="rgb(211,96,35)" fg:x="216" fg:w="8"/><text x="18.4625%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (12 samples, 1.01%)</title><rect x="18.1282%" y="181" width="1.0118%" height="15" fill="rgb(253,215,40)" fg:x="215" fg:w="12"/><text x="18.3782%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (3 samples, 0.25%)</title><rect x="18.8870%" y="165" width="0.2530%" height="15" fill="rgb(211,81,21)" fg:x="224" fg:w="3"/><text x="19.1370%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (68 samples, 5.73%)</title><rect x="13.4907%" y="197" width="5.7336%" height="15" fill="rgb(208,190,38)" fg:x="160" fg:w="68"/><text x="13.7407%" y="207.50">actix_h..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (1 samples, 0.08%)</title><rect x="19.1400%" y="181" width="0.0843%" height="15" fill="rgb(235,213,38)" fg:x="227" fg:w="1"/><text x="19.3900%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="19.6459%" y="165" width="0.0843%" height="15" fill="rgb(237,122,38)" fg:x="233" fg:w="1"/><text x="19.8959%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (9 samples, 0.76%)</title><rect x="19.2243%" y="197" width="0.7589%" height="15" fill="rgb(244,218,35)" fg:x="228" fg:w="9"/><text x="19.4743%" y="207.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (5 samples, 0.42%)</title><rect x="19.5616%" y="181" width="0.4216%" height="15" fill="rgb(240,68,47)" fg:x="232" fg:w="5"/><text x="19.8116%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (3 samples, 0.25%)</title><rect x="19.7302%" y="165" width="0.2530%" height="15" fill="rgb(210,16,53)" fg:x="234" fg:w="3"/><text x="19.9802%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (3 samples, 0.25%)</title><rect x="19.9831%" y="197" width="0.2530%" height="15" fill="rgb(235,124,12)" fg:x="237" fg:w="3"/><text x="20.2331%" y="207.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (1 samples, 0.08%)</title><rect x="20.2361%" y="197" width="0.0843%" height="15" fill="rgb(224,169,11)" fg:x="240" fg:w="1"/><text x="20.4861%" y="207.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.08%)</title><rect x="20.7420%" y="165" width="0.0843%" height="15" fill="rgb(250,166,2)" fg:x="246" fg:w="1"/><text x="20.9920%" y="175.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (4 samples, 0.34%)</title><rect x="20.6577%" y="181" width="0.3373%" height="15" fill="rgb(242,216,29)" fg:x="245" fg:w="4"/><text x="20.9077%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (2 samples, 0.17%)</title><rect x="20.8263%" y="165" width="0.1686%" height="15" fill="rgb(230,116,27)" fg:x="247" fg:w="2"/><text x="21.0763%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="20.9106%" y="149" width="0.0843%" height="15" fill="rgb(228,99,48)" fg:x="248" fg:w="1"/><text x="21.1606%" y="159.50"></text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (11 samples, 0.93%)</title><rect x="20.3204%" y="197" width="0.9275%" height="15" fill="rgb(253,11,6)" fg:x="241" fg:w="11"/><text x="20.5704%" y="207.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (3 samples, 0.25%)</title><rect x="20.9949%" y="181" width="0.2530%" height="15" fill="rgb(247,143,39)" fg:x="249" fg:w="3"/><text x="21.2449%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.08%)</title><rect x="21.1636%" y="165" width="0.0843%" height="15" fill="rgb(236,97,10)" fg:x="251" fg:w="1"/><text x="21.4136%" y="175.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (225 samples, 18.97%)</title><rect x="2.3609%" y="213" width="18.9713%" height="15" fill="rgb(233,208,19)" fg:x="28" fg:w="225"/><text x="2.6109%" y="223.50">&lt;actix_http::h1::dispatcher::D..</text></g><g><title>tokio::time::sleep::Sleep::new_timeout (1 samples, 0.08%)</title><rect x="21.2479%" y="197" width="0.0843%" height="15" fill="rgb(216,164,2)" fg:x="252" fg:w="1"/><text x="21.4979%" y="207.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (226 samples, 19.06%)</title><rect x="2.3609%" y="229" width="19.0556%" height="15" fill="rgb(220,129,5)" fg:x="28" fg:w="226"/><text x="2.6109%" y="239.50">&lt;actix_server::service::Stream..</text></g><g><title>&lt;actix_http::service::HttpServiceHandlerResponse&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="21.3322%" y="213" width="0.0843%" height="15" fill="rgb(242,17,10)" fg:x="253" fg:w="1"/><text x="21.5822%" y="223.50"></text></g><g><title>actix_server::worker::ServerWorker::start::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="21.4165%" y="229" width="0.0843%" height="15" fill="rgb(242,107,0)" fg:x="254" fg:w="1"/><text x="21.6665%" y="239.50"></text></g><g><title>&lt;actix_server::service::StreamNewService&lt;F,Io&gt; as actix_server::service::InternalServiceFactory&gt;::create (1 samples, 0.08%)</title><rect x="21.4165%" y="213" width="0.0843%" height="15" fill="rgb(251,28,31)" fg:x="254" fg:w="1"/><text x="21.6665%" y="223.50"></text></g><g><title>&lt;actix_service::boxed::FactoryWrapper&lt;SF&gt; as actix_service::ServiceFactory&lt;Req&gt;&gt;::new_service (1 samples, 0.08%)</title><rect x="21.4165%" y="197" width="0.0843%" height="15" fill="rgb(233,223,10)" fg:x="254" fg:w="1"/><text x="21.6665%" y="207.50"></text></g><g><title>actix-rt|system (256 samples, 21.59%)</title><rect x="0.0000%" y="357" width="21.5852%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="256"/><text x="0.2500%" y="367.50">actix-rt|system</text></g><g><title>__clone (256 samples, 21.59%)</title><rect x="0.0000%" y="341" width="21.5852%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="256"/><text x="0.2500%" y="351.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (256 samples, 21.59%)</title><rect x="0.0000%" y="325" width="21.5852%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="256"/><text x="0.2500%" y="335.50">std::sys::pal::unix::thread::Threa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (256 samples, 21.59%)</title><rect x="0.0000%" y="309" width="21.5852%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="256"/><text x="0.2500%" y="319.50">core::ops::function::FnOnce::call_..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (256 samples, 21.59%)</title><rect x="0.0000%" y="293" width="21.5852%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="256"/><text x="0.2500%" y="303.50">std::sys::backtrace::__rust_begin_..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (238 samples, 20.07%)</title><rect x="1.5177%" y="277" width="20.0675%" height="15" fill="rgb(212,68,19)" fg:x="18" fg:w="238"/><text x="1.7677%" y="287.50">tokio::task::local::LocalSet::ru..</text></g><g><title>tokio::task::local::LocalSet::tick (233 samples, 19.65%)</title><rect x="1.9393%" y="261" width="19.6459%" height="15" fill="rgb(240,187,13)" fg:x="23" fg:w="233"/><text x="2.1893%" y="271.50">tokio::task::local::LocalSet::t..</text></g><g><title>tokio::runtime::task::raw::poll (231 samples, 19.48%)</title><rect x="2.1079%" y="245" width="19.4772%" height="15" fill="rgb(223,113,26)" fg:x="25" fg:w="231"/><text x="2.3579%" y="255.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.08%)</title><rect x="21.5008%" y="229" width="0.0843%" height="15" fill="rgb(206,192,2)" fg:x="255" fg:w="1"/><text x="21.7508%" y="239.50"></text></g><g><title>actix-server ac (1 samples, 0.08%)</title><rect x="21.5852%" y="357" width="0.0843%" height="15" fill="rgb(241,108,4)" fg:x="256" fg:w="1"/><text x="21.8352%" y="367.50"></text></g><g><title>__clone (1 samples, 0.08%)</title><rect x="21.5852%" y="341" width="0.0843%" height="15" fill="rgb(247,173,49)" fg:x="256" fg:w="1"/><text x="21.8352%" y="351.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.08%)</title><rect x="21.5852%" y="325" width="0.0843%" height="15" fill="rgb(224,114,35)" fg:x="256" fg:w="1"/><text x="21.8352%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="21.5852%" y="309" width="0.0843%" height="15" fill="rgb(245,159,27)" fg:x="256" fg:w="1"/><text x="21.8352%" y="319.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.08%)</title><rect x="21.5852%" y="293" width="0.0843%" height="15" fill="rgb(245,172,44)" fg:x="256" fg:w="1"/><text x="21.8352%" y="303.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (6 samples, 0.51%)</title><rect x="23.1872%" y="245" width="0.5059%" height="15" fill="rgb(236,23,11)" fg:x="275" fg:w="6"/><text x="23.4372%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.08%)</title><rect x="23.6088%" y="229" width="0.0843%" height="15" fill="rgb(205,117,38)" fg:x="280" fg:w="1"/><text x="23.8588%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="23.8617%" y="229" width="0.0843%" height="15" fill="rgb(237,72,25)" fg:x="283" fg:w="1"/><text x="24.1117%" y="239.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 0.17%)</title><rect x="23.9460%" y="229" width="0.1686%" height="15" fill="rgb(244,70,9)" fg:x="284" fg:w="2"/><text x="24.1960%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="25.0422%" y="197" width="0.0843%" height="15" fill="rgb(217,125,39)" fg:x="297" fg:w="1"/><text x="25.2922%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (8 samples, 0.67%)</title><rect x="25.2951%" y="181" width="0.6745%" height="15" fill="rgb(235,36,10)" fg:x="300" fg:w="8"/><text x="25.5451%" y="191.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (24 samples, 2.02%)</title><rect x="24.1147%" y="229" width="2.0236%" height="15" fill="rgb(251,123,47)" fg:x="286" fg:w="24"/><text x="24.3647%" y="239.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (17 samples, 1.43%)</title><rect x="24.7049%" y="213" width="1.4334%" height="15" fill="rgb(221,13,13)" fg:x="293" fg:w="17"/><text x="24.9549%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 1.01%)</title><rect x="25.1265%" y="197" width="1.0118%" height="15" fill="rgb(238,131,9)" fg:x="298" fg:w="12"/><text x="25.3765%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.17%)</title><rect x="25.9696%" y="181" width="0.1686%" height="15" fill="rgb(211,50,8)" fg:x="308" fg:w="2"/><text x="26.2196%" y="191.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.08%)</title><rect x="26.1383%" y="229" width="0.0843%" height="15" fill="rgb(245,182,24)" fg:x="310" fg:w="1"/><text x="26.3883%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (40 samples, 3.37%)</title><rect x="22.9342%" y="261" width="3.3727%" height="15" fill="rgb(242,14,37)" fg:x="272" fg:w="40"/><text x="23.1842%" y="271.50">tok..</text></g><g><title>tokio::runtime::time::Driver::park_internal (31 samples, 2.61%)</title><rect x="23.6931%" y="245" width="2.6138%" height="15" fill="rgb(246,228,12)" fg:x="281" fg:w="31"/><text x="23.9431%" y="255.50">to..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.08%)</title><rect x="26.2226%" y="229" width="0.0843%" height="15" fill="rgb(213,55,15)" fg:x="311" fg:w="1"/><text x="26.4726%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (7 samples, 0.59%)</title><rect x="26.3069%" y="261" width="0.5902%" height="15" fill="rgb(209,9,3)" fg:x="312" fg:w="7"/><text x="26.5569%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.08%)</title><rect x="33.8111%" y="197" width="0.0843%" height="15" fill="rgb(230,59,30)" fg:x="401" fg:w="1"/><text x="34.0611%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (5 samples, 0.42%)</title><rect x="33.6425%" y="213" width="0.4216%" height="15" fill="rgb(209,121,21)" fg:x="399" fg:w="5"/><text x="33.8925%" y="223.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (2 samples, 0.17%)</title><rect x="33.8954%" y="197" width="0.1686%" height="15" fill="rgb(220,109,13)" fg:x="402" fg:w="2"/><text x="34.1454%" y="207.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (1 samples, 0.08%)</title><rect x="33.9798%" y="181" width="0.0843%" height="15" fill="rgb(232,18,1)" fg:x="403" fg:w="1"/><text x="34.2298%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (1 samples, 0.08%)</title><rect x="34.0641%" y="213" width="0.0843%" height="15" fill="rgb(215,41,42)" fg:x="404" fg:w="1"/><text x="34.3141%" y="223.50"></text></g><g><title>bytes::bytes::Bytes::slice (2 samples, 0.17%)</title><rect x="34.1484%" y="213" width="0.1686%" height="15" fill="rgb(224,123,36)" fg:x="405" fg:w="2"/><text x="34.3984%" y="223.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (1 samples, 0.08%)</title><rect x="34.2327%" y="197" width="0.0843%" height="15" fill="rgb(240,125,3)" fg:x="406" fg:w="1"/><text x="34.4827%" y="207.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.08%)</title><rect x="34.3170%" y="213" width="0.0843%" height="15" fill="rgb(205,98,50)" fg:x="407" fg:w="1"/><text x="34.5670%" y="223.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (2 samples, 0.17%)</title><rect x="34.4013%" y="213" width="0.1686%" height="15" fill="rgb(205,185,37)" fg:x="408" fg:w="2"/><text x="34.6513%" y="223.50"></text></g><g><title>bytes::bytes_mut::shared_v_is_unique (1 samples, 0.08%)</title><rect x="34.5700%" y="213" width="0.0843%" height="15" fill="rgb(238,207,15)" fg:x="410" fg:w="1"/><text x="34.8200%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (4 samples, 0.34%)</title><rect x="34.6543%" y="213" width="0.3373%" height="15" fill="rgb(213,199,42)" fg:x="411" fg:w="4"/><text x="34.9043%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.9073%" y="197" width="0.0843%" height="15" fill="rgb(235,201,11)" fg:x="414" fg:w="1"/><text x="35.1573%" y="207.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (1 samples, 0.08%)</title><rect x="34.9916%" y="213" width="0.0843%" height="15" fill="rgb(207,46,11)" fg:x="415" fg:w="1"/><text x="35.2416%" y="223.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.08%)</title><rect x="34.9916%" y="197" width="0.0843%" height="15" fill="rgb(241,35,35)" fg:x="415" fg:w="1"/><text x="35.2416%" y="207.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (1 samples, 0.08%)</title><rect x="35.0759%" y="213" width="0.0843%" height="15" fill="rgb(243,32,47)" fg:x="416" fg:w="1"/><text x="35.3259%" y="223.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.08%)</title><rect x="35.1602%" y="213" width="0.0843%" height="15" fill="rgb(247,202,23)" fg:x="417" fg:w="1"/><text x="35.4102%" y="223.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="35.2445%" y="213" width="0.0843%" height="15" fill="rgb(219,102,11)" fg:x="418" fg:w="1"/><text x="35.4945%" y="223.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (4 samples, 0.34%)</title><rect x="35.3288%" y="213" width="0.3373%" height="15" fill="rgb(243,110,44)" fg:x="419" fg:w="4"/><text x="35.5788%" y="223.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (4 samples, 0.34%)</title><rect x="35.3288%" y="197" width="0.3373%" height="15" fill="rgb(222,74,54)" fg:x="419" fg:w="4"/><text x="35.5788%" y="207.50"></text></g><g><title>httparse::parse_headers_iter_uninit (6 samples, 0.51%)</title><rect x="35.6661%" y="213" width="0.5059%" height="15" fill="rgb(216,99,12)" fg:x="423" fg:w="6"/><text x="35.9161%" y="223.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (1 samples, 0.08%)</title><rect x="36.0877%" y="197" width="0.0843%" height="15" fill="rgb(226,22,26)" fg:x="428" fg:w="1"/><text x="36.3377%" y="207.50"></text></g><g><title>httparse::parse_reason (2 samples, 0.17%)</title><rect x="36.1720%" y="213" width="0.1686%" height="15" fill="rgb(217,163,10)" fg:x="429" fg:w="2"/><text x="36.4220%" y="223.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::poll_canceled (5 samples, 0.42%)</title><rect x="36.3406%" y="213" width="0.4216%" height="15" fill="rgb(213,25,53)" fg:x="431" fg:w="5"/><text x="36.5906%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.08%)</title><rect x="36.8465%" y="181" width="0.0843%" height="15" fill="rgb(252,105,26)" fg:x="437" fg:w="1"/><text x="37.0965%" y="191.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (6 samples, 0.51%)</title><rect x="36.7622%" y="213" width="0.5059%" height="15" fill="rgb(220,39,43)" fg:x="436" fg:w="6"/><text x="37.0122%" y="223.50"></text></g><g><title>hyper::headers::is_chunked (6 samples, 0.51%)</title><rect x="36.7622%" y="197" width="0.5059%" height="15" fill="rgb(229,68,48)" fg:x="436" fg:w="6"/><text x="37.0122%" y="207.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (4 samples, 0.34%)</title><rect x="36.9309%" y="181" width="0.3373%" height="15" fill="rgb(252,8,32)" fg:x="438" fg:w="4"/><text x="37.1809%" y="191.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.17%)</title><rect x="37.0995%" y="165" width="0.1686%" height="15" fill="rgb(223,20,43)" fg:x="440" fg:w="2"/><text x="37.3495%" y="175.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2 samples, 0.17%)</title><rect x="37.5211%" y="165" width="0.1686%" height="15" fill="rgb(229,81,49)" fg:x="445" fg:w="2"/><text x="37.7711%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.17%)</title><rect x="37.5211%" y="149" width="0.1686%" height="15" fill="rgb(236,28,36)" fg:x="445" fg:w="2"/><text x="37.7711%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.17%)</title><rect x="37.5211%" y="133" width="0.1686%" height="15" fill="rgb(249,185,26)" fg:x="445" fg:w="2"/><text x="37.7711%" y="143.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (5 samples, 0.42%)</title><rect x="37.3524%" y="197" width="0.4216%" height="15" fill="rgb(249,174,33)" fg:x="443" fg:w="5"/><text x="37.6024%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4 samples, 0.34%)</title><rect x="37.4368%" y="181" width="0.3373%" height="15" fill="rgb(233,201,37)" fg:x="444" fg:w="4"/><text x="37.6868%" y="191.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.08%)</title><rect x="37.6897%" y="165" width="0.0843%" height="15" fill="rgb(221,78,26)" fg:x="447" fg:w="1"/><text x="37.9397%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (6 samples, 0.51%)</title><rect x="38.3642%" y="181" width="0.5059%" height="15" fill="rgb(250,127,30)" fg:x="455" fg:w="6"/><text x="38.6142%" y="191.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (5 samples, 0.42%)</title><rect x="38.4486%" y="165" width="0.4216%" height="15" fill="rgb(230,49,44)" fg:x="456" fg:w="5"/><text x="38.6986%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (21 samples, 1.77%)</title><rect x="37.2681%" y="213" width="1.7707%" height="15" fill="rgb(229,67,23)" fg:x="442" fg:w="21"/><text x="37.5181%" y="223.50">h..</text></g><g><title>hyper::proto::h1::decode::Decoder::decode (15 samples, 1.26%)</title><rect x="37.7740%" y="197" width="1.2648%" height="15" fill="rgb(249,83,47)" fg:x="448" fg:w="15"/><text x="38.0240%" y="207.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (2 samples, 0.17%)</title><rect x="38.8702%" y="181" width="0.1686%" height="15" fill="rgb(215,43,3)" fg:x="461" fg:w="2"/><text x="39.1202%" y="191.50"></text></g><g><title>&lt;http::header::value::HeaderValue as core::convert::From&lt;u64&gt;&gt;::from (1 samples, 0.08%)</title><rect x="39.3761%" y="197" width="0.0843%" height="15" fill="rgb(238,154,13)" fg:x="467" fg:w="1"/><text x="39.6261%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.17%)</title><rect x="39.4604%" y="197" width="0.1686%" height="15" fill="rgb(219,56,2)" fg:x="468" fg:w="2"/><text x="39.7104%" y="207.50"></text></g><g><title>core::fmt::write (4 samples, 0.34%)</title><rect x="39.6290%" y="197" width="0.3373%" height="15" fill="rgb(233,0,4)" fg:x="470" fg:w="4"/><text x="39.8790%" y="207.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (3 samples, 0.25%)</title><rect x="39.7133%" y="181" width="0.2530%" height="15" fill="rgb(235,30,7)" fg:x="471" fg:w="3"/><text x="39.9633%" y="191.50"></text></g><g><title>core::fmt::write (2 samples, 0.17%)</title><rect x="39.7976%" y="165" width="0.1686%" height="15" fill="rgb(250,79,13)" fg:x="472" fg:w="2"/><text x="40.0476%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::role::FastWrite as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="39.8820%" y="149" width="0.0843%" height="15" fill="rgb(211,146,34)" fg:x="473" fg:w="1"/><text x="40.1320%" y="159.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert2 (3 samples, 0.25%)</title><rect x="39.9663%" y="197" width="0.2530%" height="15" fill="rgb(228,22,38)" fg:x="474" fg:w="3"/><text x="40.2163%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="40.1349%" y="181" width="0.0843%" height="15" fill="rgb(235,168,5)" fg:x="476" fg:w="1"/><text x="40.3849%" y="191.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="40.2192%" y="197" width="0.0843%" height="15" fill="rgb(221,155,16)" fg:x="477" fg:w="1"/><text x="40.4692%" y="207.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (18 samples, 1.52%)</title><rect x="39.0388%" y="213" width="1.5177%" height="15" fill="rgb(215,215,53)" fg:x="463" fg:w="18"/><text x="39.2888%" y="223.50"></text></g><g><title>hyper::headers::content_length_parse_all (3 samples, 0.25%)</title><rect x="40.3035%" y="197" width="0.2530%" height="15" fill="rgb(223,4,10)" fg:x="478" fg:w="3"/><text x="40.5535%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (1 samples, 0.08%)</title><rect x="40.4722%" y="181" width="0.0843%" height="15" fill="rgb(234,103,6)" fg:x="480" fg:w="1"/><text x="40.7222%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.08%)</title><rect x="40.9781%" y="197" width="0.0843%" height="15" fill="rgb(227,97,0)" fg:x="486" fg:w="1"/><text x="41.2281%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.08%)</title><rect x="40.9781%" y="181" width="0.0843%" height="15" fill="rgb(234,150,53)" fg:x="486" fg:w="1"/><text x="41.2281%" y="191.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (7 samples, 0.59%)</title><rect x="40.5565%" y="213" width="0.5902%" height="15" fill="rgb(228,201,54)" fg:x="481" fg:w="7"/><text x="40.8065%" y="223.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.08%)</title><rect x="41.0624%" y="197" width="0.0843%" height="15" fill="rgb(222,22,37)" fg:x="487" fg:w="1"/><text x="41.3124%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (8 samples, 0.67%)</title><rect x="41.1467%" y="213" width="0.6745%" height="15" fill="rgb(237,53,32)" fg:x="488" fg:w="8"/><text x="41.3967%" y="223.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (4 samples, 0.34%)</title><rect x="41.4840%" y="197" width="0.3373%" height="15" fill="rgb(233,25,53)" fg:x="492" fg:w="4"/><text x="41.7340%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.17%)</title><rect x="41.6526%" y="181" width="0.1686%" height="15" fill="rgb(210,40,34)" fg:x="494" fg:w="2"/><text x="41.9026%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="41.8212%" y="213" width="0.0843%" height="15" fill="rgb(241,220,44)" fg:x="496" fg:w="1"/><text x="42.0712%" y="223.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (141 samples, 11.89%)</title><rect x="30.6914%" y="229" width="11.8887%" height="15" fill="rgb(235,28,35)" fg:x="364" fg:w="141"/><text x="30.9414%" y="239.50">&lt;hyper::client::co..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (8 samples, 0.67%)</title><rect x="41.9056%" y="213" width="0.6745%" height="15" fill="rgb(210,56,17)" fg:x="497" fg:w="8"/><text x="42.1556%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (5 samples, 0.42%)</title><rect x="42.1585%" y="197" width="0.4216%" height="15" fill="rgb(224,130,29)" fg:x="500" fg:w="5"/><text x="42.4085%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (12 samples, 1.01%)</title><rect x="44.9410%" y="197" width="1.0118%" height="15" fill="rgb(235,212,8)" fg:x="533" fg:w="12"/><text x="45.1910%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.51%)</title><rect x="45.4469%" y="181" width="0.5059%" height="15" fill="rgb(223,33,50)" fg:x="539" fg:w="6"/><text x="45.6969%" y="191.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.08%)</title><rect x="47.8078%" y="165" width="0.0843%" height="15" fill="rgb(219,149,13)" fg:x="567" fg:w="1"/><text x="48.0578%" y="175.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="48.7352%" y="117" width="0.0843%" height="15" fill="rgb(250,156,29)" fg:x="578" fg:w="1"/><text x="48.9852%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (4 samples, 0.34%)</title><rect x="48.6509%" y="133" width="0.3373%" height="15" fill="rgb(216,193,19)" fg:x="577" fg:w="4"/><text x="48.9009%" y="143.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2 samples, 0.17%)</title><rect x="48.8196%" y="117" width="0.1686%" height="15" fill="rgb(216,135,14)" fg:x="579" fg:w="2"/><text x="49.0696%" y="127.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.08%)</title><rect x="48.9039%" y="101" width="0.0843%" height="15" fill="rgb(241,47,5)" fg:x="580" fg:w="1"/><text x="49.1539%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (9 samples, 0.76%)</title><rect x="48.4823%" y="149" width="0.7589%" height="15" fill="rgb(233,42,35)" fg:x="575" fg:w="9"/><text x="48.7323%" y="159.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.25%)</title><rect x="48.9882%" y="133" width="0.2530%" height="15" fill="rgb(231,13,6)" fg:x="581" fg:w="3"/><text x="49.2382%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.08%)</title><rect x="49.1568%" y="117" width="0.0843%" height="15" fill="rgb(207,181,40)" fg:x="583" fg:w="1"/><text x="49.4068%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.08%)</title><rect x="50.2530%" y="69" width="0.0843%" height="15" fill="rgb(254,173,49)" fg:x="596" fg:w="1"/><text x="50.5030%" y="79.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.08%)</title><rect x="50.2530%" y="53" width="0.0843%" height="15" fill="rgb(221,1,38)" fg:x="596" fg:w="1"/><text x="50.5030%" y="63.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.08%)</title><rect x="50.2530%" y="37" width="0.0843%" height="15" fill="rgb(206,124,46)" fg:x="596" fg:w="1"/><text x="50.5030%" y="47.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.17%)</title><rect x="50.2530%" y="85" width="0.1686%" height="15" fill="rgb(249,21,11)" fg:x="596" fg:w="2"/><text x="50.5030%" y="95.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="50.3373%" y="69" width="0.0843%" height="15" fill="rgb(222,201,40)" fg:x="597" fg:w="1"/><text x="50.5873%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.25%)</title><rect x="50.4216%" y="85" width="0.2530%" height="15" fill="rgb(235,61,29)" fg:x="598" fg:w="3"/><text x="50.6716%" y="95.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (18 samples, 1.52%)</title><rect x="49.2411%" y="149" width="1.5177%" height="15" fill="rgb(219,207,3)" fg:x="584" fg:w="18"/><text x="49.4911%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (18 samples, 1.52%)</title><rect x="49.2411%" y="133" width="1.5177%" height="15" fill="rgb(222,56,46)" fg:x="584" fg:w="18"/><text x="49.4911%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (13 samples, 1.10%)</title><rect x="49.6627%" y="117" width="1.0961%" height="15" fill="rgb(239,76,54)" fg:x="589" fg:w="13"/><text x="49.9127%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (9 samples, 0.76%)</title><rect x="50.0000%" y="101" width="0.7589%" height="15" fill="rgb(231,124,27)" fg:x="593" fg:w="9"/><text x="50.2500%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="50.6745%" y="85" width="0.0843%" height="15" fill="rgb(249,195,6)" fg:x="601" fg:w="1"/><text x="50.9245%" y="95.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.25%)</title><rect x="51.0118%" y="133" width="0.2530%" height="15" fill="rgb(237,174,47)" fg:x="605" fg:w="3"/><text x="51.2618%" y="143.50"></text></g><g><title>combine::parser::Parser::parse_mode (8 samples, 0.67%)</title><rect x="50.7589%" y="149" width="0.6745%" height="15" fill="rgb(206,201,31)" fg:x="602" fg:w="8"/><text x="51.0089%" y="159.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2 samples, 0.17%)</title><rect x="51.2648%" y="133" width="0.1686%" height="15" fill="rgb(231,57,52)" fg:x="608" fg:w="2"/><text x="51.5148%" y="143.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (2 samples, 0.17%)</title><rect x="51.2648%" y="117" width="0.1686%" height="15" fill="rgb(248,177,22)" fg:x="608" fg:w="2"/><text x="51.5148%" y="127.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (1 samples, 0.08%)</title><rect x="51.3491%" y="101" width="0.0843%" height="15" fill="rgb(215,211,37)" fg:x="609" fg:w="1"/><text x="51.5991%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (45 samples, 3.79%)</title><rect x="47.8921%" y="165" width="3.7943%" height="15" fill="rgb(241,128,51)" fg:x="568" fg:w="45"/><text x="48.1421%" y="175.50">comb..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="51.4334%" y="149" width="0.2530%" height="15" fill="rgb(227,165,31)" fg:x="610" fg:w="3"/><text x="51.6834%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (58 samples, 4.89%)</title><rect x="46.8803%" y="181" width="4.8904%" height="15" fill="rgb(228,167,24)" fg:x="556" fg:w="58"/><text x="47.1303%" y="191.50">&lt;combi..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="51.6863%" y="165" width="0.0843%" height="15" fill="rgb(228,143,12)" fg:x="613" fg:w="1"/><text x="51.9363%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (99 samples, 8.35%)</title><rect x="43.5919%" y="213" width="8.3474%" height="15" fill="rgb(249,149,8)" fg:x="517" fg:w="99"/><text x="43.8419%" y="223.50">&lt;tokio_util:..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (71 samples, 5.99%)</title><rect x="45.9528%" y="197" width="5.9865%" height="15" fill="rgb(243,35,44)" fg:x="545" fg:w="71"/><text x="46.2028%" y="207.50">redis::p..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.17%)</title><rect x="51.7707%" y="181" width="0.1686%" height="15" fill="rgb(246,89,9)" fg:x="614" fg:w="2"/><text x="52.0207%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="52.2766%" y="197" width="0.0843%" height="15" fill="rgb(233,213,13)" fg:x="620" fg:w="1"/><text x="52.5266%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (5 samples, 0.42%)</title><rect x="52.3609%" y="197" width="0.4216%" height="15" fill="rgb(233,141,41)" fg:x="621" fg:w="5"/><text x="52.6109%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.08%)</title><rect x="52.7825%" y="197" width="0.0843%" height="15" fill="rgb(239,167,4)" fg:x="626" fg:w="1"/><text x="53.0325%" y="207.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (17 samples, 1.43%)</title><rect x="51.9393%" y="213" width="1.4334%" height="15" fill="rgb(209,217,16)" fg:x="616" fg:w="17"/><text x="52.1893%" y="223.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (6 samples, 0.51%)</title><rect x="52.8668%" y="197" width="0.5059%" height="15" fill="rgb(219,88,35)" fg:x="627" fg:w="6"/><text x="53.1168%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.08%)</title><rect x="53.2884%" y="181" width="0.0843%" height="15" fill="rgb(220,193,23)" fg:x="632" fg:w="1"/><text x="53.5384%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.17%)</title><rect x="54.1315%" y="197" width="0.1686%" height="15" fill="rgb(230,90,52)" fg:x="642" fg:w="2"/><text x="54.3815%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="54.3002%" y="197" width="0.0843%" height="15" fill="rgb(252,106,19)" fg:x="644" fg:w="1"/><text x="54.5502%" y="207.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (149 samples, 12.56%)</title><rect x="42.5801%" y="229" width="12.5632%" height="15" fill="rgb(206,74,20)" fg:x="505" fg:w="149"/><text x="42.8301%" y="239.50">&lt;redis::aio::multip..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (21 samples, 1.77%)</title><rect x="53.3727%" y="213" width="1.7707%" height="15" fill="rgb(230,138,44)" fg:x="633" fg:w="21"/><text x="53.6227%" y="223.50">r..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (9 samples, 0.76%)</title><rect x="54.3845%" y="197" width="0.7589%" height="15" fill="rgb(235,182,43)" fg:x="645" fg:w="9"/><text x="54.6345%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (6 samples, 0.51%)</title><rect x="54.6374%" y="181" width="0.5059%" height="15" fill="rgb(242,16,51)" fg:x="648" fg:w="6"/><text x="54.8874%" y="191.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="55.6492%" y="213" width="0.0843%" height="15" fill="rgb(248,9,4)" fg:x="660" fg:w="1"/><text x="55.8992%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.42%)</title><rect x="55.7336%" y="213" width="0.4216%" height="15" fill="rgb(210,31,22)" fg:x="661" fg:w="5"/><text x="55.9836%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="55.9022%" y="197" width="0.2530%" height="15" fill="rgb(239,54,39)" fg:x="663" fg:w="3"/><text x="56.1522%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (13 samples, 1.10%)</title><rect x="55.1433%" y="229" width="1.0961%" height="15" fill="rgb(230,99,41)" fg:x="654" fg:w="13"/><text x="55.3933%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.08%)</title><rect x="56.1551%" y="213" width="0.0843%" height="15" fill="rgb(253,106,12)" fg:x="666" fg:w="1"/><text x="56.4051%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.17%)</title><rect x="56.2395%" y="229" width="0.1686%" height="15" fill="rgb(213,46,41)" fg:x="667" fg:w="2"/><text x="56.4895%" y="239.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (4 samples, 0.34%)</title><rect x="56.4081%" y="229" width="0.3373%" height="15" fill="rgb(215,133,35)" fg:x="669" fg:w="4"/><text x="56.6581%" y="239.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (5 samples, 0.42%)</title><rect x="56.7454%" y="229" width="0.4216%" height="15" fill="rgb(213,28,5)" fg:x="673" fg:w="5"/><text x="56.9954%" y="239.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (338 samples, 28.50%)</title><rect x="28.8364%" y="245" width="28.4992%" height="15" fill="rgb(215,77,49)" fg:x="342" fg:w="338"/><text x="29.0864%" y="255.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as c..</text></g><g><title>want::Giver::poll_want (2 samples, 0.17%)</title><rect x="57.1669%" y="229" width="0.1686%" height="15" fill="rgb(248,100,22)" fg:x="678" fg:w="2"/><text x="57.4169%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;,alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="57.3356%" y="245" width="0.0843%" height="15" fill="rgb(208,67,9)" fg:x="680" fg:w="1"/><text x="57.5856%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.17%)</title><rect x="58.0101%" y="197" width="0.1686%" height="15" fill="rgb(219,133,21)" fg:x="688" fg:w="2"/><text x="58.2601%" y="207.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.34%)</title><rect x="58.0101%" y="213" width="0.3373%" height="15" fill="rgb(246,46,29)" fg:x="688" fg:w="4"/><text x="58.2601%" y="223.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.17%)</title><rect x="58.1788%" y="197" width="0.1686%" height="15" fill="rgb(246,185,52)" fg:x="690" fg:w="2"/><text x="58.4288%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.08%)</title><rect x="58.3474%" y="213" width="0.0843%" height="15" fill="rgb(252,136,11)" fg:x="692" fg:w="1"/><text x="58.5974%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="59.2749%" y="149" width="0.0843%" height="15" fill="rgb(219,138,53)" fg:x="703" fg:w="1"/><text x="59.5249%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.6121%" y="133" width="0.0843%" height="15" fill="rgb(211,51,23)" fg:x="707" fg:w="1"/><text x="59.8621%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.08%)</title><rect x="59.6121%" y="117" width="0.0843%" height="15" fill="rgb(247,221,28)" fg:x="707" fg:w="1"/><text x="59.8621%" y="127.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (10 samples, 0.84%)</title><rect x="59.0219%" y="165" width="0.8432%" height="15" fill="rgb(251,222,45)" fg:x="700" fg:w="10"/><text x="59.2719%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (6 samples, 0.51%)</title><rect x="59.3592%" y="149" width="0.5059%" height="15" fill="rgb(217,162,53)" fg:x="704" fg:w="6"/><text x="59.6092%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.17%)</title><rect x="59.6965%" y="133" width="0.1686%" height="15" fill="rgb(229,93,14)" fg:x="708" fg:w="2"/><text x="59.9465%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.08%)</title><rect x="59.7808%" y="117" width="0.0843%" height="15" fill="rgb(209,67,49)" fg:x="709" fg:w="1"/><text x="60.0308%" y="127.50"></text></g><g><title>redis::cmd::args_len (2 samples, 0.17%)</title><rect x="59.8651%" y="165" width="0.1686%" height="15" fill="rgb(213,87,29)" fg:x="710" fg:w="2"/><text x="60.1151%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (14 samples, 1.18%)</title><rect x="58.9376%" y="181" width="1.1804%" height="15" fill="rgb(205,151,52)" fg:x="699" fg:w="14"/><text x="59.1876%" y="191.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.08%)</title><rect x="60.0337%" y="165" width="0.0843%" height="15" fill="rgb(253,215,39)" fg:x="712" fg:w="1"/><text x="60.2837%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.08%)</title><rect x="60.1180%" y="181" width="0.0843%" height="15" fill="rgb(221,220,41)" fg:x="713" fg:w="1"/><text x="60.3680%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (30 samples, 2.53%)</title><rect x="57.7572%" y="229" width="2.5295%" height="15" fill="rgb(218,133,21)" fg:x="685" fg:w="30"/><text x="58.0072%" y="239.50">&lt;r..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (22 samples, 1.85%)</title><rect x="58.4317%" y="213" width="1.8550%" height="15" fill="rgb(221,193,43)" fg:x="693" fg:w="22"/><text x="58.6817%" y="223.50">r..</text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (20 samples, 1.69%)</title><rect x="58.6003%" y="197" width="1.6863%" height="15" fill="rgb(240,128,52)" fg:x="695" fg:w="20"/><text x="58.8503%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="60.2024%" y="181" width="0.0843%" height="15" fill="rgb(253,114,12)" fg:x="714" fg:w="1"/><text x="60.4524%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="60.2867%" y="229" width="0.0843%" height="15" fill="rgb(215,223,47)" fg:x="715" fg:w="1"/><text x="60.5367%" y="239.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.08%)</title><rect x="60.3710%" y="229" width="0.0843%" height="15" fill="rgb(248,225,23)" fg:x="716" fg:w="1"/><text x="60.6210%" y="239.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::mpsc_to_redis_worker::mpsc_to_redis_worker::{{closure}} (39 samples, 3.29%)</title><rect x="57.4199%" y="245" width="3.2884%" height="15" fill="rgb(250,108,0)" fg:x="681" fg:w="39"/><text x="57.6699%" y="255.50">rin..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.25%)</title><rect x="60.4553%" y="229" width="0.2530%" height="15" fill="rgb(228,208,7)" fg:x="717" fg:w="3"/><text x="60.7053%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.17%)</title><rect x="62.3103%" y="229" width="0.1686%" height="15" fill="rgb(244,45,10)" fg:x="739" fg:w="2"/><text x="62.5603%" y="239.50"></text></g><g><title>core::fmt::write (2 samples, 0.17%)</title><rect x="63.7437%" y="181" width="0.1686%" height="15" fill="rgb(207,125,25)" fg:x="756" fg:w="2"/><text x="63.9937%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.6162 (1 samples, 0.08%)</title><rect x="63.8280%" y="165" width="0.0843%" height="15" fill="rgb(210,195,18)" fg:x="757" fg:w="1"/><text x="64.0780%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (3 samples, 0.25%)</title><rect x="64.2496%" y="165" width="0.2530%" height="15" fill="rgb(249,80,12)" fg:x="762" fg:w="3"/><text x="64.4996%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6160 (2 samples, 0.17%)</title><rect x="64.3339%" y="149" width="0.1686%" height="15" fill="rgb(221,65,9)" fg:x="763" fg:w="2"/><text x="64.5839%" y="159.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.17%)</title><rect x="64.3339%" y="133" width="0.1686%" height="15" fill="rgb(235,49,36)" fg:x="763" fg:w="2"/><text x="64.5839%" y="143.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (2 samples, 0.17%)</title><rect x="64.5025%" y="165" width="0.1686%" height="15" fill="rgb(225,32,20)" fg:x="765" fg:w="2"/><text x="64.7525%" y="175.50"></text></g><g><title>url::host::Host::parse (10 samples, 0.84%)</title><rect x="63.9123%" y="181" width="0.8432%" height="15" fill="rgb(215,141,46)" fg:x="758" fg:w="10"/><text x="64.1623%" y="191.50"></text></g><g><title>url::host::parse_ipv4number (1 samples, 0.08%)</title><rect x="64.6712%" y="165" width="0.0843%" height="15" fill="rgb(250,160,47)" fg:x="767" fg:w="1"/><text x="64.9212%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path (2 samples, 0.17%)</title><rect x="64.7555%" y="181" width="0.1686%" height="15" fill="rgb(216,222,40)" fg:x="768" fg:w="2"/><text x="65.0055%" y="191.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (30 samples, 2.53%)</title><rect x="62.4789%" y="229" width="2.5295%" height="15" fill="rgb(234,217,39)" fg:x="741" fg:w="30"/><text x="62.7289%" y="239.50">&lt;&amp;..</text></g><g><title>url::ParseOptions::parse (30 samples, 2.53%)</title><rect x="62.4789%" y="213" width="2.5295%" height="15" fill="rgb(207,178,40)" fg:x="741" fg:w="30"/><text x="62.7289%" y="223.50">ur..</text></g><g><title>url::parser::Parser::after_double_slash (26 samples, 2.19%)</title><rect x="62.8162%" y="197" width="2.1922%" height="15" fill="rgb(221,136,13)" fg:x="745" fg:w="26"/><text x="63.0662%" y="207.50">u..</text></g><g><title>url::parser::Parser::with_query_and_fragment (1 samples, 0.08%)</title><rect x="64.9241%" y="181" width="0.0843%" height="15" fill="rgb(249,199,10)" fg:x="770" fg:w="1"/><text x="65.1741%" y="191.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (1 samples, 0.08%)</title><rect x="64.9241%" y="165" width="0.0843%" height="15" fill="rgb(249,222,13)" fg:x="770" fg:w="1"/><text x="65.1741%" y="175.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="65.1771%" y="181" width="0.0843%" height="15" fill="rgb(244,185,38)" fg:x="773" fg:w="1"/><text x="65.4271%" y="191.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (8 samples, 0.67%)</title><rect x="65.1771%" y="213" width="0.6745%" height="15" fill="rgb(236,202,9)" fg:x="773" fg:w="8"/><text x="65.4271%" y="223.50"></text></g><g><title>core::fmt::write (8 samples, 0.67%)</title><rect x="65.1771%" y="197" width="0.6745%" height="15" fill="rgb(250,229,37)" fg:x="773" fg:w="8"/><text x="65.4271%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4345 (7 samples, 0.59%)</title><rect x="65.2614%" y="181" width="0.5902%" height="15" fill="rgb(206,174,23)" fg:x="774" fg:w="7"/><text x="65.5114%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6 samples, 0.51%)</title><rect x="65.3457%" y="165" width="0.5059%" height="15" fill="rgb(211,33,43)" fg:x="775" fg:w="6"/><text x="65.5957%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.42%)</title><rect x="65.4300%" y="149" width="0.4216%" height="15" fill="rgb(245,58,50)" fg:x="776" fg:w="5"/><text x="65.6800%" y="159.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.17%)</title><rect x="66.4418%" y="197" width="0.1686%" height="15" fill="rgb(244,68,36)" fg:x="788" fg:w="2"/><text x="66.6918%" y="207.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (1 samples, 0.08%)</title><rect x="68.4654%" y="181" width="0.0843%" height="15" fill="rgb(232,229,15)" fg:x="812" fg:w="1"/><text x="68.7154%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.4654%" y="165" width="0.0843%" height="15" fill="rgb(254,30,23)" fg:x="812" fg:w="1"/><text x="68.7154%" y="175.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (15 samples, 1.26%)</title><rect x="68.5497%" y="181" width="1.2648%" height="15" fill="rgb(235,160,14)" fg:x="813" fg:w="15"/><text x="68.7997%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.76%)</title><rect x="69.0556%" y="165" width="0.7589%" height="15" fill="rgb(212,155,44)" fg:x="819" fg:w="9"/><text x="69.3056%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.25%)</title><rect x="69.5616%" y="149" width="0.2530%" height="15" fill="rgb(226,2,50)" fg:x="825" fg:w="3"/><text x="69.8116%" y="159.50"></text></g><g><title>&lt;reqwest::connect::ConnectorService as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call (1 samples, 0.08%)</title><rect x="69.8145%" y="149" width="0.0843%" height="15" fill="rgb(234,177,6)" fg:x="828" fg:w="1"/><text x="70.0645%" y="159.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (2 samples, 0.17%)</title><rect x="69.8145%" y="181" width="0.1686%" height="15" fill="rgb(217,24,9)" fg:x="828" fg:w="2"/><text x="70.0645%" y="191.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.17%)</title><rect x="69.8145%" y="165" width="0.1686%" height="15" fill="rgb(220,13,46)" fg:x="828" fg:w="2"/><text x="70.0645%" y="175.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.08%)</title><rect x="69.8988%" y="149" width="0.0843%" height="15" fill="rgb(239,221,27)" fg:x="829" fg:w="1"/><text x="70.1488%" y="159.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.08%)</title><rect x="69.8988%" y="133" width="0.0843%" height="15" fill="rgb(222,198,25)" fg:x="829" fg:w="1"/><text x="70.1488%" y="143.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.08%)</title><rect x="69.8988%" y="117" width="0.0843%" height="15" fill="rgb(211,99,13)" fg:x="829" fg:w="1"/><text x="70.1488%" y="127.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.08%)</title><rect x="69.8988%" y="101" width="0.0843%" height="15" fill="rgb(232,111,31)" fg:x="829" fg:w="1"/><text x="70.1488%" y="111.50"></text></g><g><title>&lt;reqwest::dns::gai::GaiResolver as reqwest::dns::resolve::Resolve&gt;::resolve::{{closure}} (1 samples, 0.08%)</title><rect x="69.8988%" y="85" width="0.0843%" height="15" fill="rgb(245,82,37)" fg:x="829" fg:w="1"/><text x="70.1488%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.08%)</title><rect x="69.8988%" y="69" width="0.0843%" height="15" fill="rgb(227,149,46)" fg:x="829" fg:w="1"/><text x="70.1488%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.08%)</title><rect x="69.8988%" y="53" width="0.0843%" height="15" fill="rgb(218,36,50)" fg:x="829" fg:w="1"/><text x="70.1488%" y="63.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (1 samples, 0.08%)</title><rect x="69.9831%" y="181" width="0.0843%" height="15" fill="rgb(226,80,48)" fg:x="830" fg:w="1"/><text x="70.2331%" y="191.50"></text></g><g><title>&lt;http::uri::port::Port&lt;T&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.17%)</title><rect x="70.1518%" y="149" width="0.1686%" height="15" fill="rgb(238,224,15)" fg:x="832" fg:w="2"/><text x="70.4018%" y="159.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.42%)</title><rect x="70.0675%" y="181" width="0.4216%" height="15" fill="rgb(241,136,10)" fg:x="831" fg:w="5"/><text x="70.3175%" y="191.50"></text></g><g><title>core::fmt::write (5 samples, 0.42%)</title><rect x="70.0675%" y="165" width="0.4216%" height="15" fill="rgb(208,32,45)" fg:x="831" fg:w="5"/><text x="70.3175%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.17%)</title><rect x="70.3204%" y="149" width="0.1686%" height="15" fill="rgb(207,135,9)" fg:x="834" fg:w="2"/><text x="70.5704%" y="159.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (2 samples, 0.17%)</title><rect x="70.4890%" y="181" width="0.1686%" height="15" fill="rgb(206,86,44)" fg:x="836" fg:w="2"/><text x="70.7390%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (3 samples, 0.25%)</title><rect x="70.6577%" y="181" width="0.2530%" height="15" fill="rgb(245,177,15)" fg:x="838" fg:w="3"/><text x="70.9077%" y="191.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.08%)</title><rect x="70.9106%" y="165" width="0.0843%" height="15" fill="rgb(206,64,50)" fg:x="841" fg:w="1"/><text x="71.1606%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}&gt; (3 samples, 0.25%)</title><rect x="70.9106%" y="181" width="0.2530%" height="15" fill="rgb(234,36,40)" fg:x="841" fg:w="3"/><text x="71.1606%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (2 samples, 0.17%)</title><rect x="70.9949%" y="165" width="0.1686%" height="15" fill="rgb(213,64,8)" fg:x="842" fg:w="2"/><text x="71.2449%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Checkout&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (2 samples, 0.17%)</title><rect x="71.1636%" y="181" width="0.1686%" height="15" fill="rgb(210,75,36)" fg:x="844" fg:w="2"/><text x="71.4136%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.08%)</title><rect x="71.2479%" y="165" width="0.0843%" height="15" fill="rgb(229,88,21)" fg:x="845" fg:w="1"/><text x="71.4979%" y="175.50"></text></g><g><title>http::uri::authority::Authority::port (3 samples, 0.25%)</title><rect x="71.3322%" y="181" width="0.2530%" height="15" fill="rgb(252,204,47)" fg:x="846" fg:w="3"/><text x="71.5822%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (2 samples, 0.17%)</title><rect x="71.4165%" y="165" width="0.1686%" height="15" fill="rgb(208,77,27)" fg:x="847" fg:w="2"/><text x="71.6665%" y="175.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="71.5008%" y="149" width="0.0843%" height="15" fill="rgb(221,76,26)" fg:x="848" fg:w="1"/><text x="71.7508%" y="159.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (2 samples, 0.17%)</title><rect x="71.5852%" y="181" width="0.1686%" height="15" fill="rgb(225,139,18)" fg:x="849" fg:w="2"/><text x="71.8352%" y="191.50"></text></g><g><title>http::uri::builder::Builder::map (2 samples, 0.17%)</title><rect x="71.5852%" y="165" width="0.1686%" height="15" fill="rgb(230,137,11)" fg:x="849" fg:w="2"/><text x="71.8352%" y="175.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.08%)</title><rect x="71.6695%" y="149" width="0.0843%" height="15" fill="rgb(212,28,1)" fg:x="850" fg:w="1"/><text x="71.9195%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="71.7538%" y="181" width="0.0843%" height="15" fill="rgb(248,164,17)" fg:x="851" fg:w="1"/><text x="72.0038%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.08%)</title><rect x="71.7538%" y="165" width="0.0843%" height="15" fill="rgb(222,171,42)" fg:x="851" fg:w="1"/><text x="72.0038%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (72 samples, 6.07%)</title><rect x="65.8516%" y="213" width="6.0708%" height="15" fill="rgb(243,84,45)" fg:x="781" fg:w="72"/><text x="66.1016%" y="223.50">&lt;reqwest..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (63 samples, 5.31%)</title><rect x="66.6105%" y="197" width="5.3120%" height="15" fill="rgb(252,49,23)" fg:x="790" fg:w="63"/><text x="66.8605%" y="207.50">hyper_u..</text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (1 samples, 0.08%)</title><rect x="71.8381%" y="181" width="0.0843%" height="15" fill="rgb(215,19,7)" fg:x="852" fg:w="1"/><text x="72.0881%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.17%)</title><rect x="71.9224%" y="213" width="0.1686%" height="15" fill="rgb(238,81,41)" fg:x="853" fg:w="2"/><text x="72.1724%" y="223.50"></text></g><g><title>core::fmt::write (3 samples, 0.25%)</title><rect x="73.2715%" y="181" width="0.2530%" height="15" fill="rgb(210,199,37)" fg:x="869" fg:w="3"/><text x="73.5215%" y="191.50"></text></g><g><title>&lt;url::host::Host&lt;S&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="73.4401%" y="165" width="0.0843%" height="15" fill="rgb(244,192,49)" fg:x="871" fg:w="1"/><text x="73.6901%" y="175.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (6 samples, 0.51%)</title><rect x="74.0304%" y="165" width="0.5059%" height="15" fill="rgb(226,211,11)" fg:x="878" fg:w="6"/><text x="74.2804%" y="175.50"></text></g><g><title>url::host::Host::parse (15 samples, 1.26%)</title><rect x="73.5245%" y="181" width="1.2648%" height="15" fill="rgb(236,162,54)" fg:x="872" fg:w="15"/><text x="73.7745%" y="191.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (3 samples, 0.25%)</title><rect x="74.5363%" y="165" width="0.2530%" height="15" fill="rgb(220,229,9)" fg:x="884" fg:w="3"/><text x="74.7863%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path (10 samples, 0.84%)</title><rect x="74.7892%" y="181" width="0.8432%" height="15" fill="rgb(250,87,22)" fg:x="887" fg:w="10"/><text x="75.0392%" y="191.50"></text></g><g><title>url::parser::Parser::check_url_code_point (1 samples, 0.08%)</title><rect x="75.5481%" y="165" width="0.0843%" height="15" fill="rgb(239,43,17)" fg:x="896" fg:w="1"/><text x="75.7981%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path_start (2 samples, 0.17%)</title><rect x="75.6324%" y="181" width="0.1686%" height="15" fill="rgb(231,177,25)" fg:x="897" fg:w="2"/><text x="75.8824%" y="191.50"></text></g><g><title>url::parser::Parser::with_query_and_fragment (1 samples, 0.08%)</title><rect x="75.8010%" y="181" width="0.0843%" height="15" fill="rgb(219,179,1)" fg:x="899" fg:w="1"/><text x="76.0510%" y="191.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (1 samples, 0.08%)</title><rect x="75.8010%" y="165" width="0.0843%" height="15" fill="rgb(238,219,53)" fg:x="899" fg:w="1"/><text x="76.0510%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (130 samples, 10.96%)</title><rect x="65.0084%" y="229" width="10.9612%" height="15" fill="rgb(232,167,36)" fg:x="771" fg:w="130"/><text x="65.2584%" y="239.50">&lt;reqwest::async_..</text></g><g><title>url::ParseOptions::parse (46 samples, 3.88%)</title><rect x="72.0911%" y="213" width="3.8786%" height="15" fill="rgb(244,19,51)" fg:x="855" fg:w="46"/><text x="72.3411%" y="223.50">url:..</text></g><g><title>url::parser::Parser::after_double_slash (41 samples, 3.46%)</title><rect x="72.5126%" y="197" width="3.4570%" height="15" fill="rgb(224,6,22)" fg:x="860" fg:w="41"/><text x="72.7626%" y="207.50">url..</text></g><g><title>url::parser::default_port (1 samples, 0.08%)</title><rect x="75.8853%" y="181" width="0.0843%" height="15" fill="rgb(224,145,5)" fg:x="900" fg:w="1"/><text x="76.1353%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="76.9815%" y="165" width="0.0843%" height="15" fill="rgb(234,130,49)" fg:x="913" fg:w="1"/><text x="77.2315%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (9 samples, 0.76%)</title><rect x="76.8128%" y="181" width="0.7589%" height="15" fill="rgb(254,6,2)" fg:x="911" fg:w="9"/><text x="77.0628%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (6 samples, 0.51%)</title><rect x="77.0658%" y="165" width="0.5059%" height="15" fill="rgb(208,96,46)" fg:x="914" fg:w="6"/><text x="77.3158%" y="175.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.08%)</title><rect x="77.5717%" y="181" width="0.0843%" height="15" fill="rgb(239,3,39)" fg:x="920" fg:w="1"/><text x="77.8217%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (14 samples, 1.18%)</title><rect x="76.5599%" y="197" width="1.1804%" height="15" fill="rgb(233,210,1)" fg:x="908" fg:w="14"/><text x="76.8099%" y="207.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.08%)</title><rect x="77.6560%" y="181" width="0.0843%" height="15" fill="rgb(244,137,37)" fg:x="921" fg:w="1"/><text x="77.9060%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2138 (1 samples, 0.08%)</title><rect x="77.8246%" y="165" width="0.0843%" height="15" fill="rgb(240,136,2)" fg:x="923" fg:w="1"/><text x="78.0746%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.34%)</title><rect x="77.7403%" y="197" width="0.3373%" height="15" fill="rgb(239,18,37)" fg:x="922" fg:w="4"/><text x="77.9903%" y="207.50"></text></g><g><title>core::fmt::write (4 samples, 0.34%)</title><rect x="77.7403%" y="181" width="0.3373%" height="15" fill="rgb(218,185,22)" fg:x="922" fg:w="4"/><text x="77.9903%" y="191.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (2 samples, 0.17%)</title><rect x="77.9089%" y="165" width="0.1686%" height="15" fill="rgb(225,218,4)" fg:x="924" fg:w="2"/><text x="78.1589%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.2139 (1 samples, 0.08%)</title><rect x="77.9933%" y="149" width="0.0843%" height="15" fill="rgb(230,182,32)" fg:x="925" fg:w="1"/><text x="78.2433%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="78.0776%" y="197" width="0.0843%" height="15" fill="rgb(242,56,43)" fg:x="926" fg:w="1"/><text x="78.3276%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (27 samples, 2.28%)</title><rect x="75.9696%" y="229" width="2.2766%" height="15" fill="rgb(233,99,24)" fg:x="901" fg:w="27"/><text x="76.2196%" y="239.50">&lt;..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (24 samples, 2.02%)</title><rect x="76.2226%" y="213" width="2.0236%" height="15" fill="rgb(234,209,42)" fg:x="904" fg:w="24"/><text x="76.4726%" y="223.50">r..</text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.08%)</title><rect x="78.1619%" y="197" width="0.0843%" height="15" fill="rgb(227,7,12)" fg:x="927" fg:w="1"/><text x="78.4119%" y="207.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.17%)</title><rect x="80.3541%" y="165" width="0.1686%" height="15" fill="rgb(245,203,43)" fg:x="953" fg:w="2"/><text x="80.6041%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (12 samples, 1.01%)</title><rect x="79.5953%" y="197" width="1.0118%" height="15" fill="rgb(238,205,33)" fg:x="944" fg:w="12"/><text x="79.8453%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (10 samples, 0.84%)</title><rect x="79.7639%" y="181" width="0.8432%" height="15" fill="rgb(231,56,7)" fg:x="946" fg:w="10"/><text x="80.0139%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="80.5228%" y="165" width="0.0843%" height="15" fill="rgb(244,186,29)" fg:x="955" fg:w="1"/><text x="80.7728%" y="175.50"></text></g><g><title>redis::cmd::args_len (5 samples, 0.42%)</title><rect x="80.7757%" y="181" width="0.4216%" height="15" fill="rgb(234,111,31)" fg:x="958" fg:w="5"/><text x="81.0257%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (29 samples, 2.45%)</title><rect x="79.4266%" y="213" width="2.4452%" height="15" fill="rgb(241,149,10)" fg:x="942" fg:w="29"/><text x="79.6766%" y="223.50">&lt;r..</text></g><g><title>redis::pipeline::encode_pipeline (15 samples, 1.26%)</title><rect x="80.6071%" y="197" width="1.2648%" height="15" fill="rgb(249,206,44)" fg:x="956" fg:w="15"/><text x="80.8571%" y="207.50"></text></g><g><title>redis::cmd::write_command (8 samples, 0.67%)</title><rect x="81.1973%" y="181" width="0.6745%" height="15" fill="rgb(251,153,30)" fg:x="963" fg:w="8"/><text x="81.4473%" y="191.50"></text></g><g><title>&lt;core::fmt::Formatter as powerfmt::ext::FormatterExt&gt;::pad_with_width (1 samples, 0.08%)</title><rect x="81.9562%" y="165" width="0.0843%" height="15" fill="rgb(239,152,38)" fg:x="972" fg:w="1"/><text x="82.2062%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="82.2091%" y="149" width="0.0843%" height="15" fill="rgb(249,139,47)" fg:x="975" fg:w="1"/><text x="82.4591%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.08%)</title><rect x="82.2934%" y="149" width="0.0843%" height="15" fill="rgb(244,64,35)" fg:x="976" fg:w="1"/><text x="82.5434%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="82.2934%" y="133" width="0.0843%" height="15" fill="rgb(216,46,15)" fg:x="976" fg:w="1"/><text x="82.5434%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.2934%" y="117" width="0.0843%" height="15" fill="rgb(250,74,19)" fg:x="976" fg:w="1"/><text x="82.5434%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.2934%" y="101" width="0.0843%" height="15" fill="rgb(249,42,33)" fg:x="976" fg:w="1"/><text x="82.5434%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4414 (1 samples, 0.08%)</title><rect x="82.6307%" y="117" width="0.0843%" height="15" fill="rgb(242,149,17)" fg:x="980" fg:w="1"/><text x="82.8807%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.6307%" y="101" width="0.0843%" height="15" fill="rgb(244,29,21)" fg:x="980" fg:w="1"/><text x="82.8807%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.6307%" y="85" width="0.0843%" height="15" fill="rgb(220,130,37)" fg:x="980" fg:w="1"/><text x="82.8807%" y="95.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (10 samples, 0.84%)</title><rect x="81.9562%" y="181" width="0.8432%" height="15" fill="rgb(211,67,2)" fg:x="972" fg:w="10"/><text x="82.2062%" y="191.50"></text></g><g><title>core::fmt::write (9 samples, 0.76%)</title><rect x="82.0405%" y="165" width="0.7589%" height="15" fill="rgb(235,68,52)" fg:x="973" fg:w="9"/><text x="82.2905%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (5 samples, 0.42%)</title><rect x="82.3777%" y="149" width="0.4216%" height="15" fill="rgb(246,142,3)" fg:x="977" fg:w="5"/><text x="82.6277%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.25%)</title><rect x="82.5464%" y="133" width="0.2530%" height="15" fill="rgb(241,25,7)" fg:x="979" fg:w="3"/><text x="82.7964%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="82.7150%" y="117" width="0.0843%" height="15" fill="rgb(242,119,39)" fg:x="981" fg:w="1"/><text x="82.9650%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="83.1366%" y="133" width="0.0843%" height="15" fill="rgb(241,98,45)" fg:x="986" fg:w="1"/><text x="83.3866%" y="143.50"></text></g><g><title>&lt;time::time::Time as core::fmt::Display&gt;::fmt (6 samples, 0.51%)</title><rect x="82.7993%" y="181" width="0.5059%" height="15" fill="rgb(254,28,30)" fg:x="982" fg:w="6"/><text x="83.0493%" y="191.50"></text></g><g><title>core::fmt::write (5 samples, 0.42%)</title><rect x="82.8836%" y="165" width="0.4216%" height="15" fill="rgb(241,142,54)" fg:x="983" fg:w="5"/><text x="83.1336%" y="175.50"></text></g><g><title>&lt;deranged::RangedU8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (4 samples, 0.34%)</title><rect x="82.9680%" y="149" width="0.3373%" height="15" fill="rgb(222,85,15)" fg:x="984" fg:w="4"/><text x="83.2180%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="83.2209%" y="133" width="0.0843%" height="15" fill="rgb(210,85,47)" fg:x="987" fg:w="1"/><text x="83.4709%" y="143.50"></text></g><g><title>&lt;core::fmt::Formatter as powerfmt::ext::FormatterExt&gt;::pad_with_width (1 samples, 0.08%)</title><rect x="83.4739%" y="165" width="0.0843%" height="15" fill="rgb(224,206,25)" fg:x="990" fg:w="1"/><text x="83.7239%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4414 (1 samples, 0.08%)</title><rect x="83.6425%" y="149" width="0.0843%" height="15" fill="rgb(243,201,19)" fg:x="992" fg:w="1"/><text x="83.8925%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="83.7268%" y="149" width="0.0843%" height="15" fill="rgb(236,59,4)" fg:x="993" fg:w="1"/><text x="83.9768%" y="159.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="83.8111%" y="149" width="0.0843%" height="15" fill="rgb(254,179,45)" fg:x="994" fg:w="1"/><text x="84.0611%" y="159.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (25 samples, 2.11%)</title><rect x="81.8718%" y="213" width="2.1079%" height="15" fill="rgb(226,14,10)" fg:x="971" fg:w="25"/><text x="82.1218%" y="223.50">&lt;..</text></g><g><title>core::fmt::write (25 samples, 2.11%)</title><rect x="81.8718%" y="197" width="2.1079%" height="15" fill="rgb(244,27,41)" fg:x="971" fg:w="25"/><text x="82.1218%" y="207.50">c..</text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (8 samples, 0.67%)</title><rect x="83.3052%" y="181" width="0.6745%" height="15" fill="rgb(235,35,32)" fg:x="988" fg:w="8"/><text x="83.5552%" y="191.50"></text></g><g><title>core::fmt::write (5 samples, 0.42%)</title><rect x="83.5582%" y="165" width="0.4216%" height="15" fill="rgb(218,68,31)" fg:x="991" fg:w="5"/><text x="83.8082%" y="175.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="83.8954%" y="149" width="0.0843%" height="15" fill="rgb(207,120,37)" fg:x="995" fg:w="1"/><text x="84.1454%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="83.8954%" y="133" width="0.0843%" height="15" fill="rgb(227,98,0)" fg:x="995" fg:w="1"/><text x="84.1454%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4414 (1 samples, 0.08%)</title><rect x="83.8954%" y="117" width="0.0843%" height="15" fill="rgb(207,7,3)" fg:x="995" fg:w="1"/><text x="84.1454%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2138 (3 samples, 0.25%)</title><rect x="84.1484%" y="181" width="0.2530%" height="15" fill="rgb(206,98,19)" fg:x="998" fg:w="3"/><text x="84.3984%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.3170%" y="165" width="0.0843%" height="15" fill="rgb(217,5,26)" fg:x="1000" fg:w="1"/><text x="84.5670%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (1 samples, 0.08%)</title><rect x="84.4857%" y="165" width="0.0843%" height="15" fill="rgb(235,190,38)" fg:x="1002" fg:w="1"/><text x="84.7357%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (15 samples, 1.26%)</title><rect x="83.9798%" y="213" width="1.2648%" height="15" fill="rgb(247,86,24)" fg:x="996" fg:w="15"/><text x="84.2298%" y="223.50"></text></g><g><title>core::fmt::write (15 samples, 1.26%)</title><rect x="83.9798%" y="197" width="1.2648%" height="15" fill="rgb(205,101,16)" fg:x="996" fg:w="15"/><text x="84.2298%" y="207.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (10 samples, 0.84%)</title><rect x="84.4013%" y="181" width="0.8432%" height="15" fill="rgb(246,168,33)" fg:x="1001" fg:w="10"/><text x="84.6513%" y="191.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (8 samples, 0.67%)</title><rect x="84.5700%" y="165" width="0.6745%" height="15" fill="rgb(231,114,1)" fg:x="1003" fg:w="8"/><text x="84.8200%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (2 samples, 0.17%)</title><rect x="85.0759%" y="149" width="0.1686%" height="15" fill="rgb(207,184,53)" fg:x="1009" fg:w="2"/><text x="85.3259%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.25%)</title><rect x="85.2445%" y="213" width="0.2530%" height="15" fill="rgb(224,95,51)" fg:x="1011" fg:w="3"/><text x="85.4945%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.17%)</title><rect x="85.4975%" y="213" width="0.1686%" height="15" fill="rgb(212,188,45)" fg:x="1014" fg:w="2"/><text x="85.7475%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="85.6661%" y="213" width="0.0843%" height="15" fill="rgb(223,154,38)" fg:x="1016" fg:w="1"/><text x="85.9161%" y="223.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (3 samples, 0.25%)</title><rect x="85.7504%" y="213" width="0.2530%" height="15" fill="rgb(251,22,52)" fg:x="1017" fg:w="3"/><text x="86.0004%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.17%)</title><rect x="85.8347%" y="197" width="0.1686%" height="15" fill="rgb(229,209,22)" fg:x="1018" fg:w="2"/><text x="86.0847%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="85.9191%" y="181" width="0.0843%" height="15" fill="rgb(234,138,34)" fg:x="1019" fg:w="1"/><text x="86.1691%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="86.0034%" y="213" width="0.0843%" height="15" fill="rgb(212,95,11)" fg:x="1020" fg:w="1"/><text x="86.2534%" y="223.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (96 samples, 8.09%)</title><rect x="78.2462%" y="229" width="8.0944%" height="15" fill="rgb(240,179,47)" fg:x="928" fg:w="96"/><text x="78.4962%" y="239.50">&lt;rinha_de_b..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (3 samples, 0.25%)</title><rect x="86.0877%" y="213" width="0.2530%" height="15" fill="rgb(240,163,11)" fg:x="1021" fg:w="3"/><text x="86.3377%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (3 samples, 0.25%)</title><rect x="86.0877%" y="197" width="0.2530%" height="15" fill="rgb(236,37,12)" fg:x="1021" fg:w="3"/><text x="86.3377%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.17%)</title><rect x="86.1720%" y="181" width="0.1686%" height="15" fill="rgb(232,164,16)" fg:x="1022" fg:w="2"/><text x="86.4220%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2563%" y="165" width="0.0843%" height="15" fill="rgb(244,205,15)" fg:x="1023" fg:w="1"/><text x="86.5063%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.17%)</title><rect x="86.8465%" y="197" width="0.1686%" height="15" fill="rgb(223,117,47)" fg:x="1030" fg:w="2"/><text x="87.0965%" y="207.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="86.9309%" y="181" width="0.0843%" height="15" fill="rgb(244,107,35)" fg:x="1031" fg:w="1"/><text x="87.1809%" y="191.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.25%)</title><rect x="87.0152%" y="197" width="0.2530%" height="15" fill="rgb(205,140,8)" fg:x="1032" fg:w="3"/><text x="87.2652%" y="207.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.93%)</title><rect x="86.5936%" y="213" width="0.9275%" height="15" fill="rgb(228,84,46)" fg:x="1027" fg:w="11"/><text x="86.8436%" y="223.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (3 samples, 0.25%)</title><rect x="87.2681%" y="197" width="0.2530%" height="15" fill="rgb(254,188,9)" fg:x="1035" fg:w="3"/><text x="87.5181%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (2 samples, 0.17%)</title><rect x="87.5211%" y="213" width="0.1686%" height="15" fill="rgb(206,112,54)" fg:x="1038" fg:w="2"/><text x="87.7711%" y="223.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.17%)</title><rect x="87.6897%" y="213" width="0.1686%" height="15" fill="rgb(216,84,49)" fg:x="1040" fg:w="2"/><text x="87.9397%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.08%)</title><rect x="87.8583%" y="213" width="0.0843%" height="15" fill="rgb(214,194,35)" fg:x="1042" fg:w="1"/><text x="88.1083%" y="223.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (2 samples, 0.17%)</title><rect x="88.4486%" y="197" width="0.1686%" height="15" fill="rgb(249,28,3)" fg:x="1049" fg:w="2"/><text x="88.6986%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (4 samples, 0.34%)</title><rect x="88.7015%" y="181" width="0.3373%" height="15" fill="rgb(222,56,52)" fg:x="1052" fg:w="4"/><text x="88.9515%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (4 samples, 0.34%)</title><rect x="88.7015%" y="165" width="0.3373%" height="15" fill="rgb(245,217,50)" fg:x="1052" fg:w="4"/><text x="88.9515%" y="175.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="88.9545%" y="149" width="0.0843%" height="15" fill="rgb(213,201,24)" fg:x="1055" fg:w="1"/><text x="89.2045%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (7 samples, 0.59%)</title><rect x="88.6172%" y="197" width="0.5902%" height="15" fill="rgb(248,116,28)" fg:x="1051" fg:w="7"/><text x="88.8672%" y="207.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.17%)</title><rect x="89.0388%" y="181" width="0.1686%" height="15" fill="rgb(219,72,43)" fg:x="1056" fg:w="2"/><text x="89.2888%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.2074%" y="197" width="0.0843%" height="15" fill="rgb(209,138,14)" fg:x="1058" fg:w="1"/><text x="89.4574%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="89.2917%" y="197" width="0.0843%" height="15" fill="rgb(222,18,33)" fg:x="1059" fg:w="1"/><text x="89.5417%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (40 samples, 3.37%)</title><rect x="86.3406%" y="229" width="3.3727%" height="15" fill="rgb(213,199,7)" fg:x="1024" fg:w="40"/><text x="86.5906%" y="239.50">&lt;ri..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (21 samples, 1.77%)</title><rect x="87.9427%" y="213" width="1.7707%" height="15" fill="rgb(250,110,10)" fg:x="1043" fg:w="21"/><text x="88.1927%" y="223.50">r..</text></g><g><title>ryu::pretty::format64 (4 samples, 0.34%)</title><rect x="89.3761%" y="197" width="0.3373%" height="15" fill="rgb(248,123,6)" fg:x="1060" fg:w="4"/><text x="89.6261%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (1 samples, 0.08%)</title><rect x="89.7133%" y="229" width="0.0843%" height="15" fill="rgb(206,91,31)" fg:x="1064" fg:w="1"/><text x="89.9633%" y="239.50"></text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (1 samples, 0.08%)</title><rect x="89.7133%" y="213" width="0.0843%" height="15" fill="rgb(211,154,13)" fg:x="1064" fg:w="1"/><text x="89.9633%" y="223.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::routing::in_memory_payment_router::InMemoryPaymentRouter as rinha_de_backend::domain::payment_router::PaymentRouter&gt;::get_processor_for_payment::{{closure}} (3 samples, 0.25%)</title><rect x="89.7976%" y="229" width="0.2530%" height="15" fill="rgb(225,148,7)" fg:x="1065" fg:w="3"/><text x="90.0476%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="90.1349%" y="197" width="0.0843%" height="15" fill="rgb(220,160,43)" fg:x="1069" fg:w="1"/><text x="90.3849%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2138 (1 samples, 0.08%)</title><rect x="90.2192%" y="197" width="0.0843%" height="15" fill="rgb(213,52,39)" fg:x="1070" fg:w="1"/><text x="90.4692%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.2192%" y="181" width="0.0843%" height="15" fill="rgb(243,137,7)" fg:x="1070" fg:w="1"/><text x="90.4692%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.42%)</title><rect x="90.0506%" y="229" width="0.4216%" height="15" fill="rgb(230,79,13)" fg:x="1068" fg:w="5"/><text x="90.3006%" y="239.50"></text></g><g><title>core::fmt::write (5 samples, 0.42%)</title><rect x="90.0506%" y="213" width="0.4216%" height="15" fill="rgb(247,105,23)" fg:x="1068" fg:w="5"/><text x="90.3006%" y="223.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.17%)</title><rect x="90.3035%" y="197" width="0.1686%" height="15" fill="rgb(223,179,41)" fg:x="1071" fg:w="2"/><text x="90.5535%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::clear::{{closure}}&gt; (2 samples, 0.17%)</title><rect x="90.4722%" y="229" width="0.1686%" height="15" fill="rgb(218,9,34)" fg:x="1073" fg:w="2"/><text x="90.7222%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="90.6408%" y="229" width="0.0843%" height="15" fill="rgb(222,106,8)" fg:x="1075" fg:w="1"/><text x="90.8908%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="90.7251%" y="229" width="0.2530%" height="15" fill="rgb(211,220,0)" fg:x="1076" fg:w="3"/><text x="90.9751%" y="239.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.08%)</title><rect x="90.8938%" y="213" width="0.0843%" height="15" fill="rgb(229,52,16)" fg:x="1078" fg:w="1"/><text x="91.1438%" y="223.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.08%)</title><rect x="90.9781%" y="213" width="0.0843%" height="15" fill="rgb(212,155,18)" fg:x="1079" fg:w="1"/><text x="91.2281%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (2 samples, 0.17%)</title><rect x="90.9781%" y="229" width="0.1686%" height="15" fill="rgb(242,21,14)" fg:x="1079" fg:w="2"/><text x="91.2281%" y="239.50"></text></g><g><title>bytes::bytes_mut::shared_v_is_unique (1 samples, 0.08%)</title><rect x="91.0624%" y="213" width="0.0843%" height="15" fill="rgb(222,19,48)" fg:x="1080" fg:w="1"/><text x="91.3124%" y="223.50"></text></g><g><title>bytes::bytes::shared_drop (3 samples, 0.25%)</title><rect x="91.3997%" y="213" width="0.2530%" height="15" fill="rgb(232,45,27)" fg:x="1084" fg:w="3"/><text x="91.6497%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (9 samples, 0.76%)</title><rect x="91.1467%" y="229" width="0.7589%" height="15" fill="rgb(249,103,42)" fg:x="1081" fg:w="9"/><text x="91.3967%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (3 samples, 0.25%)</title><rect x="91.6526%" y="213" width="0.2530%" height="15" fill="rgb(246,81,33)" fg:x="1087" fg:w="3"/><text x="91.9026%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.9899%" y="213" width="0.0843%" height="15" fill="rgb(252,33,42)" fg:x="1091" fg:w="1"/><text x="92.2399%" y="223.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (3 samples, 0.25%)</title><rect x="92.4115%" y="197" width="0.2530%" height="15" fill="rgb(209,212,41)" fg:x="1096" fg:w="3"/><text x="92.6615%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (10 samples, 0.84%)</title><rect x="91.9056%" y="229" width="0.8432%" height="15" fill="rgb(207,154,6)" fg:x="1090" fg:w="10"/><text x="92.1556%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (8 samples, 0.67%)</title><rect x="92.0742%" y="213" width="0.6745%" height="15" fill="rgb(223,64,47)" fg:x="1092" fg:w="8"/><text x="92.3242%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="92.6644%" y="197" width="0.0843%" height="15" fill="rgb(211,161,38)" fg:x="1099" fg:w="1"/><text x="92.9144%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.08%)</title><rect x="92.7487%" y="229" width="0.0843%" height="15" fill="rgb(219,138,40)" fg:x="1100" fg:w="1"/><text x="92.9987%" y="239.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="92.9174%" y="213" width="0.0843%" height="15" fill="rgb(241,228,46)" fg:x="1102" fg:w="1"/><text x="93.1674%" y="223.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (3 samples, 0.25%)</title><rect x="92.8331%" y="229" width="0.2530%" height="15" fill="rgb(223,209,38)" fg:x="1101" fg:w="3"/><text x="93.0831%" y="239.50"></text></g><g><title>url::Url::username (1 samples, 0.08%)</title><rect x="93.0017%" y="213" width="0.0843%" height="15" fill="rgb(236,164,45)" fg:x="1103" fg:w="1"/><text x="93.2517%" y="223.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.34%)</title><rect x="94.4351%" y="213" width="0.3373%" height="15" fill="rgb(231,15,5)" fg:x="1120" fg:w="4"/><text x="94.6851%" y="223.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="94.7723%" y="213" width="0.0843%" height="15" fill="rgb(252,35,15)" fg:x="1124" fg:w="1"/><text x="95.0223%" y="223.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (4 samples, 0.34%)</title><rect x="94.8567%" y="213" width="0.3373%" height="15" fill="rgb(248,181,18)" fg:x="1125" fg:w="4"/><text x="95.1067%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4345 (1 samples, 0.08%)</title><rect x="95.6155%" y="165" width="0.0843%" height="15" fill="rgb(233,39,42)" fg:x="1134" fg:w="1"/><text x="95.8655%" y="175.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (5 samples, 0.42%)</title><rect x="95.3626%" y="197" width="0.4216%" height="15" fill="rgb(238,110,33)" fg:x="1131" fg:w="5"/><text x="95.6126%" y="207.50"></text></g><g><title>core::fmt::write (5 samples, 0.42%)</title><rect x="95.3626%" y="181" width="0.4216%" height="15" fill="rgb(233,195,10)" fg:x="1131" fg:w="5"/><text x="95.6126%" y="191.50"></text></g><g><title>&lt;core::num::dec2flt::ParseFloatError as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="95.6998%" y="165" width="0.0843%" height="15" fill="rgb(254,105,3)" fg:x="1135" fg:w="1"/><text x="95.9498%" y="175.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="96.3744%" y="165" width="0.0843%" height="15" fill="rgb(221,225,9)" fg:x="1143" fg:w="1"/><text x="96.6244%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.08%)</title><rect x="96.3744%" y="149" width="0.0843%" height="15" fill="rgb(224,227,45)" fg:x="1143" fg:w="1"/><text x="96.6244%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.6162 (1 samples, 0.08%)</title><rect x="96.3744%" y="133" width="0.0843%" height="15" fill="rgb(229,198,43)" fg:x="1143" fg:w="1"/><text x="96.6244%" y="143.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (2 samples, 0.17%)</title><rect x="96.4587%" y="149" width="0.1686%" height="15" fill="rgb(206,209,35)" fg:x="1144" fg:w="2"/><text x="96.7087%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6160 (2 samples, 0.17%)</title><rect x="96.4587%" y="133" width="0.1686%" height="15" fill="rgb(245,195,53)" fg:x="1144" fg:w="2"/><text x="96.7087%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="96.5430%" y="117" width="0.0843%" height="15" fill="rgb(240,92,26)" fg:x="1145" fg:w="1"/><text x="96.7930%" y="127.50"></text></g><g><title>url::host::Host::parse (3 samples, 0.25%)</title><rect x="96.4587%" y="165" width="0.2530%" height="15" fill="rgb(207,40,23)" fg:x="1144" fg:w="3"/><text x="96.7087%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="96.6273%" y="149" width="0.0843%" height="15" fill="rgb(223,111,35)" fg:x="1146" fg:w="1"/><text x="96.8773%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path (2 samples, 0.17%)</title><rect x="96.7116%" y="165" width="0.1686%" height="15" fill="rgb(229,147,28)" fg:x="1147" fg:w="2"/><text x="96.9616%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path_start (1 samples, 0.08%)</title><rect x="96.8803%" y="165" width="0.0843%" height="15" fill="rgb(211,29,28)" fg:x="1149" fg:w="1"/><text x="97.1303%" y="175.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (22 samples, 1.85%)</title><rect x="95.1939%" y="213" width="1.8550%" height="15" fill="rgb(228,72,33)" fg:x="1129" fg:w="22"/><text x="95.4439%" y="223.50">&lt;..</text></g><g><title>url::ParseOptions::parse (15 samples, 1.26%)</title><rect x="95.7841%" y="197" width="1.2648%" height="15" fill="rgb(205,214,31)" fg:x="1136" fg:w="15"/><text x="96.0341%" y="207.50"></text></g><g><title>url::parser::Parser::after_double_slash (12 samples, 1.01%)</title><rect x="96.0371%" y="181" width="1.0118%" height="15" fill="rgb(224,111,15)" fg:x="1139" fg:w="12"/><text x="96.2871%" y="191.50"></text></g><g><title>url::parser::Parser::with_query_and_fragment (1 samples, 0.08%)</title><rect x="96.9646%" y="165" width="0.0843%" height="15" fill="rgb(253,21,26)" fg:x="1150" fg:w="1"/><text x="97.2146%" y="175.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (1 samples, 0.08%)</title><rect x="96.9646%" y="149" width="0.0843%" height="15" fill="rgb(245,139,43)" fg:x="1150" fg:w="1"/><text x="97.2146%" y="159.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.08%)</title><rect x="97.0489%" y="213" width="0.0843%" height="15" fill="rgb(252,170,7)" fg:x="1151" fg:w="1"/><text x="97.2989%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.08%)</title><rect x="97.1332%" y="213" width="0.0843%" height="15" fill="rgb(231,118,14)" fg:x="1152" fg:w="1"/><text x="97.3832%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::follow_redirect::FollowRedirect&lt;reqwest::async_impl::client::HyperService,reqwest::redirect::TowerRedirectPolicy&gt;&gt; (1 samples, 0.08%)</title><rect x="97.2175%" y="213" width="0.0843%" height="15" fill="rgb(238,83,0)" fg:x="1153" fg:w="1"/><text x="97.4675%" y="223.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.08%)</title><rect x="97.3019%" y="213" width="0.0843%" height="15" fill="rgb(221,39,39)" fg:x="1154" fg:w="1"/><text x="97.5519%" y="223.50"></text></g><g><title>http::uri::Uri::from_shared (3 samples, 0.25%)</title><rect x="97.3862%" y="213" width="0.2530%" height="15" fill="rgb(222,119,46)" fg:x="1155" fg:w="3"/><text x="97.6362%" y="223.50"></text></g><g><title>bytes::bytes::Bytes::split_to (1 samples, 0.08%)</title><rect x="97.5548%" y="197" width="0.0843%" height="15" fill="rgb(222,165,49)" fg:x="1157" fg:w="1"/><text x="97.8048%" y="207.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.08%)</title><rect x="97.8921%" y="181" width="0.0843%" height="15" fill="rgb(219,113,52)" fg:x="1161" fg:w="1"/><text x="98.1421%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.08%)</title><rect x="97.9764%" y="181" width="0.0843%" height="15" fill="rgb(214,7,15)" fg:x="1162" fg:w="1"/><text x="98.2264%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.08%)</title><rect x="97.9764%" y="165" width="0.0843%" height="15" fill="rgb(235,32,4)" fg:x="1162" fg:w="1"/><text x="98.2264%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (1 samples, 0.08%)</title><rect x="97.9764%" y="149" width="0.0843%" height="15" fill="rgb(238,90,54)" fg:x="1162" fg:w="1"/><text x="98.2264%" y="159.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (62 samples, 5.23%)</title><rect x="93.0860%" y="229" width="5.2277%" height="15" fill="rgb(213,208,19)" fg:x="1104" fg:w="62"/><text x="93.3360%" y="239.50">reqwes..</text></g><g><title>reqwest::proxy::Matcher::intercept (8 samples, 0.67%)</title><rect x="97.6391%" y="213" width="0.6745%" height="15" fill="rgb(233,156,4)" fg:x="1158" fg:w="8"/><text x="97.8891%" y="223.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (6 samples, 0.51%)</title><rect x="97.8078%" y="197" width="0.5059%" height="15" fill="rgb(207,194,5)" fg:x="1160" fg:w="6"/><text x="98.0578%" y="207.50"></text></g><g><title>http::uri::authority::host (3 samples, 0.25%)</title><rect x="98.0607%" y="181" width="0.2530%" height="15" fill="rgb(206,111,30)" fg:x="1163" fg:w="3"/><text x="98.3107%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.2157 (3 samples, 0.25%)</title><rect x="98.0607%" y="165" width="0.2530%" height="15" fill="rgb(243,70,54)" fg:x="1163" fg:w="3"/><text x="98.3107%" y="175.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.17%)</title><rect x="98.3137%" y="229" width="0.1686%" height="15" fill="rgb(242,28,8)" fg:x="1166" fg:w="2"/><text x="98.5637%" y="239.50"></text></g><g><title>time::offset_date_time::OffsetDateTime::now_utc (4 samples, 0.34%)</title><rect x="98.4823%" y="229" width="0.3373%" height="15" fill="rgb(219,106,18)" fg:x="1168" fg:w="4"/><text x="98.7323%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (2 samples, 0.17%)</title><rect x="98.6509%" y="213" width="0.1686%" height="15" fill="rgb(244,222,10)" fg:x="1170" fg:w="2"/><text x="98.9009%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="98.9039%" y="213" width="0.0843%" height="15" fill="rgb(236,179,52)" fg:x="1173" fg:w="1"/><text x="99.1539%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (3 samples, 0.25%)</title><rect x="98.9882%" y="213" width="0.2530%" height="15" fill="rgb(213,23,39)" fg:x="1174" fg:w="3"/><text x="99.2382%" y="223.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.17%)</title><rect x="99.0725%" y="197" width="0.1686%" height="15" fill="rgb(238,48,10)" fg:x="1175" fg:w="2"/><text x="99.3225%" y="207.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (460 samples, 38.79%)</title><rect x="60.7083%" y="245" width="38.7858%" height="15" fill="rgb(251,196,23)" fg:x="720" fg:w="460"/><text x="60.9583%" y="255.50">rinha_de_backend::infrastructure::workers::payment_processor_wo..</text></g><g><title>time::serde::rfc3339::option::serialize (8 samples, 0.67%)</title><rect x="98.8196%" y="229" width="0.6745%" height="15" fill="rgb(250,152,24)" fg:x="1172" fg:w="8"/><text x="99.0696%" y="239.50"></text></g><g><title>time::formatting::format_number_pad_zero (3 samples, 0.25%)</title><rect x="99.2411%" y="213" width="0.2530%" height="15" fill="rgb(209,150,17)" fg:x="1177" fg:w="3"/><text x="99.4911%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.4098%" y="197" width="0.0843%" height="15" fill="rgb(234,202,34)" fg:x="1179" fg:w="1"/><text x="99.6598%" y="207.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="99.4941%" y="229" width="0.0843%" height="15" fill="rgb(253,148,53)" fg:x="1180" fg:w="1"/><text x="99.7441%" y="239.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (1 samples, 0.08%)</title><rect x="99.4941%" y="213" width="0.0843%" height="15" fill="rgb(218,129,16)" fg:x="1180" fg:w="1"/><text x="99.7441%" y="223.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (1 samples, 0.08%)</title><rect x="99.4941%" y="197" width="0.0843%" height="15" fill="rgb(216,85,19)" fg:x="1180" fg:w="1"/><text x="99.7441%" y="207.50"></text></g><g><title>hyper_util::client::legacy::client::origin_form (1 samples, 0.08%)</title><rect x="99.4941%" y="181" width="0.0843%" height="15" fill="rgb(235,228,7)" fg:x="1180" fg:w="1"/><text x="99.7441%" y="191.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::processor_health_monitor_worker::processor_health_monitor_worker::{{closure}} (3 samples, 0.25%)</title><rect x="99.4941%" y="245" width="0.2530%" height="15" fill="rgb(245,175,0)" fg:x="1180" fg:w="3"/><text x="99.7441%" y="255.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (2 samples, 0.17%)</title><rect x="99.5784%" y="229" width="0.1686%" height="15" fill="rgb(208,168,36)" fg:x="1181" fg:w="2"/><text x="99.8284%" y="239.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="99.6627%" y="213" width="0.0843%" height="15" fill="rgb(246,171,24)" fg:x="1182" fg:w="1"/><text x="99.9127%" y="223.50"></text></g><g><title>rinha-de-backen (928 samples, 78.25%)</title><rect x="21.6695%" y="357" width="78.2462%" height="15" fill="rgb(215,142,24)" fg:x="257" fg:w="928"/><text x="21.9195%" y="367.50">rinha-de-backen</text></g><g><title>_start (928 samples, 78.25%)</title><rect x="21.6695%" y="341" width="78.2462%" height="15" fill="rgb(250,187,7)" fg:x="257" fg:w="928"/><text x="21.9195%" y="351.50">_start</text></g><g><title>__libc_start_main (928 samples, 78.25%)</title><rect x="21.6695%" y="325" width="78.2462%" height="15" fill="rgb(228,66,33)" fg:x="257" fg:w="928"/><text x="21.9195%" y="335.50">__libc_start_main</text></g><g><title>main (928 samples, 78.25%)</title><rect x="21.6695%" y="309" width="78.2462%" height="15" fill="rgb(234,215,21)" fg:x="257" fg:w="928"/><text x="21.9195%" y="319.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (928 samples, 78.25%)</title><rect x="21.6695%" y="293" width="78.2462%" height="15" fill="rgb(222,191,20)" fg:x="257" fg:w="928"/><text x="21.9195%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (928 samples, 78.25%)</title><rect x="21.6695%" y="277" width="78.2462%" height="15" fill="rgb(245,79,54)" fg:x="257" fg:w="928"/><text x="21.9195%" y="287.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (866 samples, 73.02%)</title><rect x="26.8971%" y="261" width="73.0185%" height="15" fill="rgb(240,10,37)" fg:x="319" fg:w="866"/><text x="27.1471%" y="271.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2 samples, 0.17%)</title><rect x="99.7470%" y="245" width="0.1686%" height="15" fill="rgb(214,192,32)" fg:x="1183" fg:w="2"/><text x="99.9970%" y="255.50"></text></g><g><title>all (1,186 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(209,36,54)" fg:x="0" fg:w="1186"/><text x="0.2500%" y="383.50"></text></g><g><title>tokio-runtime-w (1 samples, 0.08%)</title><rect x="99.9157%" y="357" width="0.0843%" height="15" fill="rgb(220,10,11)" fg:x="1185" fg:w="1"/><text x="100.1657%" y="367.50"></text></g><g><title>__clone (1 samples, 0.08%)</title><rect x="99.9157%" y="341" width="0.0843%" height="15" fill="rgb(221,106,17)" fg:x="1185" fg:w="1"/><text x="100.1657%" y="351.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.08%)</title><rect x="99.9157%" y="325" width="0.0843%" height="15" fill="rgb(251,142,44)" fg:x="1185" fg:w="1"/><text x="100.1657%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="99.9157%" y="309" width="0.0843%" height="15" fill="rgb(238,13,15)" fg:x="1185" fg:w="1"/><text x="100.1657%" y="319.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.08%)</title><rect x="99.9157%" y="293" width="0.0843%" height="15" fill="rgb(208,107,27)" fg:x="1185" fg:w="1"/><text x="100.1657%" y="303.50"></text></g></svg></svg>