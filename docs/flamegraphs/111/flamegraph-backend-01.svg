<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="1289"><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (4 samples, 0.31%)</title><rect x="0.3879%" y="245" width="0.3103%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="4"/><text x="0.6379%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.16%)</title><rect x="0.5431%" y="229" width="0.1552%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="2"/><text x="0.7931%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.08%)</title><rect x="0.8534%" y="229" width="0.0776%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="1"/><text x="1.1034%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="0.9310%" y="229" width="0.0776%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="1"/><text x="1.1810%" y="239.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 0.16%)</title><rect x="1.0085%" y="229" width="0.1552%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="2"/><text x="1.2585%" y="239.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.08%)</title><rect x="1.6292%" y="181" width="0.0776%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="1"/><text x="1.8792%" y="191.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (11 samples, 0.85%)</title><rect x="1.1637%" y="229" width="0.8534%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="11"/><text x="1.4137%" y="239.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (5 samples, 0.39%)</title><rect x="1.6292%" y="213" width="0.3879%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="5"/><text x="1.8792%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (5 samples, 0.39%)</title><rect x="1.6292%" y="197" width="0.3879%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="5"/><text x="1.8792%" y="207.50"></text></g><g><title>tokio::task::local::Shared::schedule (4 samples, 0.31%)</title><rect x="1.7067%" y="181" width="0.3103%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="4"/><text x="1.9567%" y="191.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.16%)</title><rect x="1.8619%" y="165" width="0.1552%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="2"/><text x="2.1119%" y="175.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.08%)</title><rect x="1.9395%" y="149" width="0.0776%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="1"/><text x="2.1895%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (25 samples, 1.94%)</title><rect x="0.1552%" y="261" width="1.9395%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="25"/><text x="0.4052%" y="271.50">t..</text></g><g><title>tokio::runtime::time::Driver::park_internal (18 samples, 1.40%)</title><rect x="0.6982%" y="245" width="1.3964%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="18"/><text x="0.9482%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.08%)</title><rect x="2.0171%" y="229" width="0.0776%" height="15" fill="rgb(217,207,13)" fg:x="26" fg:w="1"/><text x="2.2671%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (1 samples, 0.08%)</title><rect x="2.0946%" y="261" width="0.0776%" height="15" fill="rgb(231,73,38)" fg:x="27" fg:w="1"/><text x="2.3446%" y="271.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (4 samples, 0.31%)</title><rect x="2.5601%" y="245" width="0.3103%" height="15" fill="rgb(225,20,46)" fg:x="33" fg:w="4"/><text x="2.8101%" y="255.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.16%)</title><rect x="2.7153%" y="229" width="0.1552%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="2"/><text x="2.9653%" y="239.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.39%)</title><rect x="4.0341%" y="181" width="0.3879%" height="15" fill="rgb(221,200,47)" fg:x="52" fg:w="5"/><text x="4.2841%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.08%)</title><rect x="4.3445%" y="165" width="0.0776%" height="15" fill="rgb(226,26,5)" fg:x="56" fg:w="1"/><text x="4.5945%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (6 samples, 0.47%)</title><rect x="4.4220%" y="181" width="0.4655%" height="15" fill="rgb(249,33,26)" fg:x="57" fg:w="6"/><text x="4.6720%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 0.31%)</title><rect x="4.5772%" y="165" width="0.3103%" height="15" fill="rgb(235,183,28)" fg:x="59" fg:w="4"/><text x="4.8272%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.16%)</title><rect x="4.7324%" y="149" width="0.1552%" height="15" fill="rgb(221,5,38)" fg:x="61" fg:w="2"/><text x="4.9824%" y="159.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (3 samples, 0.23%)</title><rect x="6.9822%" y="149" width="0.2327%" height="15" fill="rgb(247,18,42)" fg:x="90" fg:w="3"/><text x="7.2322%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_drop (2 samples, 0.16%)</title><rect x="7.2149%" y="149" width="0.1552%" height="15" fill="rgb(241,131,45)" fg:x="93" fg:w="2"/><text x="7.4649%" y="159.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.08%)</title><rect x="7.3701%" y="149" width="0.0776%" height="15" fill="rgb(249,31,29)" fg:x="95" fg:w="1"/><text x="7.6201%" y="159.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.08%)</title><rect x="7.4476%" y="149" width="0.0776%" height="15" fill="rgb(225,111,53)" fg:x="96" fg:w="1"/><text x="7.6976%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (4 samples, 0.31%)</title><rect x="7.5252%" y="149" width="0.3103%" height="15" fill="rgb(238,160,17)" fg:x="97" fg:w="4"/><text x="7.7752%" y="159.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.08%)</title><rect x="7.7580%" y="133" width="0.0776%" height="15" fill="rgb(214,148,48)" fg:x="100" fg:w="1"/><text x="8.0080%" y="143.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (4 samples, 0.31%)</title><rect x="7.8355%" y="149" width="0.3103%" height="15" fill="rgb(232,36,49)" fg:x="101" fg:w="4"/><text x="8.0855%" y="159.50"></text></g><g><title>http::method::Method::from_bytes (1 samples, 0.08%)</title><rect x="8.1458%" y="149" width="0.0776%" height="15" fill="rgb(209,103,24)" fg:x="105" fg:w="1"/><text x="8.3958%" y="159.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (3 samples, 0.23%)</title><rect x="8.2234%" y="149" width="0.2327%" height="15" fill="rgb(229,88,8)" fg:x="106" fg:w="3"/><text x="8.4734%" y="159.50"></text></g><g><title>httparse::parse_headers_iter_uninit (7 samples, 0.54%)</title><rect x="8.4562%" y="149" width="0.5431%" height="15" fill="rgb(213,181,19)" fg:x="109" fg:w="7"/><text x="8.7062%" y="159.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (1 samples, 0.08%)</title><rect x="8.9216%" y="133" width="0.0776%" height="15" fill="rgb(254,191,54)" fg:x="115" fg:w="1"/><text x="9.1716%" y="143.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (48 samples, 3.72%)</title><rect x="5.4306%" y="165" width="3.7238%" height="15" fill="rgb(241,83,37)" fg:x="70" fg:w="48"/><text x="5.6806%" y="175.50">&lt;act..</text></g><g><title>httparse::simd::avx2::match_uri_vectored (2 samples, 0.16%)</title><rect x="8.9992%" y="149" width="0.1552%" height="15" fill="rgb(233,36,39)" fg:x="116" fg:w="2"/><text x="9.2492%" y="159.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (3 samples, 0.23%)</title><rect x="9.8526%" y="149" width="0.2327%" height="15" fill="rgb(226,3,54)" fg:x="127" fg:w="3"/><text x="10.1026%" y="159.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (2 samples, 0.16%)</title><rect x="10.0853%" y="149" width="0.1552%" height="15" fill="rgb(245,192,40)" fg:x="130" fg:w="2"/><text x="10.3353%" y="159.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (2 samples, 0.16%)</title><rect x="10.2405%" y="149" width="0.1552%" height="15" fill="rgb(238,167,29)" fg:x="132" fg:w="2"/><text x="10.4905%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.08%)</title><rect x="10.3957%" y="149" width="0.0776%" height="15" fill="rgb(232,182,51)" fg:x="134" fg:w="1"/><text x="10.6457%" y="159.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.16%)</title><rect x="10.4732%" y="149" width="0.1552%" height="15" fill="rgb(231,60,39)" fg:x="135" fg:w="2"/><text x="10.7232%" y="159.50"></text></g><g><title>bytes::bytes::static_clone.3455 (1 samples, 0.08%)</title><rect x="10.6284%" y="149" width="0.0776%" height="15" fill="rgb(208,69,12)" fg:x="137" fg:w="1"/><text x="10.8784%" y="159.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (23 samples, 1.78%)</title><rect x="9.1544%" y="165" width="1.7843%" height="15" fill="rgb(235,93,37)" fg:x="118" fg:w="23"/><text x="9.4044%" y="175.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (3 samples, 0.23%)</title><rect x="10.7060%" y="149" width="0.2327%" height="15" fill="rgb(213,116,39)" fg:x="138" fg:w="3"/><text x="10.9560%" y="159.50"></text></g><g><title> 16]&gt; (3 samples, 0.23%)</title><rect x="10.7060%" y="133" width="0.2327%" height="15" fill="rgb(222,207,29)" fg:x="138" fg:w="3"/><text x="10.9560%" y="143.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.08%)</title><rect x="11.8697%" y="133" width="0.0776%" height="15" fill="rgb(206,96,30)" fg:x="153" fg:w="1"/><text x="12.1197%" y="143.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (3 samples, 0.23%)</title><rect x="11.9472%" y="133" width="0.2327%" height="15" fill="rgb(218,138,4)" fg:x="154" fg:w="3"/><text x="12.1972%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="12.1800%" y="133" width="0.0776%" height="15" fill="rgb(250,191,14)" fg:x="157" fg:w="1"/><text x="12.4300%" y="143.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (19 samples, 1.47%)</title><rect x="10.9387%" y="165" width="1.4740%" height="15" fill="rgb(239,60,40)" fg:x="141" fg:w="19"/><text x="11.1887%" y="175.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (18 samples, 1.40%)</title><rect x="11.0163%" y="149" width="1.3964%" height="15" fill="rgb(206,27,48)" fg:x="142" fg:w="18"/><text x="11.2663%" y="159.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (2 samples, 0.16%)</title><rect x="12.2576%" y="133" width="0.1552%" height="15" fill="rgb(225,35,8)" fg:x="158" fg:w="2"/><text x="12.5076%" y="143.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (2 samples, 0.16%)</title><rect x="12.4127%" y="165" width="0.1552%" height="15" fill="rgb(250,213,24)" fg:x="160" fg:w="2"/><text x="12.6627%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (3 samples, 0.23%)</title><rect x="12.5679%" y="165" width="0.2327%" height="15" fill="rgb(247,123,22)" fg:x="162" fg:w="3"/><text x="12.8179%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.16%)</title><rect x="12.6455%" y="149" width="0.1552%" height="15" fill="rgb(231,138,38)" fg:x="163" fg:w="2"/><text x="12.8955%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.7230%" y="133" width="0.0776%" height="15" fill="rgb(231,145,46)" fg:x="164" fg:w="1"/><text x="12.9730%" y="143.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.08%)</title><rect x="12.8006%" y="165" width="0.0776%" height="15" fill="rgb(251,118,11)" fg:x="165" fg:w="1"/><text x="13.0506%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (105 samples, 8.15%)</title><rect x="4.8875%" y="181" width="8.1458%" height="15" fill="rgb(217,147,25)" fg:x="63" fg:w="105"/><text x="5.1375%" y="191.50">actix_http:..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (2 samples, 0.16%)</title><rect x="12.8782%" y="165" width="0.1552%" height="15" fill="rgb(247,81,37)" fg:x="166" fg:w="2"/><text x="13.1282%" y="175.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (1 samples, 0.08%)</title><rect x="13.4213%" y="165" width="0.0776%" height="15" fill="rgb(209,12,38)" fg:x="173" fg:w="1"/><text x="13.6713%" y="175.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.08%)</title><rect x="13.4213%" y="149" width="0.0776%" height="15" fill="rgb(227,1,9)" fg:x="173" fg:w="1"/><text x="13.6713%" y="159.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="13.4988%" y="165" width="0.1552%" height="15" fill="rgb(248,47,43)" fg:x="174" fg:w="2"/><text x="13.7488%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_web::guard::RegisteredMethods&gt; (1 samples, 0.08%)</title><rect x="13.5764%" y="149" width="0.0776%" height="15" fill="rgb(221,10,30)" fg:x="175" fg:w="1"/><text x="13.8264%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.16%)</title><rect x="14.5074%" y="133" width="0.1552%" height="15" fill="rgb(210,229,1)" fg:x="187" fg:w="2"/><text x="14.7574%" y="143.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="14.7401%" y="117" width="0.0776%" height="15" fill="rgb(222,148,37)" fg:x="190" fg:w="1"/><text x="14.9901%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="14.8177%" y="117" width="0.0776%" height="15" fill="rgb(234,67,33)" fg:x="191" fg:w="1"/><text x="15.0677%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.08%)</title><rect x="14.8177%" y="101" width="0.0776%" height="15" fill="rgb(247,98,35)" fg:x="191" fg:w="1"/><text x="15.0677%" y="111.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.47%)</title><rect x="14.6625%" y="133" width="0.4655%" height="15" fill="rgb(247,138,52)" fg:x="189" fg:w="6"/><text x="14.9125%" y="143.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (3 samples, 0.23%)</title><rect x="14.8953%" y="117" width="0.2327%" height="15" fill="rgb(213,79,30)" fg:x="192" fg:w="3"/><text x="15.1453%" y="127.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send (1 samples, 0.08%)</title><rect x="15.1280%" y="133" width="0.0776%" height="15" fill="rgb(246,177,23)" fg:x="195" fg:w="1"/><text x="15.3780%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}} (5 samples, 0.39%)</title><rect x="15.2056%" y="133" width="0.3879%" height="15" fill="rgb(230,62,27)" fg:x="196" fg:w="5"/><text x="15.4556%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="15.5159%" y="117" width="0.0776%" height="15" fill="rgb(216,154,8)" fg:x="200" fg:w="1"/><text x="15.7659%" y="127.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.08%)</title><rect x="15.5159%" y="101" width="0.0776%" height="15" fill="rgb(244,35,45)" fg:x="200" fg:w="1"/><text x="15.7659%" y="111.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="15.5935%" y="133" width="0.1552%" height="15" fill="rgb(251,115,12)" fg:x="201" fg:w="2"/><text x="15.8435%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="15.7486%" y="117" width="0.0776%" height="15" fill="rgb(240,54,50)" fg:x="203" fg:w="1"/><text x="15.9986%" y="127.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="15.7486%" y="133" width="0.3103%" height="15" fill="rgb(233,84,52)" fg:x="203" fg:w="4"/><text x="15.9986%" y="143.50"></text></g><g><title>ryu::pretty::format64 (3 samples, 0.23%)</title><rect x="15.8262%" y="117" width="0.2327%" height="15" fill="rgb(207,117,47)" fg:x="204" fg:w="3"/><text x="16.0762%" y="127.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (3 samples, 0.23%)</title><rect x="16.0590%" y="133" width="0.2327%" height="15" fill="rgb(249,43,39)" fg:x="207" fg:w="3"/><text x="16.3090%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.16%)</title><rect x="16.1365%" y="117" width="0.1552%" height="15" fill="rgb(209,38,44)" fg:x="208" fg:w="2"/><text x="16.3865%" y="127.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::body (1 samples, 0.08%)</title><rect x="16.2917%" y="133" width="0.0776%" height="15" fill="rgb(236,212,23)" fg:x="210" fg:w="1"/><text x="16.5417%" y="143.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (3 samples, 0.23%)</title><rect x="16.3693%" y="133" width="0.2327%" height="15" fill="rgb(242,79,21)" fg:x="211" fg:w="3"/><text x="16.6193%" y="143.50"></text></g><g><title>actix_http::header::map::HeaderMap::insert (1 samples, 0.08%)</title><rect x="16.5244%" y="117" width="0.0776%" height="15" fill="rgb(211,96,35)" fg:x="213" fg:w="1"/><text x="16.7744%" y="127.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="16.7572%" y="117" width="0.3103%" height="15" fill="rgb(253,215,40)" fg:x="216" fg:w="4"/><text x="17.0072%" y="127.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (45 samples, 3.49%)</title><rect x="13.6540%" y="149" width="3.4911%" height="15" fill="rgb(211,81,21)" fg:x="176" fg:w="45"/><text x="13.9040%" y="159.50">act..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (7 samples, 0.54%)</title><rect x="16.6020%" y="133" width="0.5431%" height="15" fill="rgb(208,190,38)" fg:x="214" fg:w="7"/><text x="16.8520%" y="143.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.0675%" y="117" width="0.0776%" height="15" fill="rgb(235,213,38)" fg:x="220" fg:w="1"/><text x="17.3175%" y="127.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (46 samples, 3.57%)</title><rect x="13.6540%" y="165" width="3.5687%" height="15" fill="rgb(237,122,38)" fg:x="176" fg:w="46"/><text x="13.9040%" y="175.50">&lt;act..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::handler::handler_service&lt;&lt;rinha_de_backend::adapters::web::payments_handler::payments as actix_web::service::HttpServiceFactory&gt;::register::payments,(actix_web::types::json::Json&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;,actix_web::data::Data&lt;alloc::boxed::Box&lt;dyn rinha_de_backend::domain::payment_producer::PaymentProducer&gt;&gt;)&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="17.1451%" y="149" width="0.0776%" height="15" fill="rgb(244,218,35)" fg:x="221" fg:w="1"/><text x="17.3951%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (9 samples, 0.70%)</title><rect x="17.2227%" y="165" width="0.6982%" height="15" fill="rgb(240,68,47)" fg:x="222" fg:w="9"/><text x="17.4727%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (9 samples, 0.70%)</title><rect x="17.2227%" y="149" width="0.6982%" height="15" fill="rgb(210,16,53)" fg:x="222" fg:w="9"/><text x="17.4727%" y="159.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (9 samples, 0.70%)</title><rect x="17.2227%" y="133" width="0.6982%" height="15" fill="rgb(235,124,12)" fg:x="222" fg:w="9"/><text x="17.4727%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (64 samples, 4.97%)</title><rect x="13.0334%" y="181" width="4.9651%" height="15" fill="rgb(224,169,11)" fg:x="168" fg:w="64"/><text x="13.2834%" y="191.50">actix_..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (1 samples, 0.08%)</title><rect x="17.9209%" y="165" width="0.0776%" height="15" fill="rgb(250,166,2)" fg:x="231" fg:w="1"/><text x="18.1709%" y="175.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (3 samples, 0.23%)</title><rect x="18.2312%" y="149" width="0.2327%" height="15" fill="rgb(242,216,29)" fg:x="235" fg:w="3"/><text x="18.4812%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (7 samples, 0.54%)</title><rect x="17.9984%" y="181" width="0.5431%" height="15" fill="rgb(230,116,27)" fg:x="232" fg:w="7"/><text x="18.2484%" y="191.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (5 samples, 0.39%)</title><rect x="18.1536%" y="165" width="0.3879%" height="15" fill="rgb(228,99,48)" fg:x="234" fg:w="5"/><text x="18.4036%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="18.4639%" y="149" width="0.0776%" height="15" fill="rgb(253,11,6)" fg:x="238" fg:w="1"/><text x="18.7139%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (1 samples, 0.08%)</title><rect x="18.5415%" y="181" width="0.0776%" height="15" fill="rgb(247,143,39)" fg:x="239" fg:w="1"/><text x="18.7915%" y="191.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (1 samples, 0.08%)</title><rect x="18.6191%" y="181" width="0.0776%" height="15" fill="rgb(236,97,10)" fg:x="240" fg:w="1"/><text x="18.8691%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.08%)</title><rect x="18.6191%" y="165" width="0.0776%" height="15" fill="rgb(233,208,19)" fg:x="240" fg:w="1"/><text x="18.8691%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="19.0070%" y="149" width="0.0776%" height="15" fill="rgb(216,164,2)" fg:x="245" fg:w="1"/><text x="19.2570%" y="159.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (8 samples, 0.62%)</title><rect x="18.8518%" y="165" width="0.6206%" height="15" fill="rgb(220,129,5)" fg:x="243" fg:w="8"/><text x="19.1018%" y="175.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (5 samples, 0.39%)</title><rect x="19.0846%" y="149" width="0.3879%" height="15" fill="rgb(242,17,10)" fg:x="246" fg:w="5"/><text x="19.3346%" y="159.50"></text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (11 samples, 0.85%)</title><rect x="18.6967%" y="181" width="0.8534%" height="15" fill="rgb(242,107,0)" fg:x="241" fg:w="11"/><text x="18.9467%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.08%)</title><rect x="19.4725%" y="165" width="0.0776%" height="15" fill="rgb(251,28,31)" fg:x="251" fg:w="1"/><text x="19.7225%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.08%)</title><rect x="19.4725%" y="149" width="0.0776%" height="15" fill="rgb(233,223,10)" fg:x="251" fg:w="1"/><text x="19.7225%" y="159.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (208 samples, 16.14%)</title><rect x="3.4911%" y="197" width="16.1365%" height="15" fill="rgb(215,21,27)" fg:x="45" fg:w="208"/><text x="3.7411%" y="207.50">&lt;actix_http::h1::dispatch..</text></g><g><title>tokio::time::sleep::Sleep::new_timeout (1 samples, 0.08%)</title><rect x="19.5500%" y="181" width="0.0776%" height="15" fill="rgb(232,23,21)" fg:x="252" fg:w="1"/><text x="19.8000%" y="191.50"></text></g><g><title>&lt;actix_http::service::HttpServiceHandlerResponse&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (3 samples, 0.23%)</title><rect x="19.6276%" y="197" width="0.2327%" height="15" fill="rgb(244,5,23)" fg:x="253" fg:w="3"/><text x="19.8776%" y="207.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (215 samples, 16.68%)</title><rect x="3.4135%" y="213" width="16.6796%" height="15" fill="rgb(226,81,46)" fg:x="44" fg:w="215"/><text x="3.6635%" y="223.50">&lt;actix_server::service::St..</text></g><g><title>&lt;actix_service::and_then::AndThenServiceResponse&lt;A,B,Req&gt; as core::future::future::Future&gt;::poll (3 samples, 0.23%)</title><rect x="19.8604%" y="197" width="0.2327%" height="15" fill="rgb(247,70,30)" fg:x="256" fg:w="3"/><text x="20.1104%" y="207.50"></text></g><g><title>tokio::task::local::LocalSet::tick (223 samples, 17.30%)</title><rect x="2.8704%" y="245" width="17.3002%" height="15" fill="rgb(212,68,19)" fg:x="37" fg:w="223"/><text x="3.1204%" y="255.50">tokio::task::local::LocalSe..</text></g><g><title>tokio::runtime::task::raw::poll (220 samples, 17.07%)</title><rect x="3.1032%" y="229" width="17.0675%" height="15" fill="rgb(240,187,13)" fg:x="40" fg:w="220"/><text x="3.3532%" y="239.50">tokio::runtime::task::raw:..</text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.08%)</title><rect x="20.0931%" y="213" width="0.0776%" height="15" fill="rgb(223,113,26)" fg:x="259" fg:w="1"/><text x="20.3431%" y="223.50"></text></g><g><title>actix-rt|system (261 samples, 20.25%)</title><rect x="0.0000%" y="341" width="20.2483%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="261"/><text x="0.2500%" y="351.50">actix-rt|system</text></g><g><title>__clone (261 samples, 20.25%)</title><rect x="0.0000%" y="325" width="20.2483%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="261"/><text x="0.2500%" y="335.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (261 samples, 20.25%)</title><rect x="0.0000%" y="309" width="20.2483%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="261"/><text x="0.2500%" y="319.50">std::sys::pal::unix::thread::Thr..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (261 samples, 20.25%)</title><rect x="0.0000%" y="293" width="20.2483%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="261"/><text x="0.2500%" y="303.50">core::ops::function::FnOnce::cal..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (261 samples, 20.25%)</title><rect x="0.0000%" y="277" width="20.2483%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="261"/><text x="0.2500%" y="287.50">std::sys::backtrace::__rust_begi..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (233 samples, 18.08%)</title><rect x="2.1722%" y="261" width="18.0760%" height="15" fill="rgb(245,172,44)" fg:x="28" fg:w="233"/><text x="2.4222%" y="271.50">tokio::task::local::LocalSet..</text></g><g><title>tokio::util::wake::clone_arc_raw (1 samples, 0.08%)</title><rect x="20.1707%" y="245" width="0.0776%" height="15" fill="rgb(236,23,11)" fg:x="260" fg:w="1"/><text x="20.4207%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.08%)</title><rect x="21.6447%" y="245" width="0.0776%" height="15" fill="rgb(205,117,38)" fg:x="279" fg:w="1"/><text x="21.8947%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (2 samples, 0.16%)</title><rect x="21.7223%" y="245" width="0.1552%" height="15" fill="rgb(237,72,25)" fg:x="280" fg:w="2"/><text x="21.9723%" y="255.50"></text></g><g><title>tokio::runtime::driver::Driver::park (4 samples, 0.31%)</title><rect x="22.4981%" y="229" width="0.3103%" height="15" fill="rgb(244,70,9)" fg:x="290" fg:w="4"/><text x="22.7481%" y="239.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.16%)</title><rect x="22.8084%" y="229" width="0.1552%" height="15" fill="rgb(217,125,39)" fg:x="294" fg:w="2"/><text x="23.0584%" y="239.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.08%)</title><rect x="22.8860%" y="213" width="0.0776%" height="15" fill="rgb(235,36,10)" fg:x="295" fg:w="1"/><text x="23.1360%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="23.5066%" y="213" width="0.0776%" height="15" fill="rgb(251,123,47)" fg:x="303" fg:w="1"/><text x="23.7566%" y="223.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (3 samples, 0.23%)</title><rect x="23.5842%" y="213" width="0.2327%" height="15" fill="rgb(221,13,13)" fg:x="304" fg:w="3"/><text x="23.8342%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="24.4375%" y="181" width="0.0776%" height="15" fill="rgb(238,131,9)" fg:x="315" fg:w="1"/><text x="24.6875%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (3 samples, 0.23%)</title><rect x="25.1358%" y="165" width="0.2327%" height="15" fill="rgb(211,50,8)" fg:x="324" fg:w="3"/><text x="25.3858%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (22 samples, 1.71%)</title><rect x="23.8169%" y="213" width="1.7067%" height="15" fill="rgb(245,182,24)" fg:x="307" fg:w="22"/><text x="24.0669%" y="223.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (16 samples, 1.24%)</title><rect x="24.2824%" y="197" width="1.2413%" height="15" fill="rgb(242,14,37)" fg:x="313" fg:w="16"/><text x="24.5324%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (13 samples, 1.01%)</title><rect x="24.5151%" y="181" width="1.0085%" height="15" fill="rgb(246,228,12)" fg:x="316" fg:w="13"/><text x="24.7651%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.16%)</title><rect x="25.3685%" y="165" width="0.1552%" height="15" fill="rgb(213,55,15)" fg:x="327" fg:w="2"/><text x="25.6185%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (48 samples, 3.72%)</title><rect x="21.8774%" y="245" width="3.7238%" height="15" fill="rgb(209,9,3)" fg:x="282" fg:w="48"/><text x="22.1274%" y="255.50">toki..</text></g><g><title>tokio::runtime::time::Driver::park_internal (34 samples, 2.64%)</title><rect x="22.9635%" y="229" width="2.6377%" height="15" fill="rgb(230,59,30)" fg:x="296" fg:w="34"/><text x="23.2135%" y="239.50">to..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.08%)</title><rect x="25.5237%" y="213" width="0.0776%" height="15" fill="rgb(209,121,21)" fg:x="329" fg:w="1"/><text x="25.7737%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (3 samples, 0.23%)</title><rect x="25.6012%" y="245" width="0.2327%" height="15" fill="rgb(220,109,13)" fg:x="330" fg:w="3"/><text x="25.8512%" y="255.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="29.1699%" y="213" width="0.0776%" height="15" fill="rgb(232,18,1)" fg:x="376" fg:w="1"/><text x="29.4199%" y="223.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.08%)</title><rect x="29.1699%" y="197" width="0.0776%" height="15" fill="rgb(215,41,42)" fg:x="376" fg:w="1"/><text x="29.4199%" y="207.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.08%)</title><rect x="29.1699%" y="181" width="0.0776%" height="15" fill="rgb(224,123,36)" fg:x="376" fg:w="1"/><text x="29.4199%" y="191.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.08%)</title><rect x="29.1699%" y="165" width="0.0776%" height="15" fill="rgb(240,125,3)" fg:x="376" fg:w="1"/><text x="29.4199%" y="175.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.08%)</title><rect x="29.1699%" y="149" width="0.0776%" height="15" fill="rgb(205,98,50)" fg:x="376" fg:w="1"/><text x="29.4199%" y="159.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="30.9542%" y="197" width="0.1552%" height="15" fill="rgb(205,185,37)" fg:x="399" fg:w="2"/><text x="31.2042%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.08%)</title><rect x="31.1870%" y="181" width="0.0776%" height="15" fill="rgb(238,207,15)" fg:x="402" fg:w="1"/><text x="31.4370%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (4 samples, 0.31%)</title><rect x="31.1094%" y="197" width="0.3103%" height="15" fill="rgb(213,199,42)" fg:x="401" fg:w="4"/><text x="31.3594%" y="207.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (2 samples, 0.16%)</title><rect x="31.2645%" y="181" width="0.1552%" height="15" fill="rgb(235,201,11)" fg:x="403" fg:w="2"/><text x="31.5145%" y="191.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (2 samples, 0.16%)</title><rect x="31.2645%" y="165" width="0.1552%" height="15" fill="rgb(207,46,11)" fg:x="403" fg:w="2"/><text x="31.5145%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.08%)</title><rect x="31.3421%" y="149" width="0.0776%" height="15" fill="rgb(241,35,35)" fg:x="404" fg:w="1"/><text x="31.5921%" y="159.50"></text></g><g><title>bytes::bytes::Bytes::slice (2 samples, 0.16%)</title><rect x="31.4197%" y="197" width="0.1552%" height="15" fill="rgb(243,32,47)" fg:x="405" fg:w="2"/><text x="31.6697%" y="207.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (1 samples, 0.08%)</title><rect x="31.4973%" y="181" width="0.0776%" height="15" fill="rgb(247,202,23)" fg:x="406" fg:w="1"/><text x="31.7473%" y="191.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.08%)</title><rect x="31.5749%" y="197" width="0.0776%" height="15" fill="rgb(219,102,11)" fg:x="407" fg:w="1"/><text x="31.8249%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (4 samples, 0.31%)</title><rect x="31.6524%" y="197" width="0.3103%" height="15" fill="rgb(243,110,44)" fg:x="408" fg:w="4"/><text x="31.9024%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.8852%" y="181" width="0.0776%" height="15" fill="rgb(222,74,54)" fg:x="411" fg:w="1"/><text x="32.1352%" y="191.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (1 samples, 0.08%)</title><rect x="31.9628%" y="197" width="0.0776%" height="15" fill="rgb(216,99,12)" fg:x="412" fg:w="1"/><text x="32.2128%" y="207.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (2 samples, 0.16%)</title><rect x="32.0403%" y="197" width="0.1552%" height="15" fill="rgb(226,22,26)" fg:x="413" fg:w="2"/><text x="32.2903%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::contains_key (2 samples, 0.16%)</title><rect x="32.1955%" y="197" width="0.1552%" height="15" fill="rgb(217,163,10)" fg:x="415" fg:w="2"/><text x="32.4455%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="32.2731%" y="181" width="0.0776%" height="15" fill="rgb(213,25,53)" fg:x="416" fg:w="1"/><text x="32.5231%" y="191.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get2 (2 samples, 0.16%)</title><rect x="32.3507%" y="197" width="0.1552%" height="15" fill="rgb(252,105,26)" fg:x="417" fg:w="2"/><text x="32.6007%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="32.4282%" y="181" width="0.0776%" height="15" fill="rgb(220,39,43)" fg:x="418" fg:w="1"/><text x="32.6782%" y="191.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (2 samples, 0.16%)</title><rect x="32.5058%" y="197" width="0.1552%" height="15" fill="rgb(229,68,48)" fg:x="419" fg:w="2"/><text x="32.7558%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="32.6610%" y="197" width="0.0776%" height="15" fill="rgb(252,8,32)" fg:x="421" fg:w="1"/><text x="32.9110%" y="207.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (4 samples, 0.31%)</title><rect x="32.7386%" y="197" width="0.3103%" height="15" fill="rgb(223,20,43)" fg:x="422" fg:w="4"/><text x="32.9886%" y="207.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (3 samples, 0.23%)</title><rect x="32.8161%" y="181" width="0.2327%" height="15" fill="rgb(229,81,49)" fg:x="423" fg:w="3"/><text x="33.0661%" y="191.50"></text></g><g><title>http::status::StatusCode::canonical_reason (1 samples, 0.08%)</title><rect x="33.0489%" y="197" width="0.0776%" height="15" fill="rgb(236,28,36)" fg:x="426" fg:w="1"/><text x="33.2989%" y="207.50"></text></g><g><title>httparse::parse_headers_iter_uninit (11 samples, 0.85%)</title><rect x="33.1265%" y="197" width="0.8534%" height="15" fill="rgb(249,185,26)" fg:x="427" fg:w="11"/><text x="33.3765%" y="207.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (3 samples, 0.23%)</title><rect x="33.7471%" y="181" width="0.2327%" height="15" fill="rgb(249,174,33)" fg:x="435" fg:w="3"/><text x="33.9971%" y="191.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::poll_canceled (3 samples, 0.23%)</title><rect x="33.9798%" y="197" width="0.2327%" height="15" fill="rgb(233,201,37)" fg:x="438" fg:w="3"/><text x="34.2298%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (1 samples, 0.08%)</title><rect x="34.2901%" y="181" width="0.0776%" height="15" fill="rgb(221,78,26)" fg:x="442" fg:w="1"/><text x="34.5401%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.16%)</title><rect x="34.3677%" y="165" width="0.1552%" height="15" fill="rgb(250,127,30)" fg:x="443" fg:w="2"/><text x="34.6177%" y="175.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (5 samples, 0.39%)</title><rect x="34.2126%" y="197" width="0.3879%" height="15" fill="rgb(230,49,44)" fg:x="441" fg:w="5"/><text x="34.4626%" y="207.50"></text></g><g><title>hyper::headers::is_chunked (3 samples, 0.23%)</title><rect x="34.3677%" y="181" width="0.2327%" height="15" fill="rgb(229,67,23)" fg:x="443" fg:w="3"/><text x="34.6177%" y="191.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.08%)</title><rect x="34.5229%" y="165" width="0.0776%" height="15" fill="rgb(249,83,47)" fg:x="445" fg:w="1"/><text x="34.7729%" y="175.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2 samples, 0.16%)</title><rect x="34.8332%" y="149" width="0.1552%" height="15" fill="rgb(215,43,3)" fg:x="449" fg:w="2"/><text x="35.0832%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.08%)</title><rect x="34.9108%" y="133" width="0.0776%" height="15" fill="rgb(238,154,13)" fg:x="450" fg:w="1"/><text x="35.1608%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.08%)</title><rect x="34.9108%" y="117" width="0.0776%" height="15" fill="rgb(219,56,2)" fg:x="450" fg:w="1"/><text x="35.1608%" y="127.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (4 samples, 0.31%)</title><rect x="34.7556%" y="181" width="0.3103%" height="15" fill="rgb(233,0,4)" fg:x="448" fg:w="4"/><text x="35.0056%" y="191.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4 samples, 0.31%)</title><rect x="34.7556%" y="165" width="0.3103%" height="15" fill="rgb(235,30,7)" fg:x="448" fg:w="4"/><text x="35.0056%" y="175.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.08%)</title><rect x="34.9884%" y="149" width="0.0776%" height="15" fill="rgb(250,79,13)" fg:x="451" fg:w="1"/><text x="35.2384%" y="159.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.08%)</title><rect x="35.0659%" y="181" width="0.0776%" height="15" fill="rgb(211,146,34)" fg:x="452" fg:w="1"/><text x="35.3159%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (4 samples, 0.31%)</title><rect x="36.1521%" y="165" width="0.3103%" height="15" fill="rgb(228,22,38)" fg:x="466" fg:w="4"/><text x="36.4021%" y="175.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.08%)</title><rect x="36.3848%" y="149" width="0.0776%" height="15" fill="rgb(235,168,5)" fg:x="469" fg:w="1"/><text x="36.6348%" y="159.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.08%)</title><rect x="36.4624%" y="165" width="0.0776%" height="15" fill="rgb(221,155,16)" fg:x="470" fg:w="1"/><text x="36.7124%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (26 samples, 2.02%)</title><rect x="34.6005%" y="197" width="2.0171%" height="15" fill="rgb(215,215,53)" fg:x="446" fg:w="26"/><text x="34.8505%" y="207.50">h..</text></g><g><title>hyper::proto::h1::decode::Decoder::decode (19 samples, 1.47%)</title><rect x="35.1435%" y="181" width="1.4740%" height="15" fill="rgb(223,4,10)" fg:x="453" fg:w="19"/><text x="35.3935%" y="191.50"></text></g><g><title>bytes::bytes_mut::shared_v_is_unique (1 samples, 0.08%)</title><rect x="36.5400%" y="165" width="0.0776%" height="15" fill="rgb(234,103,6)" fg:x="471" fg:w="1"/><text x="36.7900%" y="175.50"></text></g><g><title>&lt;http::header::value::HeaderValue as core::convert::From&lt;u64&gt;&gt;::from (1 samples, 0.08%)</title><rect x="37.1606%" y="181" width="0.0776%" height="15" fill="rgb(227,97,0)" fg:x="479" fg:w="1"/><text x="37.4106%" y="191.50"></text></g><g><title>core::fmt::write (3 samples, 0.23%)</title><rect x="37.2382%" y="181" width="0.2327%" height="15" fill="rgb(234,150,53)" fg:x="480" fg:w="3"/><text x="37.4882%" y="191.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="37.3157%" y="165" width="0.1552%" height="15" fill="rgb(228,201,54)" fg:x="481" fg:w="2"/><text x="37.5657%" y="175.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="37.3933%" y="149" width="0.0776%" height="15" fill="rgb(222,22,37)" fg:x="482" fg:w="1"/><text x="37.6433%" y="159.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert2 (1 samples, 0.08%)</title><rect x="37.4709%" y="181" width="0.0776%" height="15" fill="rgb(237,53,32)" fg:x="483" fg:w="1"/><text x="37.7209%" y="191.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="37.4709%" y="165" width="0.0776%" height="15" fill="rgb(233,25,53)" fg:x="483" fg:w="1"/><text x="37.7209%" y="175.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.08%)</title><rect x="37.5485%" y="181" width="0.0776%" height="15" fill="rgb(210,40,34)" fg:x="484" fg:w="1"/><text x="37.7985%" y="191.50"></text></g><g><title>hyper::headers::content_length_parse_all (5 samples, 0.39%)</title><rect x="37.6261%" y="181" width="0.3879%" height="15" fill="rgb(241,220,44)" fg:x="485" fg:w="5"/><text x="37.8761%" y="191.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (4 samples, 0.31%)</title><rect x="37.7036%" y="165" width="0.3103%" height="15" fill="rgb(235,28,35)" fg:x="486" fg:w="4"/><text x="37.9536%" y="175.50"></text></g><g><title>http::header::map::hash_elem_using (2 samples, 0.16%)</title><rect x="37.8588%" y="149" width="0.1552%" height="15" fill="rgb(210,56,17)" fg:x="488" fg:w="2"/><text x="38.1088%" y="159.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (25 samples, 1.94%)</title><rect x="36.6175%" y="197" width="1.9395%" height="15" fill="rgb(224,130,29)" fg:x="472" fg:w="25"/><text x="36.8675%" y="207.50">h..</text></g><g><title>hyper::proto::h1::role::write_headers (7 samples, 0.54%)</title><rect x="38.0140%" y="181" width="0.5431%" height="15" fill="rgb(235,212,8)" fg:x="490" fg:w="7"/><text x="38.2640%" y="191.50"></text></g><g><title>http::header::name::StandardHeader::as_str.3561 (3 samples, 0.23%)</title><rect x="38.3243%" y="165" width="0.2327%" height="15" fill="rgb(223,33,50)" fg:x="494" fg:w="3"/><text x="38.5743%" y="175.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="39.1777%" y="181" width="0.1552%" height="15" fill="rgb(219,149,13)" fg:x="505" fg:w="2"/><text x="39.4277%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.16%)</title><rect x="39.3328%" y="181" width="0.1552%" height="15" fill="rgb(250,156,29)" fg:x="507" fg:w="2"/><text x="39.5828%" y="191.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (13 samples, 1.01%)</title><rect x="38.5570%" y="197" width="1.0085%" height="15" fill="rgb(216,193,19)" fg:x="497" fg:w="13"/><text x="38.8070%" y="207.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.08%)</title><rect x="39.4880%" y="181" width="0.0776%" height="15" fill="rgb(216,135,14)" fg:x="509" fg:w="1"/><text x="39.7380%" y="191.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (13 samples, 1.01%)</title><rect x="39.5656%" y="197" width="1.0085%" height="15" fill="rgb(241,47,5)" fg:x="510" fg:w="13"/><text x="39.8156%" y="207.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (8 samples, 0.62%)</title><rect x="39.9535%" y="181" width="0.6206%" height="15" fill="rgb(233,42,35)" fg:x="515" fg:w="8"/><text x="40.2035%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.39%)</title><rect x="40.1862%" y="165" width="0.3879%" height="15" fill="rgb(231,13,6)" fg:x="518" fg:w="5"/><text x="40.4362%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (5 samples, 0.39%)</title><rect x="40.1862%" y="149" width="0.3879%" height="15" fill="rgb(207,181,40)" fg:x="518" fg:w="5"/><text x="40.4362%" y="159.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (1 samples, 0.08%)</title><rect x="40.5741%" y="197" width="0.0776%" height="15" fill="rgb(254,173,49)" fg:x="523" fg:w="1"/><text x="40.8241%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.16%)</title><rect x="40.6517%" y="197" width="0.1552%" height="15" fill="rgb(221,1,38)" fg:x="524" fg:w="2"/><text x="40.9017%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.08%)</title><rect x="40.7292%" y="181" width="0.0776%" height="15" fill="rgb(206,124,46)" fg:x="525" fg:w="1"/><text x="40.9792%" y="191.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (155 samples, 12.02%)</title><rect x="29.2475%" y="213" width="12.0248%" height="15" fill="rgb(249,21,11)" fg:x="377" fg:w="155"/><text x="29.4975%" y="223.50">&lt;hyper::client::co..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (6 samples, 0.47%)</title><rect x="40.8068%" y="197" width="0.4655%" height="15" fill="rgb(222,201,40)" fg:x="526" fg:w="6"/><text x="41.0568%" y="207.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.23%)</title><rect x="41.0396%" y="181" width="0.2327%" height="15" fill="rgb(235,61,29)" fg:x="529" fg:w="3"/><text x="41.2896%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 0.78%)</title><rect x="42.4360%" y="181" width="0.7758%" height="15" fill="rgb(219,207,3)" fg:x="547" fg:w="10"/><text x="42.6860%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.47%)</title><rect x="42.7463%" y="165" width="0.4655%" height="15" fill="rgb(222,56,46)" fg:x="551" fg:w="6"/><text x="42.9963%" y="175.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.08%)</title><rect x="44.8410%" y="149" width="0.0776%" height="15" fill="rgb(239,76,54)" fg:x="578" fg:w="1"/><text x="45.0910%" y="159.50"></text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (1 samples, 0.08%)</title><rect x="44.9185%" y="149" width="0.0776%" height="15" fill="rgb(231,124,27)" fg:x="579" fg:w="1"/><text x="45.1685%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.08%)</title><rect x="44.9185%" y="133" width="0.0776%" height="15" fill="rgb(249,195,6)" fg:x="579" fg:w="1"/><text x="45.1685%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="46.7804%" y="101" width="0.0776%" height="15" fill="rgb(237,174,47)" fg:x="603" fg:w="1"/><text x="47.0304%" y="111.50"></text></g><g><title>combine::parser::Parser::parse_mode (5 samples, 0.39%)</title><rect x="46.7029%" y="117" width="0.3879%" height="15" fill="rgb(206,201,31)" fg:x="602" fg:w="5"/><text x="46.9529%" y="127.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (3 samples, 0.23%)</title><rect x="46.8580%" y="101" width="0.2327%" height="15" fill="rgb(231,57,52)" fg:x="604" fg:w="3"/><text x="47.1080%" y="111.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (2 samples, 0.16%)</title><rect x="46.9356%" y="85" width="0.1552%" height="15" fill="rgb(248,177,22)" fg:x="605" fg:w="2"/><text x="47.1856%" y="95.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (10 samples, 0.78%)</title><rect x="46.4701%" y="133" width="0.7758%" height="15" fill="rgb(215,211,37)" fg:x="599" fg:w="10"/><text x="46.7201%" y="143.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.16%)</title><rect x="47.0908%" y="117" width="0.1552%" height="15" fill="rgb(241,128,51)" fg:x="607" fg:w="2"/><text x="47.3408%" y="127.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.16%)</title><rect x="47.0908%" y="101" width="0.1552%" height="15" fill="rgb(227,165,31)" fg:x="607" fg:w="2"/><text x="47.3408%" y="111.50"></text></g><g><title>__rustc::__rust_alloc (1 samples, 0.08%)</title><rect x="47.2459%" y="133" width="0.0776%" height="15" fill="rgb(228,167,24)" fg:x="609" fg:w="1"/><text x="47.4959%" y="143.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.23%)</title><rect x="48.7975%" y="53" width="0.2327%" height="15" fill="rgb(228,143,12)" fg:x="629" fg:w="3"/><text x="49.0475%" y="63.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.16%)</title><rect x="48.8751%" y="37" width="0.1552%" height="15" fill="rgb(249,149,8)" fg:x="630" fg:w="2"/><text x="49.1251%" y="47.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (5 samples, 0.39%)</title><rect x="48.7199%" y="69" width="0.3879%" height="15" fill="rgb(243,35,44)" fg:x="628" fg:w="5"/><text x="48.9699%" y="79.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="49.0303%" y="53" width="0.0776%" height="15" fill="rgb(246,89,9)" fg:x="632" fg:w="1"/><text x="49.2803%" y="63.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.08%)</title><rect x="49.0303%" y="37" width="0.0776%" height="15" fill="rgb(233,213,13)" fg:x="632" fg:w="1"/><text x="49.2803%" y="47.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.08%)</title><rect x="49.1078%" y="69" width="0.0776%" height="15" fill="rgb(233,141,41)" fg:x="633" fg:w="1"/><text x="49.3578%" y="79.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (1 samples, 0.08%)</title><rect x="49.1078%" y="53" width="0.0776%" height="15" fill="rgb(239,167,4)" fg:x="633" fg:w="1"/><text x="49.3578%" y="63.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.08%)</title><rect x="49.1854%" y="69" width="0.0776%" height="15" fill="rgb(209,217,16)" fg:x="634" fg:w="1"/><text x="49.4354%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (18 samples, 1.40%)</title><rect x="48.0993%" y="85" width="1.3964%" height="15" fill="rgb(219,88,35)" fg:x="620" fg:w="18"/><text x="48.3493%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (3 samples, 0.23%)</title><rect x="49.2630%" y="69" width="0.2327%" height="15" fill="rgb(220,193,23)" fg:x="635" fg:w="3"/><text x="49.5130%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="49.4957%" y="85" width="0.0776%" height="15" fill="rgb(230,90,52)" fg:x="638" fg:w="1"/><text x="49.7457%" y="95.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (26 samples, 2.02%)</title><rect x="47.7890%" y="101" width="2.0171%" height="15" fill="rgb(252,106,19)" fg:x="616" fg:w="26"/><text x="48.0390%" y="111.50">&lt;..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (3 samples, 0.23%)</title><rect x="49.5733%" y="85" width="0.2327%" height="15" fill="rgb(206,74,20)" fg:x="639" fg:w="3"/><text x="49.8233%" y="95.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (35 samples, 2.72%)</title><rect x="47.3235%" y="133" width="2.7153%" height="15" fill="rgb(230,138,44)" fg:x="610" fg:w="35"/><text x="47.5735%" y="143.50">co..</text></g><g><title>combine::parser::Parser::parse_mode (31 samples, 2.40%)</title><rect x="47.6338%" y="117" width="2.4050%" height="15" fill="rgb(235,182,43)" fg:x="614" fg:w="31"/><text x="47.8838%" y="127.50">co..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="49.8061%" y="101" width="0.2327%" height="15" fill="rgb(242,16,51)" fg:x="642" fg:w="3"/><text x="50.0561%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.8836%" y="85" width="0.1552%" height="15" fill="rgb(248,9,4)" fg:x="643" fg:w="2"/><text x="50.1336%" y="95.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.23%)</title><rect x="50.1164%" y="117" width="0.2327%" height="15" fill="rgb(210,31,22)" fg:x="646" fg:w="3"/><text x="50.3664%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (5 samples, 0.39%)</title><rect x="50.0388%" y="133" width="0.3879%" height="15" fill="rgb(239,54,39)" fg:x="645" fg:w="5"/><text x="50.2888%" y="143.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.08%)</title><rect x="50.3491%" y="117" width="0.0776%" height="15" fill="rgb(230,99,41)" fg:x="649" fg:w="1"/><text x="50.5991%" y="127.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.08%)</title><rect x="50.3491%" y="101" width="0.0776%" height="15" fill="rgb(253,106,12)" fg:x="649" fg:w="1"/><text x="50.5991%" y="111.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (1 samples, 0.08%)</title><rect x="50.3491%" y="85" width="0.0776%" height="15" fill="rgb(213,46,41)" fg:x="649" fg:w="1"/><text x="50.5991%" y="95.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (72 samples, 5.59%)</title><rect x="44.9961%" y="149" width="5.5857%" height="15" fill="rgb(215,133,35)" fg:x="580" fg:w="72"/><text x="45.2461%" y="159.50">combine..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="50.4267%" y="133" width="0.1552%" height="15" fill="rgb(213,28,5)" fg:x="650" fg:w="2"/><text x="50.6767%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (87 samples, 6.75%)</title><rect x="44.0652%" y="165" width="6.7494%" height="15" fill="rgb(215,77,49)" fg:x="568" fg:w="87"/><text x="44.3152%" y="175.50">&lt;combine:..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (3 samples, 0.23%)</title><rect x="50.5818%" y="149" width="0.2327%" height="15" fill="rgb(248,100,22)" fg:x="652" fg:w="3"/><text x="50.8318%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (124 samples, 9.62%)</title><rect x="41.5050%" y="197" width="9.6199%" height="15" fill="rgb(208,67,9)" fg:x="535" fg:w="124"/><text x="41.7550%" y="207.50">&lt;tokio_util::c..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (102 samples, 7.91%)</title><rect x="43.2118%" y="181" width="7.9131%" height="15" fill="rgb(219,133,21)" fg:x="557" fg:w="102"/><text x="43.4618%" y="191.50">redis::pars..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.31%)</title><rect x="50.8146%" y="165" width="0.3103%" height="15" fill="rgb(246,46,29)" fg:x="655" fg:w="4"/><text x="51.0646%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="51.4352%" y="181" width="0.0776%" height="15" fill="rgb(246,185,52)" fg:x="663" fg:w="1"/><text x="51.6852%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (1 samples, 0.08%)</title><rect x="51.5128%" y="181" width="0.0776%" height="15" fill="rgb(252,136,11)" fg:x="664" fg:w="1"/><text x="51.7628%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (4 samples, 0.31%)</title><rect x="51.5904%" y="181" width="0.3103%" height="15" fill="rgb(219,138,53)" fg:x="665" fg:w="4"/><text x="51.8404%" y="191.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (14 samples, 1.09%)</title><rect x="51.1249%" y="197" width="1.0861%" height="15" fill="rgb(211,51,23)" fg:x="659" fg:w="14"/><text x="51.3749%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (4 samples, 0.31%)</title><rect x="51.9007%" y="181" width="0.3103%" height="15" fill="rgb(247,221,28)" fg:x="669" fg:w="4"/><text x="52.1507%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.16%)</title><rect x="52.6765%" y="181" width="0.1552%" height="15" fill="rgb(251,222,45)" fg:x="679" fg:w="2"/><text x="52.9265%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (2 samples, 0.16%)</title><rect x="52.8317%" y="181" width="0.1552%" height="15" fill="rgb(217,162,53)" fg:x="681" fg:w="2"/><text x="53.0817%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="52.9868%" y="181" width="0.0776%" height="15" fill="rgb(229,93,14)" fg:x="683" fg:w="1"/><text x="53.2368%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (3 samples, 0.23%)</title><rect x="53.2196%" y="165" width="0.2327%" height="15" fill="rgb(209,67,49)" fg:x="686" fg:w="3"/><text x="53.4696%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.08%)</title><rect x="53.4523%" y="165" width="0.0776%" height="15" fill="rgb(213,87,29)" fg:x="689" fg:w="1"/><text x="53.7023%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (159 samples, 12.34%)</title><rect x="41.2723%" y="213" width="12.3351%" height="15" fill="rgb(205,151,52)" fg:x="532" fg:w="159"/><text x="41.5223%" y="223.50">&lt;redis::aio::multi..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (18 samples, 1.40%)</title><rect x="52.2110%" y="197" width="1.3964%" height="15" fill="rgb(253,215,39)" fg:x="673" fg:w="18"/><text x="52.4610%" y="207.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (7 samples, 0.54%)</title><rect x="53.0644%" y="181" width="0.5431%" height="15" fill="rgb(221,220,41)" fg:x="684" fg:w="7"/><text x="53.3144%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.08%)</title><rect x="53.5299%" y="165" width="0.0776%" height="15" fill="rgb(218,133,21)" fg:x="690" fg:w="1"/><text x="53.7799%" y="175.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="54.6160%" y="197" width="0.0776%" height="15" fill="rgb(221,193,43)" fg:x="704" fg:w="1"/><text x="54.8660%" y="207.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.08%)</title><rect x="54.6936%" y="197" width="0.0776%" height="15" fill="rgb(240,128,52)" fg:x="705" fg:w="1"/><text x="54.9436%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.31%)</title><rect x="54.7711%" y="197" width="0.3103%" height="15" fill="rgb(253,114,12)" fg:x="706" fg:w="4"/><text x="55.0211%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="54.9263%" y="181" width="0.1552%" height="15" fill="rgb(215,223,47)" fg:x="708" fg:w="2"/><text x="55.1763%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (20 samples, 1.55%)</title><rect x="53.6074%" y="213" width="1.5516%" height="15" fill="rgb(248,225,23)" fg:x="691" fg:w="20"/><text x="53.8574%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.08%)</title><rect x="55.0815%" y="197" width="0.0776%" height="15" fill="rgb(250,108,0)" fg:x="710" fg:w="1"/><text x="55.3315%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="55.1590%" y="213" width="0.0776%" height="15" fill="rgb(228,208,7)" fg:x="711" fg:w="1"/><text x="55.4090%" y="223.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.23%)</title><rect x="55.2366%" y="213" width="0.2327%" height="15" fill="rgb(244,45,10)" fg:x="712" fg:w="3"/><text x="55.4866%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (9 samples, 0.70%)</title><rect x="55.4694%" y="213" width="0.6982%" height="15" fill="rgb(207,125,25)" fg:x="715" fg:w="9"/><text x="55.7194%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (366 samples, 28.39%)</title><rect x="27.8510%" y="229" width="28.3941%" height="15" fill="rgb(210,195,18)" fg:x="359" fg:w="366"/><text x="28.1010%" y="239.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as c..</text></g><g><title>want::Giver::poll_want (1 samples, 0.08%)</title><rect x="56.1676%" y="213" width="0.0776%" height="15" fill="rgb(249,80,12)" fg:x="724" fg:w="1"/><text x="56.4176%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.16%)</title><rect x="57.1761%" y="181" width="0.1552%" height="15" fill="rgb(221,65,9)" fg:x="737" fg:w="2"/><text x="57.4261%" y="191.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.62%)</title><rect x="56.9434%" y="197" width="0.6206%" height="15" fill="rgb(235,49,36)" fg:x="734" fg:w="8"/><text x="57.1934%" y="207.50"></text></g><g><title>ryu::pretty::format64 (3 samples, 0.23%)</title><rect x="57.3313%" y="181" width="0.2327%" height="15" fill="rgb(225,32,20)" fg:x="739" fg:w="3"/><text x="57.5813%" y="191.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.08%)</title><rect x="57.4864%" y="165" width="0.0776%" height="15" fill="rgb(215,141,46)" fg:x="741" fg:w="1"/><text x="57.7364%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.08%)</title><rect x="57.5640%" y="197" width="0.0776%" height="15" fill="rgb(250,160,47)" fg:x="742" fg:w="1"/><text x="57.8140%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="57.8743%" y="181" width="0.2327%" height="15" fill="rgb(216,222,40)" fg:x="746" fg:w="3"/><text x="58.1243%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="57.9519%" y="165" width="0.1552%" height="15" fill="rgb(234,217,39)" fg:x="747" fg:w="2"/><text x="58.2019%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.2622%" y="149" width="0.0776%" height="15" fill="rgb(207,178,40)" fg:x="751" fg:w="1"/><text x="58.5122%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.2622%" y="133" width="0.0776%" height="15" fill="rgb(221,136,13)" fg:x="751" fg:w="1"/><text x="58.5122%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="58.6501%" y="133" width="0.0776%" height="15" fill="rgb(249,199,10)" fg:x="756" fg:w="1"/><text x="58.9001%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.1156%" y="117" width="0.0776%" height="15" fill="rgb(249,222,13)" fg:x="762" fg:w="1"/><text x="59.3656%" y="127.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.08%)</title><rect x="59.1156%" y="101" width="0.0776%" height="15" fill="rgb(244,185,38)" fg:x="762" fg:w="1"/><text x="59.3656%" y="111.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (12 samples, 0.93%)</title><rect x="58.3398%" y="149" width="0.9310%" height="15" fill="rgb(236,202,9)" fg:x="752" fg:w="12"/><text x="58.5898%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (7 samples, 0.54%)</title><rect x="58.7277%" y="133" width="0.5431%" height="15" fill="rgb(250,229,37)" fg:x="757" fg:w="7"/><text x="58.9777%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="59.1932%" y="117" width="0.0776%" height="15" fill="rgb(206,174,23)" fg:x="763" fg:w="1"/><text x="59.4432%" y="127.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.08%)</title><rect x="59.2708%" y="149" width="0.0776%" height="15" fill="rgb(211,33,43)" fg:x="764" fg:w="1"/><text x="59.5208%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (16 samples, 1.24%)</title><rect x="58.2622%" y="165" width="1.2413%" height="15" fill="rgb(245,58,50)" fg:x="751" fg:w="16"/><text x="58.5122%" y="175.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.16%)</title><rect x="59.3483%" y="149" width="0.1552%" height="15" fill="rgb(244,68,36)" fg:x="765" fg:w="2"/><text x="59.5983%" y="159.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (40 samples, 3.10%)</title><rect x="56.4779%" y="213" width="3.1032%" height="15" fill="rgb(232,229,15)" fg:x="728" fg:w="40"/><text x="56.7279%" y="223.50">&lt;ri..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (25 samples, 1.94%)</title><rect x="57.6416%" y="197" width="1.9395%" height="15" fill="rgb(254,30,23)" fg:x="743" fg:w="25"/><text x="57.8916%" y="207.50">r..</text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (19 samples, 1.47%)</title><rect x="58.1071%" y="181" width="1.4740%" height="15" fill="rgb(235,160,14)" fg:x="749" fg:w="19"/><text x="58.3571%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="59.5035%" y="165" width="0.0776%" height="15" fill="rgb(212,155,44)" fg:x="767" fg:w="1"/><text x="59.7535%" y="175.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::mpsc_to_redis_worker::mpsc_to_redis_worker::{{closure}} (46 samples, 3.57%)</title><rect x="56.2452%" y="229" width="3.5687%" height="15" fill="rgb(226,2,50)" fg:x="725" fg:w="46"/><text x="56.4952%" y="239.50">rinh..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.23%)</title><rect x="59.5811%" y="213" width="0.2327%" height="15" fill="rgb(234,177,6)" fg:x="768" fg:w="3"/><text x="59.8311%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.16%)</title><rect x="61.5981%" y="213" width="0.1552%" height="15" fill="rgb(217,24,9)" fg:x="794" fg:w="2"/><text x="61.8481%" y="223.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="62.6067%" y="165" width="0.1552%" height="15" fill="rgb(220,13,46)" fg:x="807" fg:w="2"/><text x="62.8567%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.08%)</title><rect x="62.6843%" y="149" width="0.0776%" height="15" fill="rgb(239,221,27)" fg:x="808" fg:w="1"/><text x="62.9343%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="62.6843%" y="133" width="0.0776%" height="15" fill="rgb(222,198,25)" fg:x="808" fg:w="1"/><text x="62.9343%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="62.6843%" y="117" width="0.0776%" height="15" fill="rgb(211,99,13)" fg:x="808" fg:w="1"/><text x="62.9343%" y="127.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (2 samples, 0.16%)</title><rect x="62.8394%" y="149" width="0.1552%" height="15" fill="rgb(232,111,31)" fg:x="810" fg:w="2"/><text x="63.0894%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6160 (1 samples, 0.08%)</title><rect x="62.9170%" y="133" width="0.0776%" height="15" fill="rgb(245,82,37)" fg:x="811" fg:w="1"/><text x="63.1670%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="62.9170%" y="117" width="0.0776%" height="15" fill="rgb(227,149,46)" fg:x="811" fg:w="1"/><text x="63.1670%" y="127.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (4 samples, 0.31%)</title><rect x="62.9946%" y="149" width="0.3103%" height="15" fill="rgb(218,36,50)" fg:x="812" fg:w="4"/><text x="63.2446%" y="159.50"></text></g><g><title>url::host::Host::parse (10 samples, 0.78%)</title><rect x="62.7618%" y="165" width="0.7758%" height="15" fill="rgb(226,80,48)" fg:x="809" fg:w="10"/><text x="63.0118%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (3 samples, 0.23%)</title><rect x="63.3049%" y="149" width="0.2327%" height="15" fill="rgb(238,224,15)" fg:x="816" fg:w="3"/><text x="63.5549%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path (3 samples, 0.23%)</title><rect x="63.5376%" y="165" width="0.2327%" height="15" fill="rgb(241,136,10)" fg:x="819" fg:w="3"/><text x="63.7876%" y="175.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (28 samples, 2.17%)</title><rect x="61.7533%" y="213" width="2.1722%" height="15" fill="rgb(208,32,45)" fg:x="796" fg:w="28"/><text x="62.0033%" y="223.50">&lt;..</text></g><g><title>url::ParseOptions::parse (27 samples, 2.09%)</title><rect x="61.8309%" y="197" width="2.0946%" height="15" fill="rgb(207,135,9)" fg:x="797" fg:w="27"/><text x="62.0809%" y="207.50">u..</text></g><g><title>url::parser::Parser::after_double_slash (24 samples, 1.86%)</title><rect x="62.0636%" y="181" width="1.8619%" height="15" fill="rgb(206,86,44)" fg:x="800" fg:w="24"/><text x="62.3136%" y="191.50">u..</text></g><g><title>url::parser::Parser::parse_path_start (2 samples, 0.16%)</title><rect x="63.7704%" y="165" width="0.1552%" height="15" fill="rgb(245,177,15)" fg:x="822" fg:w="2"/><text x="64.0204%" y="175.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.08%)</title><rect x="64.5462%" y="197" width="0.0776%" height="15" fill="rgb(206,64,50)" fg:x="832" fg:w="1"/><text x="64.7962%" y="207.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (7 samples, 0.54%)</title><rect x="64.6237%" y="197" width="0.5431%" height="15" fill="rgb(234,36,40)" fg:x="833" fg:w="7"/><text x="64.8737%" y="207.50"></text></g><g><title>core::fmt::write (6 samples, 0.47%)</title><rect x="64.7013%" y="181" width="0.4655%" height="15" fill="rgb(213,64,8)" fg:x="834" fg:w="6"/><text x="64.9513%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4345 (3 samples, 0.23%)</title><rect x="64.9341%" y="165" width="0.2327%" height="15" fill="rgb(210,75,36)" fg:x="837" fg:w="3"/><text x="65.1841%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="64.9341%" y="149" width="0.2327%" height="15" fill="rgb(229,88,21)" fg:x="837" fg:w="3"/><text x="65.1841%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0892%" y="133" width="0.0776%" height="15" fill="rgb(252,204,47)" fg:x="839" fg:w="1"/><text x="65.3392%" y="143.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.08%)</title><rect x="65.5547%" y="181" width="0.0776%" height="15" fill="rgb(208,77,27)" fg:x="845" fg:w="1"/><text x="65.8047%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::send_request::{{closure}}&gt; (2 samples, 0.16%)</title><rect x="65.6323%" y="181" width="0.1552%" height="15" fill="rgb(221,76,26)" fg:x="846" fg:w="2"/><text x="65.8823%" y="191.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (2 samples, 0.16%)</title><rect x="67.5718%" y="165" width="0.1552%" height="15" fill="rgb(225,139,18)" fg:x="871" fg:w="2"/><text x="67.8218%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="67.6493%" y="149" width="0.0776%" height="15" fill="rgb(230,137,11)" fg:x="872" fg:w="1"/><text x="67.8993%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.47%)</title><rect x="68.4251%" y="149" width="0.4655%" height="15" fill="rgb(212,28,1)" fg:x="882" fg:w="6"/><text x="68.6751%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.31%)</title><rect x="68.5803%" y="133" width="0.3103%" height="15" fill="rgb(248,164,17)" fg:x="884" fg:w="4"/><text x="68.8303%" y="143.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (16 samples, 1.24%)</title><rect x="67.7269%" y="165" width="1.2413%" height="15" fill="rgb(222,171,42)" fg:x="873" fg:w="16"/><text x="67.9769%" y="175.50"></text></g><g><title>hyper_util::client::legacy::pool::Pool&lt;T,K&gt;::reuse (1 samples, 0.08%)</title><rect x="68.8906%" y="149" width="0.0776%" height="15" fill="rgb(243,84,45)" fg:x="888" fg:w="1"/><text x="69.1406%" y="159.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (2 samples, 0.16%)</title><rect x="68.9682%" y="165" width="0.1552%" height="15" fill="rgb(252,49,23)" fg:x="889" fg:w="2"/><text x="69.2182%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2138 (1 samples, 0.08%)</title><rect x="69.2785%" y="133" width="0.0776%" height="15" fill="rgb(215,19,7)" fg:x="893" fg:w="1"/><text x="69.5285%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.2785%" y="117" width="0.0776%" height="15" fill="rgb(238,81,41)" fg:x="893" fg:w="1"/><text x="69.5285%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.2785%" y="101" width="0.0776%" height="15" fill="rgb(210,199,37)" fg:x="893" fg:w="1"/><text x="69.5285%" y="111.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.39%)</title><rect x="69.1234%" y="165" width="0.3879%" height="15" fill="rgb(244,192,49)" fg:x="891" fg:w="5"/><text x="69.3734%" y="175.50"></text></g><g><title>core::fmt::write (3 samples, 0.23%)</title><rect x="69.2785%" y="149" width="0.2327%" height="15" fill="rgb(226,211,11)" fg:x="893" fg:w="3"/><text x="69.5285%" y="159.50"></text></g><g><title>&lt;http::uri::port::Port&lt;T&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="69.3561%" y="133" width="0.1552%" height="15" fill="rgb(236,162,54)" fg:x="894" fg:w="2"/><text x="69.6061%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="69.4337%" y="117" width="0.0776%" height="15" fill="rgb(220,229,9)" fg:x="895" fg:w="1"/><text x="69.6837%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="69.5112%" y="165" width="0.0776%" height="15" fill="rgb(250,87,22)" fg:x="896" fg:w="1"/><text x="69.7612%" y="175.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (2 samples, 0.16%)</title><rect x="69.5888%" y="165" width="0.1552%" height="15" fill="rgb(239,43,17)" fg:x="897" fg:w="2"/><text x="69.8388%" y="175.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.08%)</title><rect x="69.7440%" y="165" width="0.0776%" height="15" fill="rgb(231,177,25)" fg:x="899" fg:w="1"/><text x="69.9940%" y="175.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.08%)</title><rect x="69.8216%" y="165" width="0.0776%" height="15" fill="rgb(219,179,1)" fg:x="900" fg:w="1"/><text x="70.0716%" y="175.50"></text></g><g><title>bytes::bytes::shared_drop (3 samples, 0.23%)</title><rect x="69.8991%" y="165" width="0.2327%" height="15" fill="rgb(238,219,53)" fg:x="901" fg:w="3"/><text x="70.1491%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="70.1319%" y="165" width="0.0776%" height="15" fill="rgb(232,167,36)" fg:x="904" fg:w="1"/><text x="70.3819%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.08%)</title><rect x="70.2095%" y="165" width="0.0776%" height="15" fill="rgb(244,19,51)" fg:x="905" fg:w="1"/><text x="70.4595%" y="175.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_entry2 (1 samples, 0.08%)</title><rect x="70.2870%" y="165" width="0.0776%" height="15" fill="rgb(224,6,22)" fg:x="906" fg:w="1"/><text x="70.5370%" y="175.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="70.2870%" y="149" width="0.0776%" height="15" fill="rgb(224,145,5)" fg:x="906" fg:w="1"/><text x="70.5370%" y="159.50"></text></g><g><title>http::uri::authority::Authority::port (2 samples, 0.16%)</title><rect x="70.3646%" y="165" width="0.1552%" height="15" fill="rgb(234,130,49)" fg:x="907" fg:w="2"/><text x="70.6146%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (1 samples, 0.08%)</title><rect x="70.4422%" y="149" width="0.0776%" height="15" fill="rgb(254,6,2)" fg:x="908" fg:w="1"/><text x="70.6922%" y="159.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="70.4422%" y="133" width="0.0776%" height="15" fill="rgb(208,96,46)" fg:x="908" fg:w="1"/><text x="70.6922%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.2157 (3 samples, 0.23%)</title><rect x="70.5198%" y="149" width="0.2327%" height="15" fill="rgb(239,3,39)" fg:x="909" fg:w="3"/><text x="70.7698%" y="159.50"></text></g><g><title>http::uri::authority::host (4 samples, 0.31%)</title><rect x="70.5198%" y="165" width="0.3103%" height="15" fill="rgb(233,210,1)" fg:x="909" fg:w="4"/><text x="70.7698%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.08%)</title><rect x="70.7525%" y="149" width="0.0776%" height="15" fill="rgb(244,137,37)" fg:x="912" fg:w="1"/><text x="71.0025%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (1 samples, 0.08%)</title><rect x="70.7525%" y="133" width="0.0776%" height="15" fill="rgb(240,136,2)" fg:x="912" fg:w="1"/><text x="71.0025%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="70.7525%" y="117" width="0.0776%" height="15" fill="rgb(239,18,37)" fg:x="912" fg:w="1"/><text x="71.0025%" y="127.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (1 samples, 0.08%)</title><rect x="70.8301%" y="165" width="0.0776%" height="15" fill="rgb(218,185,22)" fg:x="913" fg:w="1"/><text x="71.0801%" y="175.50"></text></g><g><title>http::uri::builder::Builder::map (1 samples, 0.08%)</title><rect x="70.8301%" y="149" width="0.0776%" height="15" fill="rgb(225,218,4)" fg:x="913" fg:w="1"/><text x="71.0801%" y="159.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (78 samples, 6.05%)</title><rect x="65.1668%" y="197" width="6.0512%" height="15" fill="rgb(230,182,32)" fg:x="840" fg:w="78"/><text x="65.4168%" y="207.50">&lt;reqwest..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (70 samples, 5.43%)</title><rect x="65.7874%" y="181" width="5.4306%" height="15" fill="rgb(242,56,43)" fg:x="848" fg:w="70"/><text x="66.0374%" y="191.50">hyper_u..</text></g><g><title>hyper_util::client::legacy::client::origin_form (4 samples, 0.31%)</title><rect x="70.9077%" y="165" width="0.3103%" height="15" fill="rgb(233,99,24)" fg:x="914" fg:w="4"/><text x="71.1577%" y="175.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.08%)</title><rect x="71.1404%" y="149" width="0.0776%" height="15" fill="rgb(234,209,42)" fg:x="917" fg:w="1"/><text x="71.3904%" y="159.50"></text></g><g><title>core::fmt::write (3 samples, 0.23%)</title><rect x="72.4593%" y="165" width="0.2327%" height="15" fill="rgb(227,7,12)" fg:x="934" fg:w="3"/><text x="72.7093%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.08%)</title><rect x="72.6144%" y="149" width="0.0776%" height="15" fill="rgb(245,203,43)" fg:x="936" fg:w="1"/><text x="72.8644%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="72.6144%" y="133" width="0.0776%" height="15" fill="rgb(238,205,33)" fg:x="936" fg:w="1"/><text x="72.8644%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="72.6144%" y="117" width="0.0776%" height="15" fill="rgb(231,56,7)" fg:x="936" fg:w="1"/><text x="72.8644%" y="127.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (4 samples, 0.31%)</title><rect x="73.0799%" y="149" width="0.3103%" height="15" fill="rgb(244,186,29)" fg:x="942" fg:w="4"/><text x="73.3299%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6160 (4 samples, 0.31%)</title><rect x="73.0799%" y="133" width="0.3103%" height="15" fill="rgb(234,111,31)" fg:x="942" fg:w="4"/><text x="73.3299%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="73.3126%" y="117" width="0.0776%" height="15" fill="rgb(241,149,10)" fg:x="945" fg:w="1"/><text x="73.5626%" y="127.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (2 samples, 0.16%)</title><rect x="73.3902%" y="149" width="0.1552%" height="15" fill="rgb(249,206,44)" fg:x="946" fg:w="2"/><text x="73.6402%" y="159.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.5454%" y="149" width="0.0776%" height="15" fill="rgb(251,153,30)" fg:x="948" fg:w="1"/><text x="73.7954%" y="159.50"></text></g><g><title>url::host::Host::parse (13 samples, 1.01%)</title><rect x="72.6920%" y="165" width="1.0085%" height="15" fill="rgb(239,152,38)" fg:x="937" fg:w="13"/><text x="72.9420%" y="175.50"></text></g><g><title>url::host::parse_ipv4number (1 samples, 0.08%)</title><rect x="73.6230%" y="149" width="0.0776%" height="15" fill="rgb(249,139,47)" fg:x="949" fg:w="1"/><text x="73.8730%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path (7 samples, 0.54%)</title><rect x="73.7005%" y="165" width="0.5431%" height="15" fill="rgb(244,64,35)" fg:x="950" fg:w="7"/><text x="73.9505%" y="175.50"></text></g><g><title>url::parser::Parser::check_url_code_point (1 samples, 0.08%)</title><rect x="74.1660%" y="149" width="0.0776%" height="15" fill="rgb(216,46,15)" fg:x="956" fg:w="1"/><text x="74.4160%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path_start (2 samples, 0.16%)</title><rect x="74.2436%" y="165" width="0.1552%" height="15" fill="rgb(250,74,19)" fg:x="957" fg:w="2"/><text x="74.4936%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (136 samples, 10.55%)</title><rect x="63.9255%" y="213" width="10.5508%" height="15" fill="rgb(249,42,33)" fg:x="824" fg:w="136"/><text x="64.1755%" y="223.50">&lt;reqwest::async..</text></g><g><title>url::ParseOptions::parse (42 samples, 3.26%)</title><rect x="71.2180%" y="197" width="3.2583%" height="15" fill="rgb(242,149,17)" fg:x="918" fg:w="42"/><text x="71.4680%" y="207.50">url..</text></g><g><title>url::parser::Parser::after_double_slash (39 samples, 3.03%)</title><rect x="71.4507%" y="181" width="3.0256%" height="15" fill="rgb(244,29,21)" fg:x="921" fg:w="39"/><text x="71.7007%" y="191.50">url..</text></g><g><title>url::parser::Parser::with_query_and_fragment (1 samples, 0.08%)</title><rect x="74.3988%" y="165" width="0.0776%" height="15" fill="rgb(220,130,37)" fg:x="959" fg:w="1"/><text x="74.6488%" y="175.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (1 samples, 0.08%)</title><rect x="74.3988%" y="149" width="0.0776%" height="15" fill="rgb(211,67,2)" fg:x="959" fg:w="1"/><text x="74.6488%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.08%)</title><rect x="74.5539%" y="197" width="0.0776%" height="15" fill="rgb(235,68,52)" fg:x="961" fg:w="1"/><text x="74.8039%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::RedisError&gt; (1 samples, 0.08%)</title><rect x="74.6315%" y="197" width="0.0776%" height="15" fill="rgb(246,142,3)" fg:x="962" fg:w="1"/><text x="74.8815%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (8 samples, 0.62%)</title><rect x="75.0970%" y="165" width="0.6206%" height="15" fill="rgb(241,25,7)" fg:x="968" fg:w="8"/><text x="75.3470%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (7 samples, 0.54%)</title><rect x="75.1746%" y="149" width="0.5431%" height="15" fill="rgb(242,119,39)" fg:x="969" fg:w="7"/><text x="75.4246%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="75.6400%" y="133" width="0.0776%" height="15" fill="rgb(241,98,45)" fg:x="975" fg:w="1"/><text x="75.8900%" y="143.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (11 samples, 0.85%)</title><rect x="74.9418%" y="181" width="0.8534%" height="15" fill="rgb(254,28,30)" fg:x="966" fg:w="11"/><text x="75.1918%" y="191.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.08%)</title><rect x="75.7176%" y="165" width="0.0776%" height="15" fill="rgb(241,142,54)" fg:x="976" fg:w="1"/><text x="75.9676%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.2139 (3 samples, 0.23%)</title><rect x="75.9503%" y="133" width="0.2327%" height="15" fill="rgb(222,85,15)" fg:x="979" fg:w="3"/><text x="76.2003%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (6 samples, 0.47%)</title><rect x="75.7952%" y="181" width="0.4655%" height="15" fill="rgb(210,85,47)" fg:x="977" fg:w="6"/><text x="76.0452%" y="191.50"></text></g><g><title>core::fmt::write (6 samples, 0.47%)</title><rect x="75.7952%" y="165" width="0.4655%" height="15" fill="rgb(224,206,25)" fg:x="977" fg:w="6"/><text x="76.0452%" y="175.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (5 samples, 0.39%)</title><rect x="75.8728%" y="149" width="0.3879%" height="15" fill="rgb(243,201,19)" fg:x="978" fg:w="5"/><text x="76.1228%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2138 (1 samples, 0.08%)</title><rect x="76.1831%" y="133" width="0.0776%" height="15" fill="rgb(236,59,4)" fg:x="982" fg:w="1"/><text x="76.4331%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.1831%" y="117" width="0.0776%" height="15" fill="rgb(254,179,45)" fg:x="982" fg:w="1"/><text x="76.4331%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.1831%" y="101" width="0.0776%" height="15" fill="rgb(226,14,10)" fg:x="982" fg:w="1"/><text x="76.4331%" y="111.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (24 samples, 1.86%)</title><rect x="74.4763%" y="213" width="1.8619%" height="15" fill="rgb(244,27,41)" fg:x="960" fg:w="24"/><text x="74.7263%" y="223.50">&lt;..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (21 samples, 1.63%)</title><rect x="74.7091%" y="197" width="1.6292%" height="15" fill="rgb(235,35,32)" fg:x="963" fg:w="21"/><text x="74.9591%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="76.2607%" y="181" width="0.0776%" height="15" fill="rgb(218,68,31)" fg:x="983" fg:w="1"/><text x="76.5107%" y="191.50"></text></g><g><title>&lt;deranged::RangedU8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="77.3468%" y="197" width="0.0776%" height="15" fill="rgb(207,120,37)" fg:x="997" fg:w="1"/><text x="77.5968%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.16%)</title><rect x="78.1226%" y="149" width="0.1552%" height="15" fill="rgb(227,98,0)" fg:x="1007" fg:w="2"/><text x="78.3726%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.08%)</title><rect x="78.2002%" y="133" width="0.0776%" height="15" fill="rgb(207,7,3)" fg:x="1008" fg:w="1"/><text x="78.4502%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (9 samples, 0.70%)</title><rect x="77.6571%" y="181" width="0.6982%" height="15" fill="rgb(206,98,19)" fg:x="1001" fg:w="9"/><text x="77.9071%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (7 samples, 0.54%)</title><rect x="77.8123%" y="165" width="0.5431%" height="15" fill="rgb(217,5,26)" fg:x="1003" fg:w="7"/><text x="78.0623%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="78.2777%" y="149" width="0.0776%" height="15" fill="rgb(235,190,38)" fg:x="1009" fg:w="1"/><text x="78.5277%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.08%)</title><rect x="78.2777%" y="133" width="0.0776%" height="15" fill="rgb(247,86,24)" fg:x="1009" fg:w="1"/><text x="78.5277%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="78.8208%" y="165" width="0.0776%" height="15" fill="rgb(205,101,16)" fg:x="1016" fg:w="1"/><text x="79.0708%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8208%" y="149" width="0.0776%" height="15" fill="rgb(246,168,33)" fg:x="1016" fg:w="1"/><text x="79.0708%" y="159.50"></text></g><g><title>redis::cmd::args_len (5 samples, 0.39%)</title><rect x="78.8984%" y="165" width="0.3879%" height="15" fill="rgb(231,114,1)" fg:x="1017" fg:w="5"/><text x="79.1484%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (33 samples, 2.56%)</title><rect x="77.4244%" y="197" width="2.5601%" height="15" fill="rgb(207,184,53)" fg:x="998" fg:w="33"/><text x="77.6744%" y="207.50">&lt;r..</text></g><g><title>redis::pipeline::encode_pipeline (21 samples, 1.63%)</title><rect x="78.3553%" y="181" width="1.6292%" height="15" fill="rgb(224,95,51)" fg:x="1010" fg:w="21"/><text x="78.6053%" y="191.50"></text></g><g><title>redis::cmd::write_command (9 samples, 0.70%)</title><rect x="79.2863%" y="165" width="0.6982%" height="15" fill="rgb(212,188,45)" fg:x="1022" fg:w="9"/><text x="79.5363%" y="175.50"></text></g><g><title>&lt;time::date::Date as powerfmt::smart_display::SmartDisplay&gt;::metadata (1 samples, 0.08%)</title><rect x="80.2172%" y="149" width="0.0776%" height="15" fill="rgb(223,154,38)" fg:x="1034" fg:w="1"/><text x="80.4672%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="80.5275%" y="133" width="0.0776%" height="15" fill="rgb(251,22,52)" fg:x="1038" fg:w="1"/><text x="80.7775%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4414 (2 samples, 0.16%)</title><rect x="80.6827%" y="101" width="0.1552%" height="15" fill="rgb(229,209,22)" fg:x="1040" fg:w="2"/><text x="80.9327%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.7603%" y="85" width="0.0776%" height="15" fill="rgb(234,138,34)" fg:x="1041" fg:w="1"/><text x="81.0103%" y="95.50"></text></g><g><title>core::fmt::Formatter::pad_integral (4 samples, 0.31%)</title><rect x="80.6051%" y="117" width="0.3103%" height="15" fill="rgb(212,95,11)" fg:x="1039" fg:w="4"/><text x="80.8551%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="80.8379%" y="101" width="0.0776%" height="15" fill="rgb(240,179,47)" fg:x="1042" fg:w="1"/><text x="81.0879%" y="111.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (10 samples, 0.78%)</title><rect x="80.2172%" y="165" width="0.7758%" height="15" fill="rgb(240,163,11)" fg:x="1034" fg:w="10"/><text x="80.4672%" y="175.50"></text></g><g><title>core::fmt::write (9 samples, 0.70%)</title><rect x="80.2948%" y="149" width="0.6982%" height="15" fill="rgb(236,37,12)" fg:x="1035" fg:w="9"/><text x="80.5448%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (5 samples, 0.39%)</title><rect x="80.6051%" y="133" width="0.3879%" height="15" fill="rgb(232,164,16)" fg:x="1039" fg:w="5"/><text x="80.8551%" y="143.50"></text></g><g><title>core::panicking::panic_fmt (1 samples, 0.08%)</title><rect x="80.9154%" y="117" width="0.0776%" height="15" fill="rgb(244,205,15)" fg:x="1043" fg:w="1"/><text x="81.1654%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (2 samples, 0.16%)</title><rect x="81.2258%" y="133" width="0.1552%" height="15" fill="rgb(223,117,47)" fg:x="1047" fg:w="2"/><text x="81.4758%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.3033%" y="117" width="0.0776%" height="15" fill="rgb(244,107,35)" fg:x="1048" fg:w="1"/><text x="81.5533%" y="127.50"></text></g><g><title>&lt;deranged::RangedU8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.23%)</title><rect x="81.3809%" y="133" width="0.2327%" height="15" fill="rgb(205,140,8)" fg:x="1049" fg:w="3"/><text x="81.6309%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.16%)</title><rect x="81.4585%" y="117" width="0.1552%" height="15" fill="rgb(228,84,46)" fg:x="1050" fg:w="2"/><text x="81.7085%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="81.5361%" y="101" width="0.0776%" height="15" fill="rgb(254,188,9)" fg:x="1051" fg:w="1"/><text x="81.7861%" y="111.50"></text></g><g><title>&lt;time::time::Time as core::fmt::Display&gt;::fmt (10 samples, 0.78%)</title><rect x="80.9930%" y="165" width="0.7758%" height="15" fill="rgb(206,112,54)" fg:x="1044" fg:w="10"/><text x="81.2430%" y="175.50"></text></g><g><title>core::fmt::write (10 samples, 0.78%)</title><rect x="80.9930%" y="149" width="0.7758%" height="15" fill="rgb(216,84,49)" fg:x="1044" fg:w="10"/><text x="81.2430%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (2 samples, 0.16%)</title><rect x="81.6137%" y="133" width="0.1552%" height="15" fill="rgb(214,194,35)" fg:x="1052" fg:w="2"/><text x="81.8637%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="81.6912%" y="117" width="0.0776%" height="15" fill="rgb(249,28,3)" fg:x="1053" fg:w="1"/><text x="81.9412%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4414 (2 samples, 0.16%)</title><rect x="82.1567%" y="101" width="0.1552%" height="15" fill="rgb(222,56,52)" fg:x="1059" fg:w="2"/><text x="82.4067%" y="111.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (31 samples, 2.40%)</title><rect x="79.9845%" y="197" width="2.4050%" height="15" fill="rgb(245,217,50)" fg:x="1031" fg:w="31"/><text x="80.2345%" y="207.50">&lt;t..</text></g><g><title>core::fmt::write (31 samples, 2.40%)</title><rect x="79.9845%" y="181" width="2.4050%" height="15" fill="rgb(213,201,24)" fg:x="1031" fg:w="31"/><text x="80.2345%" y="191.50">co..</text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (8 samples, 0.62%)</title><rect x="81.7688%" y="165" width="0.6206%" height="15" fill="rgb(248,116,28)" fg:x="1054" fg:w="8"/><text x="82.0188%" y="175.50"></text></g><g><title>core::fmt::write (8 samples, 0.62%)</title><rect x="81.7688%" y="149" width="0.6206%" height="15" fill="rgb(219,72,43)" fg:x="1054" fg:w="8"/><text x="82.0188%" y="159.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (5 samples, 0.39%)</title><rect x="82.0016%" y="133" width="0.3879%" height="15" fill="rgb(209,138,14)" fg:x="1057" fg:w="5"/><text x="82.2516%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (4 samples, 0.31%)</title><rect x="82.0791%" y="117" width="0.3103%" height="15" fill="rgb(222,18,33)" fg:x="1058" fg:w="4"/><text x="82.3291%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="82.3119%" y="101" width="0.0776%" height="15" fill="rgb(213,199,7)" fg:x="1061" fg:w="1"/><text x="82.5619%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.3119%" y="85" width="0.0776%" height="15" fill="rgb(250,110,10)" fg:x="1061" fg:w="1"/><text x="82.5619%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.3119%" y="69" width="0.0776%" height="15" fill="rgb(248,123,6)" fg:x="1061" fg:w="1"/><text x="82.5619%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2138 (1 samples, 0.08%)</title><rect x="82.5446%" y="165" width="0.0776%" height="15" fill="rgb(206,91,31)" fg:x="1064" fg:w="1"/><text x="82.7946%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.5446%" y="149" width="0.0776%" height="15" fill="rgb(211,154,13)" fg:x="1064" fg:w="1"/><text x="82.7946%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="82.6222%" y="165" width="0.0776%" height="15" fill="rgb(225,148,7)" fg:x="1065" fg:w="1"/><text x="82.8722%" y="175.50"></text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f64&gt;::fmt (1 samples, 0.08%)</title><rect x="82.6998%" y="165" width="0.0776%" height="15" fill="rgb(220,160,43)" fg:x="1066" fg:w="1"/><text x="82.9498%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (1 samples, 0.08%)</title><rect x="82.8549%" y="149" width="0.0776%" height="15" fill="rgb(213,52,39)" fg:x="1068" fg:w="1"/><text x="83.1049%" y="159.50"></text></g><g><title>alloc::fmt::format::format_inner (8 samples, 0.62%)</title><rect x="82.3894%" y="197" width="0.6206%" height="15" fill="rgb(243,137,7)" fg:x="1062" fg:w="8"/><text x="82.6394%" y="207.50"></text></g><g><title>core::fmt::write (8 samples, 0.62%)</title><rect x="82.3894%" y="181" width="0.6206%" height="15" fill="rgb(230,79,13)" fg:x="1062" fg:w="8"/><text x="82.6394%" y="191.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (3 samples, 0.23%)</title><rect x="82.7773%" y="165" width="0.2327%" height="15" fill="rgb(247,105,23)" fg:x="1067" fg:w="3"/><text x="83.0273%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (1 samples, 0.08%)</title><rect x="82.9325%" y="149" width="0.0776%" height="15" fill="rgb(223,179,41)" fg:x="1069" fg:w="1"/><text x="83.1825%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.16%)</title><rect x="83.0101%" y="197" width="0.1552%" height="15" fill="rgb(218,9,34)" fg:x="1070" fg:w="2"/><text x="83.2601%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="83.1652%" y="197" width="0.2327%" height="15" fill="rgb(222,106,8)" fg:x="1072" fg:w="3"/><text x="83.4152%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (2 samples, 0.16%)</title><rect x="83.3980%" y="197" width="0.1552%" height="15" fill="rgb(211,220,0)" fg:x="1075" fg:w="2"/><text x="83.6480%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::pipeline::Pipeline&gt; (1 samples, 0.08%)</title><rect x="83.5531%" y="197" width="0.0776%" height="15" fill="rgb(229,52,16)" fg:x="1077" fg:w="1"/><text x="83.8031%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (2 samples, 0.16%)</title><rect x="83.6307%" y="197" width="0.1552%" height="15" fill="rgb(212,155,18)" fg:x="1078" fg:w="2"/><text x="83.8807%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.08%)</title><rect x="83.7083%" y="181" width="0.0776%" height="15" fill="rgb(242,21,14)" fg:x="1079" fg:w="1"/><text x="83.9583%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.7859%" y="197" width="0.0776%" height="15" fill="rgb(222,19,48)" fg:x="1080" fg:w="1"/><text x="84.0359%" y="207.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for i128&gt;::write (1 samples, 0.08%)</title><rect x="83.8635%" y="197" width="0.0776%" height="15" fill="rgb(232,45,27)" fg:x="1081" fg:w="1"/><text x="84.1135%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="84.2514%" y="181" width="0.0776%" height="15" fill="rgb(249,103,42)" fg:x="1086" fg:w="1"/><text x="84.5014%" y="191.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (6 samples, 0.47%)</title><rect x="83.9410%" y="197" width="0.4655%" height="15" fill="rgb(246,81,33)" fg:x="1082" fg:w="6"/><text x="84.1910%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="84.3289%" y="181" width="0.0776%" height="15" fill="rgb(252,33,42)" fg:x="1087" fg:w="1"/><text x="84.5789%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (2 samples, 0.16%)</title><rect x="84.4065%" y="197" width="0.1552%" height="15" fill="rgb(209,212,41)" fg:x="1088" fg:w="2"/><text x="84.6565%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (111 samples, 8.61%)</title><rect x="76.3382%" y="213" width="8.6113%" height="15" fill="rgb(207,154,6)" fg:x="984" fg:w="111"/><text x="76.5882%" y="223.50">&lt;rinha_de_ba..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (5 samples, 0.39%)</title><rect x="84.5617%" y="197" width="0.3879%" height="15" fill="rgb(223,64,47)" fg:x="1090" fg:w="5"/><text x="84.8117%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4413 (1 samples, 0.08%)</title><rect x="84.8720%" y="181" width="0.0776%" height="15" fill="rgb(211,161,38)" fg:x="1094" fg:w="1"/><text x="85.1220%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.8720%" y="165" width="0.0776%" height="15" fill="rgb(219,138,40)" fg:x="1094" fg:w="1"/><text x="85.1220%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="86.3460%" y="165" width="0.0776%" height="15" fill="rgb(241,228,46)" fg:x="1113" fg:w="1"/><text x="86.5960%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (2 samples, 0.16%)</title><rect x="86.4236%" y="165" width="0.1552%" height="15" fill="rgb(223,209,38)" fg:x="1114" fg:w="2"/><text x="86.6736%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.39%)</title><rect x="86.2684%" y="181" width="0.3879%" height="15" fill="rgb(236,164,45)" fg:x="1112" fg:w="5"/><text x="86.5184%" y="191.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (1 samples, 0.08%)</title><rect x="86.5787%" y="165" width="0.0776%" height="15" fill="rgb(231,15,5)" fg:x="1116" fg:w="1"/><text x="86.8287%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.23%)</title><rect x="86.6563%" y="181" width="0.2327%" height="15" fill="rgb(252,35,15)" fg:x="1117" fg:w="3"/><text x="86.9063%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 1.09%)</title><rect x="85.8805%" y="197" width="1.0861%" height="15" fill="rgb(248,181,18)" fg:x="1107" fg:w="14"/><text x="86.1305%" y="207.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (1 samples, 0.08%)</title><rect x="86.8891%" y="181" width="0.0776%" height="15" fill="rgb(233,39,42)" fg:x="1120" fg:w="1"/><text x="87.1391%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.08%)</title><rect x="86.9666%" y="197" width="0.0776%" height="15" fill="rgb(238,110,33)" fg:x="1121" fg:w="1"/><text x="87.2166%" y="207.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (2 samples, 0.16%)</title><rect x="87.2770%" y="181" width="0.1552%" height="15" fill="rgb(233,195,10)" fg:x="1125" fg:w="2"/><text x="87.5270%" y="191.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_owned_redis_value (2 samples, 0.16%)</title><rect x="87.2770%" y="165" width="0.1552%" height="15" fill="rgb(254,105,3)" fg:x="1125" fg:w="2"/><text x="87.5270%" y="175.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.16%)</title><rect x="87.2770%" y="149" width="0.1552%" height="15" fill="rgb(221,225,9)" fg:x="1125" fg:w="2"/><text x="87.5270%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="87.6649%" y="149" width="0.0776%" height="15" fill="rgb(224,227,45)" fg:x="1130" fg:w="1"/><text x="87.9149%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (13 samples, 1.01%)</title><rect x="87.4321%" y="165" width="1.0085%" height="15" fill="rgb(229,198,43)" fg:x="1127" fg:w="13"/><text x="87.6821%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (9 samples, 0.70%)</title><rect x="87.7424%" y="149" width="0.6982%" height="15" fill="rgb(206,209,35)" fg:x="1131" fg:w="9"/><text x="87.9924%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;::send::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="88.3631%" y="133" width="0.0776%" height="15" fill="rgb(245,195,53)" fg:x="1139" fg:w="1"/><text x="88.6131%" y="143.50"></text></g><g><title>redis::cmd::args_len (2 samples, 0.16%)</title><rect x="88.4407%" y="165" width="0.1552%" height="15" fill="rgb(240,92,26)" fg:x="1140" fg:w="2"/><text x="88.6907%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (16 samples, 1.24%)</title><rect x="87.4321%" y="181" width="1.2413%" height="15" fill="rgb(207,40,23)" fg:x="1127" fg:w="16"/><text x="87.6821%" y="191.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.08%)</title><rect x="88.5958%" y="165" width="0.0776%" height="15" fill="rgb(223,111,35)" fg:x="1142" fg:w="1"/><text x="88.8458%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="88.6734%" y="181" width="0.1552%" height="15" fill="rgb(229,147,28)" fg:x="1143" fg:w="2"/><text x="88.9234%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7510%" y="165" width="0.0776%" height="15" fill="rgb(211,29,28)" fg:x="1144" fg:w="1"/><text x="89.0010%" y="175.50"></text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (25 samples, 1.94%)</title><rect x="87.0442%" y="197" width="1.9395%" height="15" fill="rgb(228,72,33)" fg:x="1122" fg:w="25"/><text x="87.2942%" y="207.50">r..</text></g><g><title>ryu::pretty::format64 (2 samples, 0.16%)</title><rect x="88.8285%" y="181" width="0.1552%" height="15" fill="rgb(205,214,31)" fg:x="1145" fg:w="2"/><text x="89.0785%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (53 samples, 4.11%)</title><rect x="84.9496%" y="213" width="4.1117%" height="15" fill="rgb(224,111,15)" fg:x="1095" fg:w="53"/><text x="85.1996%" y="223.50">&lt;rin..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.08%)</title><rect x="88.9837%" y="197" width="0.0776%" height="15" fill="rgb(253,21,26)" fg:x="1147" fg:w="1"/><text x="89.2337%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.0613%" y="181" width="0.0776%" height="15" fill="rgb(245,139,43)" fg:x="1148" fg:w="1"/><text x="89.3113%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.0613%" y="165" width="0.0776%" height="15" fill="rgb(252,170,7)" fg:x="1148" fg:w="1"/><text x="89.3113%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (2 samples, 0.16%)</title><rect x="89.0613%" y="213" width="0.1552%" height="15" fill="rgb(231,118,14)" fg:x="1148" fg:w="2"/><text x="89.3113%" y="223.50"></text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (2 samples, 0.16%)</title><rect x="89.0613%" y="197" width="0.1552%" height="15" fill="rgb(238,83,0)" fg:x="1148" fg:w="2"/><text x="89.3113%" y="207.50"></text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (1 samples, 0.08%)</title><rect x="89.1389%" y="181" width="0.0776%" height="15" fill="rgb(221,39,39)" fg:x="1149" fg:w="1"/><text x="89.3889%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (1 samples, 0.08%)</title><rect x="89.1389%" y="165" width="0.0776%" height="15" fill="rgb(222,119,46)" fg:x="1149" fg:w="1"/><text x="89.3889%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (1 samples, 0.08%)</title><rect x="89.1389%" y="149" width="0.0776%" height="15" fill="rgb(222,165,49)" fg:x="1149" fg:w="1"/><text x="89.3889%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="89.1389%" y="133" width="0.0776%" height="15" fill="rgb(219,113,52)" fg:x="1149" fg:w="1"/><text x="89.3889%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::routing::in_memory_payment_router::InMemoryPaymentRouter as rinha_de_backend::domain::payment_router::PaymentRouter&gt;::get_processor_for_payment::{{closure}} (4 samples, 0.31%)</title><rect x="89.2164%" y="213" width="0.3103%" height="15" fill="rgb(214,7,15)" fg:x="1150" fg:w="4"/><text x="89.4664%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="89.7595%" y="181" width="0.1552%" height="15" fill="rgb(235,32,4)" fg:x="1157" fg:w="2"/><text x="90.0095%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2138 (1 samples, 0.08%)</title><rect x="89.9147%" y="181" width="0.0776%" height="15" fill="rgb(238,90,54)" fg:x="1159" fg:w="1"/><text x="90.1647%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.9147%" y="165" width="0.0776%" height="15" fill="rgb(213,208,19)" fg:x="1159" fg:w="1"/><text x="90.1647%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.9147%" y="149" width="0.0776%" height="15" fill="rgb(233,156,4)" fg:x="1159" fg:w="1"/><text x="90.1647%" y="159.50"></text></g><g><title>alloc::fmt::format::format_inner (7 samples, 0.54%)</title><rect x="89.5268%" y="213" width="0.5431%" height="15" fill="rgb(207,194,5)" fg:x="1154" fg:w="7"/><text x="89.7768%" y="223.50"></text></g><g><title>core::fmt::write (6 samples, 0.47%)</title><rect x="89.6043%" y="197" width="0.4655%" height="15" fill="rgb(206,111,30)" fg:x="1155" fg:w="6"/><text x="89.8543%" y="207.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="89.9922%" y="181" width="0.0776%" height="15" fill="rgb(243,70,54)" fg:x="1160" fg:w="1"/><text x="90.2422%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (3 samples, 0.23%)</title><rect x="90.0698%" y="213" width="0.2327%" height="15" fill="rgb(242,28,8)" fg:x="1161" fg:w="3"/><text x="90.3198%" y="223.50"></text></g><g><title>bytes::bytes::shared_drop (4 samples, 0.31%)</title><rect x="90.5353%" y="197" width="0.3103%" height="15" fill="rgb(219,106,18)" fg:x="1167" fg:w="4"/><text x="90.7853%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.08%)</title><rect x="90.8456%" y="197" width="0.0776%" height="15" fill="rgb(244,222,10)" fg:x="1171" fg:w="1"/><text x="91.0956%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (9 samples, 0.70%)</title><rect x="90.3026%" y="213" width="0.6982%" height="15" fill="rgb(236,179,52)" fg:x="1164" fg:w="9"/><text x="90.5526%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::HyperService&gt; (1 samples, 0.08%)</title><rect x="90.9232%" y="197" width="0.0776%" height="15" fill="rgb(213,23,39)" fg:x="1172" fg:w="1"/><text x="91.1732%" y="207.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (1 samples, 0.08%)</title><rect x="91.1559%" y="181" width="0.0776%" height="15" fill="rgb(238,48,10)" fg:x="1175" fg:w="1"/><text x="91.4059%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (4 samples, 0.31%)</title><rect x="91.0008%" y="213" width="0.3103%" height="15" fill="rgb(251,196,23)" fg:x="1173" fg:w="4"/><text x="91.2508%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (3 samples, 0.23%)</title><rect x="91.0784%" y="197" width="0.2327%" height="15" fill="rgb(250,152,24)" fg:x="1174" fg:w="3"/><text x="91.3284%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="91.2335%" y="181" width="0.0776%" height="15" fill="rgb(209,150,17)" fg:x="1176" fg:w="1"/><text x="91.4835%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.08%)</title><rect x="91.2335%" y="165" width="0.0776%" height="15" fill="rgb(234,202,34)" fg:x="1176" fg:w="1"/><text x="91.4835%" y="175.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="91.3887%" y="197" width="0.0776%" height="15" fill="rgb(253,148,53)" fg:x="1178" fg:w="1"/><text x="91.6387%" y="207.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (3 samples, 0.23%)</title><rect x="91.3111%" y="213" width="0.2327%" height="15" fill="rgb(218,129,16)" fg:x="1177" fg:w="3"/><text x="91.5611%" y="223.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="91.4663%" y="197" width="0.0776%" height="15" fill="rgb(216,85,19)" fg:x="1179" fg:w="1"/><text x="91.7163%" y="207.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.31%)</title><rect x="92.1645%" y="197" width="0.3103%" height="15" fill="rgb(235,228,7)" fg:x="1188" fg:w="4"/><text x="92.4145%" y="207.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="92.4748%" y="197" width="0.0776%" height="15" fill="rgb(245,175,0)" fg:x="1192" fg:w="1"/><text x="92.7248%" y="207.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (4 samples, 0.31%)</title><rect x="92.5524%" y="197" width="0.3103%" height="15" fill="rgb(208,168,36)" fg:x="1193" fg:w="4"/><text x="92.8024%" y="207.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="93.1730%" y="149" width="0.0776%" height="15" fill="rgb(246,171,24)" fg:x="1201" fg:w="1"/><text x="93.4230%" y="159.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (7 samples, 0.54%)</title><rect x="93.0178%" y="181" width="0.5431%" height="15" fill="rgb(215,142,24)" fg:x="1199" fg:w="7"/><text x="93.2678%" y="191.50"></text></g><g><title>core::fmt::write (7 samples, 0.54%)</title><rect x="93.0178%" y="165" width="0.5431%" height="15" fill="rgb(250,187,7)" fg:x="1199" fg:w="7"/><text x="93.2678%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4345 (4 samples, 0.31%)</title><rect x="93.2506%" y="149" width="0.3103%" height="15" fill="rgb(228,66,33)" fg:x="1202" fg:w="4"/><text x="93.5006%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="93.4057%" y="133" width="0.1552%" height="15" fill="rgb(234,215,21)" fg:x="1204" fg:w="2"/><text x="93.6557%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.4833%" y="117" width="0.0776%" height="15" fill="rgb(222,191,20)" fg:x="1205" fg:w="1"/><text x="93.7333%" y="127.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (2 samples, 0.16%)</title><rect x="94.6470%" y="133" width="0.1552%" height="15" fill="rgb(245,79,54)" fg:x="1220" fg:w="2"/><text x="94.8970%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6160 (2 samples, 0.16%)</title><rect x="94.6470%" y="117" width="0.1552%" height="15" fill="rgb(240,10,37)" fg:x="1220" fg:w="2"/><text x="94.8970%" y="127.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="94.7246%" y="101" width="0.0776%" height="15" fill="rgb(214,192,32)" fg:x="1221" fg:w="1"/><text x="94.9746%" y="111.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (2 samples, 0.16%)</title><rect x="94.8022%" y="133" width="0.1552%" height="15" fill="rgb(209,36,54)" fg:x="1222" fg:w="2"/><text x="95.0522%" y="143.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (2 samples, 0.16%)</title><rect x="94.9573%" y="133" width="0.1552%" height="15" fill="rgb(220,10,11)" fg:x="1224" fg:w="2"/><text x="95.2073%" y="143.50"></text></g><g><title>url::host::Host::parse (8 samples, 0.62%)</title><rect x="94.5694%" y="149" width="0.6206%" height="15" fill="rgb(221,106,17)" fg:x="1219" fg:w="8"/><text x="94.8194%" y="159.50"></text></g><g><title>url::host::parse_ipv4number (1 samples, 0.08%)</title><rect x="95.1125%" y="133" width="0.0776%" height="15" fill="rgb(251,142,44)" fg:x="1226" fg:w="1"/><text x="95.3625%" y="143.50"></text></g><g><title>url::parser::Parser::parse_path (5 samples, 0.39%)</title><rect x="95.1901%" y="149" width="0.3879%" height="15" fill="rgb(238,13,15)" fg:x="1227" fg:w="5"/><text x="95.4401%" y="159.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (36 samples, 2.79%)</title><rect x="92.8627%" y="197" width="2.7929%" height="15" fill="rgb(208,107,27)" fg:x="1197" fg:w="36"/><text x="93.1127%" y="207.50">&lt;r..</text></g><g><title>url::ParseOptions::parse (27 samples, 2.09%)</title><rect x="93.5609%" y="181" width="2.0946%" height="15" fill="rgb(205,136,37)" fg:x="1206" fg:w="27"/><text x="93.8109%" y="191.50">u..</text></g><g><title>url::parser::Parser::after_double_slash (26 samples, 2.02%)</title><rect x="93.6385%" y="165" width="2.0171%" height="15" fill="rgb(250,205,27)" fg:x="1207" fg:w="26"/><text x="93.8885%" y="175.50">u..</text></g><g><title>url::parser::Parser::with_query_and_fragment (1 samples, 0.08%)</title><rect x="95.5780%" y="149" width="0.0776%" height="15" fill="rgb(210,80,43)" fg:x="1232" fg:w="1"/><text x="95.8280%" y="159.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.08%)</title><rect x="95.6555%" y="197" width="0.0776%" height="15" fill="rgb(247,160,36)" fg:x="1233" fg:w="1"/><text x="95.9055%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.08%)</title><rect x="95.7331%" y="197" width="0.0776%" height="15" fill="rgb(234,13,49)" fg:x="1234" fg:w="1"/><text x="95.9831%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (2 samples, 0.16%)</title><rect x="95.8107%" y="197" width="0.1552%" height="15" fill="rgb(234,122,0)" fg:x="1235" fg:w="2"/><text x="96.0607%" y="207.50"></text></g><g><title>bytes::bytes::Bytes::split_to (3 samples, 0.23%)</title><rect x="96.5865%" y="181" width="0.2327%" height="15" fill="rgb(207,146,38)" fg:x="1245" fg:w="3"/><text x="96.8365%" y="191.50"></text></g><g><title>bytes::bytes::promotable_even_clone (2 samples, 0.16%)</title><rect x="96.6641%" y="165" width="0.1552%" height="15" fill="rgb(207,177,25)" fg:x="1246" fg:w="2"/><text x="96.9141%" y="175.50"></text></g><g><title>http::uri::Uri::from_shared (14 samples, 1.09%)</title><rect x="95.9659%" y="197" width="1.0861%" height="15" fill="rgb(211,178,42)" fg:x="1237" fg:w="14"/><text x="96.2159%" y="207.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (3 samples, 0.23%)</title><rect x="96.8192%" y="181" width="0.2327%" height="15" fill="rgb(230,69,54)" fg:x="1248" fg:w="3"/><text x="97.0692%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.08%)</title><rect x="97.3623%" y="165" width="0.0776%" height="15" fill="rgb(214,135,41)" fg:x="1255" fg:w="1"/><text x="97.6123%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (3 samples, 0.23%)</title><rect x="97.4399%" y="165" width="0.2327%" height="15" fill="rgb(237,67,25)" fg:x="1256" fg:w="3"/><text x="97.6899%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (3 samples, 0.23%)</title><rect x="97.4399%" y="149" width="0.2327%" height="15" fill="rgb(222,189,50)" fg:x="1256" fg:w="3"/><text x="97.6899%" y="159.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (1 samples, 0.08%)</title><rect x="97.5950%" y="133" width="0.0776%" height="15" fill="rgb(245,148,34)" fg:x="1258" fg:w="1"/><text x="97.8450%" y="143.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (81 samples, 6.28%)</title><rect x="91.5438%" y="213" width="6.2839%" height="15" fill="rgb(222,29,6)" fg:x="1180" fg:w="81"/><text x="91.7938%" y="223.50">reqwest:..</text></g><g><title>reqwest::proxy::Matcher::intercept (10 samples, 0.78%)</title><rect x="97.0520%" y="197" width="0.7758%" height="15" fill="rgb(221,189,43)" fg:x="1251" fg:w="10"/><text x="97.3020%" y="207.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (9 samples, 0.70%)</title><rect x="97.1296%" y="181" width="0.6982%" height="15" fill="rgb(207,36,27)" fg:x="1252" fg:w="9"/><text x="97.3796%" y="191.50"></text></g><g><title>http::uri::authority::host (2 samples, 0.16%)</title><rect x="97.6726%" y="165" width="0.1552%" height="15" fill="rgb(217,90,24)" fg:x="1259" fg:w="2"/><text x="97.9226%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.08%)</title><rect x="97.7502%" y="149" width="0.0776%" height="15" fill="rgb(224,66,35)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (1 samples, 0.08%)</title><rect x="97.7502%" y="133" width="0.0776%" height="15" fill="rgb(221,13,50)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="97.7502%" y="117" width="0.0776%" height="15" fill="rgb(236,68,49)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="127.50"></text></g><g><title>ryu::pretty::format64 (3 samples, 0.23%)</title><rect x="97.8278%" y="213" width="0.2327%" height="15" fill="rgb(229,146,28)" fg:x="1261" fg:w="3"/><text x="98.0778%" y="223.50"></text></g><g><title>time::offset_date_time::OffsetDateTime::now_utc (5 samples, 0.39%)</title><rect x="98.0605%" y="213" width="0.3879%" height="15" fill="rgb(225,31,38)" fg:x="1264" fg:w="5"/><text x="98.3105%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="98.3708%" y="197" width="0.0776%" height="15" fill="rgb(250,208,3)" fg:x="1268" fg:w="1"/><text x="98.6208%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.23%)</title><rect x="98.6811%" y="197" width="0.2327%" height="15" fill="rgb(246,54,23)" fg:x="1272" fg:w="3"/><text x="98.9311%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.9139%" y="197" width="0.0776%" height="15" fill="rgb(243,76,11)" fg:x="1275" fg:w="1"/><text x="99.1639%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.9139%" y="181" width="0.0776%" height="15" fill="rgb(245,21,50)" fg:x="1275" fg:w="1"/><text x="99.1639%" y="191.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (2 samples, 0.16%)</title><rect x="98.9915%" y="197" width="0.1552%" height="15" fill="rgb(228,9,43)" fg:x="1276" fg:w="2"/><text x="99.2415%" y="207.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.9915%" y="181" width="0.1552%" height="15" fill="rgb(208,100,47)" fg:x="1276" fg:w="2"/><text x="99.2415%" y="191.50"></text></g><g><title>time::serde::rfc3339::option::serialize (12 samples, 0.93%)</title><rect x="98.4484%" y="213" width="0.9310%" height="15" fill="rgb(232,26,8)" fg:x="1269" fg:w="12"/><text x="98.6984%" y="223.50"></text></g><g><title>time::formatting::format_number_pad_zero (3 samples, 0.23%)</title><rect x="99.1466%" y="197" width="0.2327%" height="15" fill="rgb(216,166,38)" fg:x="1278" fg:w="3"/><text x="99.3966%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.3018%" y="181" width="0.0776%" height="15" fill="rgb(251,202,51)" fg:x="1280" fg:w="1"/><text x="99.5518%" y="191.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (514 samples, 39.88%)</title><rect x="59.8138%" y="229" width="39.8759%" height="15" fill="rgb(254,216,34)" fg:x="771" fg:w="514"/><text x="60.0638%" y="239.50">rinha_de_backend::infrastructure::workers::payment_processor_work..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (4 samples, 0.31%)</title><rect x="99.3794%" y="213" width="0.3103%" height="15" fill="rgb(251,32,27)" fg:x="1281" fg:w="4"/><text x="99.6294%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.23%)</title><rect x="99.4569%" y="197" width="0.2327%" height="15" fill="rgb(208,127,28)" fg:x="1282" fg:w="3"/><text x="99.7069%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.6121%" y="181" width="0.0776%" height="15" fill="rgb(224,137,22)" fg:x="1284" fg:w="1"/><text x="99.8621%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.08%)</title><rect x="99.6897%" y="229" width="0.0776%" height="15" fill="rgb(254,70,32)" fg:x="1285" fg:w="1"/><text x="99.9397%" y="239.50"></text></g><g><title>rinha-de-backen (1,026 samples, 79.60%)</title><rect x="20.2483%" y="341" width="79.5966%" height="15" fill="rgb(229,75,37)" fg:x="261" fg:w="1026"/><text x="20.4983%" y="351.50">rinha-de-backen</text></g><g><title>_start (1,026 samples, 79.60%)</title><rect x="20.2483%" y="325" width="79.5966%" height="15" fill="rgb(252,64,23)" fg:x="261" fg:w="1026"/><text x="20.4983%" y="335.50">_start</text></g><g><title>__libc_start_main (1,026 samples, 79.60%)</title><rect x="20.2483%" y="309" width="79.5966%" height="15" fill="rgb(232,162,48)" fg:x="261" fg:w="1026"/><text x="20.4983%" y="319.50">__libc_start_main</text></g><g><title>main (1,026 samples, 79.60%)</title><rect x="20.2483%" y="293" width="79.5966%" height="15" fill="rgb(246,160,12)" fg:x="261" fg:w="1026"/><text x="20.4983%" y="303.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,026 samples, 79.60%)</title><rect x="20.2483%" y="277" width="79.5966%" height="15" fill="rgb(247,166,0)" fg:x="261" fg:w="1026"/><text x="20.4983%" y="287.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (1,026 samples, 79.60%)</title><rect x="20.2483%" y="261" width="79.5966%" height="15" fill="rgb(249,219,21)" fg:x="261" fg:w="1026"/><text x="20.4983%" y="271.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (954 samples, 74.01%)</title><rect x="25.8340%" y="245" width="74.0109%" height="15" fill="rgb(205,209,3)" fg:x="333" fg:w="954"/><text x="26.0840%" y="255.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.08%)</title><rect x="99.7673%" y="229" width="0.0776%" height="15" fill="rgb(243,44,1)" fg:x="1286" fg:w="1"/><text x="100.0173%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::release (1 samples, 0.08%)</title><rect x="99.7673%" y="213" width="0.0776%" height="15" fill="rgb(206,159,16)" fg:x="1286" fg:w="1"/><text x="100.0173%" y="223.50"></text></g><g><title>all (1,289 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(244,77,30)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="367.50"></text></g><g><title>tokio-runtime-w (2 samples, 0.16%)</title><rect x="99.8448%" y="341" width="0.1552%" height="15" fill="rgb(218,69,12)" fg:x="1287" fg:w="2"/><text x="100.0948%" y="351.50"></text></g><g><title>__clone (2 samples, 0.16%)</title><rect x="99.8448%" y="325" width="0.1552%" height="15" fill="rgb(212,87,7)" fg:x="1287" fg:w="2"/><text x="100.0948%" y="335.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2 samples, 0.16%)</title><rect x="99.8448%" y="309" width="0.1552%" height="15" fill="rgb(245,114,25)" fg:x="1287" fg:w="2"/><text x="100.0948%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.16%)</title><rect x="99.8448%" y="293" width="0.1552%" height="15" fill="rgb(210,61,42)" fg:x="1287" fg:w="2"/><text x="100.0948%" y="303.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 0.16%)</title><rect x="99.8448%" y="277" width="0.1552%" height="15" fill="rgb(211,52,33)" fg:x="1287" fg:w="2"/><text x="100.0948%" y="287.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.08%)</title><rect x="99.9224%" y="261" width="0.0776%" height="15" fill="rgb(234,58,33)" fg:x="1288" fg:w="1"/><text x="100.1724%" y="271.50"></text></g></svg></svg>