<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="946"><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.11%)</title><rect x="0.8457%" y="261" width="0.1057%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="1"/><text x="1.0957%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.11%)</title><rect x="0.8457%" y="245" width="0.1057%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="1"/><text x="1.0957%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (15 samples, 1.59%)</title><rect x="0.4228%" y="277" width="1.5856%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="15"/><text x="0.6728%" y="287.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (10 samples, 1.06%)</title><rect x="0.9514%" y="261" width="1.0571%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="10"/><text x="1.2014%" y="271.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (9 samples, 0.95%)</title><rect x="1.0571%" y="245" width="0.9514%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="9"/><text x="1.3071%" y="255.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (6 samples, 0.63%)</title><rect x="1.3742%" y="229" width="0.6342%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="6"/><text x="1.6242%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.42%)</title><rect x="1.5856%" y="213" width="0.4228%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="4"/><text x="1.8356%" y="223.50"></text></g><g><title>tokio::task::local::Shared::schedule (3 samples, 0.32%)</title><rect x="1.6913%" y="197" width="0.3171%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="3"/><text x="1.9413%" y="207.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.21%)</title><rect x="1.7970%" y="181" width="0.2114%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="2"/><text x="2.0470%" y="191.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (2 samples, 0.21%)</title><rect x="1.7970%" y="165" width="0.2114%" height="15" fill="rgb(220,122,19)" fg:x="17" fg:w="2"/><text x="2.0470%" y="175.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (2 samples, 0.21%)</title><rect x="1.7970%" y="149" width="0.2114%" height="15" fill="rgb(250,228,42)" fg:x="17" fg:w="2"/><text x="2.0470%" y="159.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="2.0085%" y="261" width="0.1057%" height="15" fill="rgb(240,193,28)" fg:x="19" fg:w="1"/><text x="2.2585%" y="271.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.42%)</title><rect x="3.8055%" y="197" width="0.4228%" height="15" fill="rgb(216,20,37)" fg:x="36" fg:w="4"/><text x="4.0555%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="4.1226%" y="181" width="0.1057%" height="15" fill="rgb(206,188,39)" fg:x="39" fg:w="1"/><text x="4.3726%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (2 samples, 0.21%)</title><rect x="4.2283%" y="197" width="0.2114%" height="15" fill="rgb(217,207,13)" fg:x="40" fg:w="2"/><text x="4.4783%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.11%)</title><rect x="4.3340%" y="181" width="0.1057%" height="15" fill="rgb(231,73,38)" fg:x="41" fg:w="1"/><text x="4.5840%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="4.3340%" y="165" width="0.1057%" height="15" fill="rgb(225,20,46)" fg:x="41" fg:w="1"/><text x="4.5840%" y="175.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (3 samples, 0.32%)</title><rect x="6.9767%" y="165" width="0.3171%" height="15" fill="rgb(210,31,41)" fg:x="66" fg:w="3"/><text x="7.2267%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="7.1882%" y="149" width="0.1057%" height="15" fill="rgb(221,200,47)" fg:x="68" fg:w="1"/><text x="7.4382%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.11%)</title><rect x="7.2939%" y="165" width="0.1057%" height="15" fill="rgb(226,26,5)" fg:x="69" fg:w="1"/><text x="7.5439%" y="175.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (1 samples, 0.11%)</title><rect x="7.3996%" y="165" width="0.1057%" height="15" fill="rgb(249,33,26)" fg:x="70" fg:w="1"/><text x="7.6496%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.21%)</title><rect x="7.5053%" y="165" width="0.2114%" height="15" fill="rgb(235,183,28)" fg:x="71" fg:w="2"/><text x="7.7553%" y="175.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="7.7167%" y="165" width="0.1057%" height="15" fill="rgb(221,5,38)" fg:x="73" fg:w="1"/><text x="7.9667%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.21%)</title><rect x="7.8224%" y="165" width="0.2114%" height="15" fill="rgb(247,18,42)" fg:x="74" fg:w="2"/><text x="8.0724%" y="175.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.11%)</title><rect x="8.0338%" y="165" width="0.1057%" height="15" fill="rgb(241,131,45)" fg:x="76" fg:w="1"/><text x="8.2838%" y="175.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (28 samples, 2.96%)</title><rect x="5.6025%" y="181" width="2.9598%" height="15" fill="rgb(249,31,29)" fg:x="53" fg:w="28"/><text x="5.8525%" y="191.50">&lt;ac..</text></g><g><title>httparse::parse_headers_iter_uninit (4 samples, 0.42%)</title><rect x="8.1395%" y="165" width="0.4228%" height="15" fill="rgb(225,111,53)" fg:x="77" fg:w="4"/><text x="8.3895%" y="175.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (2 samples, 0.21%)</title><rect x="9.3023%" y="165" width="0.2114%" height="15" fill="rgb(238,160,17)" fg:x="88" fg:w="2"/><text x="9.5523%" y="175.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (6 samples, 0.63%)</title><rect x="9.5137%" y="165" width="0.6342%" height="15" fill="rgb(214,148,48)" fg:x="90" fg:w="6"/><text x="9.7637%" y="175.50"></text></g><g><title>actix_http::extensions::Extensions::insert (1 samples, 0.11%)</title><rect x="10.0423%" y="149" width="0.1057%" height="15" fill="rgb(232,36,49)" fg:x="95" fg:w="1"/><text x="10.2923%" y="159.50"></text></g><g><title>actix_router::path::Path&lt;T&gt;::unprocessed (3 samples, 0.32%)</title><rect x="10.1480%" y="165" width="0.3171%" height="15" fill="rgb(209,103,24)" fg:x="96" fg:w="3"/><text x="10.3980%" y="175.50"></text></g><g><title>actix_router::quoter::Quoter::requote_str_lossy (1 samples, 0.11%)</title><rect x="10.4651%" y="165" width="0.1057%" height="15" fill="rgb(229,88,8)" fg:x="99" fg:w="1"/><text x="10.7151%" y="175.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="10.5708%" y="165" width="0.1057%" height="15" fill="rgb(213,181,19)" fg:x="100" fg:w="1"/><text x="10.8208%" y="175.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.11%)</title><rect x="10.6765%" y="165" width="0.1057%" height="15" fill="rgb(254,191,54)" fg:x="101" fg:w="1"/><text x="10.9265%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (2 samples, 0.21%)</title><rect x="10.7822%" y="165" width="0.2114%" height="15" fill="rgb(241,83,37)" fg:x="102" fg:w="2"/><text x="11.0322%" y="175.50"></text></g><g><title> 16]&gt; (2 samples, 0.21%)</title><rect x="10.7822%" y="149" width="0.2114%" height="15" fill="rgb(233,36,39)" fg:x="102" fg:w="2"/><text x="11.0322%" y="159.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (25 samples, 2.64%)</title><rect x="8.5624%" y="181" width="2.6427%" height="15" fill="rgb(226,3,54)" fg:x="81" fg:w="25"/><text x="8.8124%" y="191.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::message::Message&lt;actix_http::requests::head::RequestHead&gt;&gt; (2 samples, 0.21%)</title><rect x="10.9937%" y="165" width="0.2114%" height="15" fill="rgb(245,192,40)" fg:x="104" fg:w="2"/><text x="11.2437%" y="175.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (3 samples, 0.32%)</title><rect x="13.2135%" y="149" width="0.3171%" height="15" fill="rgb(238,167,29)" fg:x="125" fg:w="3"/><text x="13.4635%" y="159.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (25 samples, 2.64%)</title><rect x="11.2051%" y="181" width="2.6427%" height="15" fill="rgb(232,182,51)" fg:x="106" fg:w="25"/><text x="11.4551%" y="191.50">&lt;a..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (25 samples, 2.64%)</title><rect x="11.2051%" y="165" width="2.6427%" height="15" fill="rgb(231,60,39)" fg:x="106" fg:w="25"/><text x="11.4551%" y="175.50">ac..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.32%)</title><rect x="13.5307%" y="149" width="0.3171%" height="15" fill="rgb(208,69,12)" fg:x="128" fg:w="3"/><text x="13.7807%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.11%)</title><rect x="13.8478%" y="181" width="0.1057%" height="15" fill="rgb(235,93,37)" fg:x="131" fg:w="1"/><text x="14.0978%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (1 samples, 0.11%)</title><rect x="13.9535%" y="181" width="0.1057%" height="15" fill="rgb(213,116,39)" fg:x="132" fg:w="1"/><text x="14.2035%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (92 samples, 9.73%)</title><rect x="4.4397%" y="197" width="9.7252%" height="15" fill="rgb(222,207,29)" fg:x="42" fg:w="92"/><text x="4.6897%" y="207.50">actix_http::h1..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.11%)</title><rect x="14.0592%" y="181" width="0.1057%" height="15" fill="rgb(206,96,30)" fg:x="133" fg:w="1"/><text x="14.3092%" y="191.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (2 samples, 0.21%)</title><rect x="14.3763%" y="181" width="0.2114%" height="15" fill="rgb(218,138,4)" fg:x="136" fg:w="2"/><text x="14.6263%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.11%)</title><rect x="14.4820%" y="165" width="0.1057%" height="15" fill="rgb(250,191,14)" fg:x="137" fg:w="1"/><text x="14.7320%" y="175.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (2 samples, 0.21%)</title><rect x="14.5877%" y="181" width="0.2114%" height="15" fill="rgb(239,60,40)" fg:x="138" fg:w="2"/><text x="14.8377%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_web::guard::RegisteredMethods&gt; (1 samples, 0.11%)</title><rect x="14.6934%" y="165" width="0.1057%" height="15" fill="rgb(206,27,48)" fg:x="139" fg:w="1"/><text x="14.9434%" y="175.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.11%)</title><rect x="16.4905%" y="133" width="0.1057%" height="15" fill="rgb(225,35,8)" fg:x="156" fg:w="1"/><text x="16.7405%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (3 samples, 0.32%)</title><rect x="16.5962%" y="133" width="0.3171%" height="15" fill="rgb(250,213,24)" fg:x="157" fg:w="3"/><text x="16.8462%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (3 samples, 0.32%)</title><rect x="16.5962%" y="117" width="0.3171%" height="15" fill="rgb(247,123,22)" fg:x="157" fg:w="3"/><text x="16.8462%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.74%)</title><rect x="16.2791%" y="149" width="0.7400%" height="15" fill="rgb(231,138,38)" fg:x="154" fg:w="7"/><text x="16.5291%" y="159.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (1 samples, 0.11%)</title><rect x="16.9133%" y="133" width="0.1057%" height="15" fill="rgb(231,145,46)" fg:x="160" fg:w="1"/><text x="17.1633%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::get_summary_by_group::{{closure}} (1 samples, 0.11%)</title><rect x="17.0190%" y="149" width="0.1057%" height="15" fill="rgb(251,118,11)" fg:x="161" fg:w="1"/><text x="17.2690%" y="159.50"></text></g><g><title>sha1_smol::Sha1State::process (1 samples, 0.11%)</title><rect x="17.0190%" y="133" width="0.1057%" height="15" fill="rgb(217,147,25)" fg:x="161" fg:w="1"/><text x="17.2690%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}} (2 samples, 0.21%)</title><rect x="17.1247%" y="149" width="0.2114%" height="15" fill="rgb(247,81,37)" fg:x="162" fg:w="2"/><text x="17.3747%" y="159.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.42%)</title><rect x="17.3362%" y="149" width="0.4228%" height="15" fill="rgb(209,12,38)" fg:x="164" fg:w="4"/><text x="17.5862%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.42%)</title><rect x="17.3362%" y="133" width="0.4228%" height="15" fill="rgb(227,1,9)" fg:x="164" fg:w="4"/><text x="17.5862%" y="143.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.11%)</title><rect x="17.7590%" y="149" width="0.1057%" height="15" fill="rgb(248,47,43)" fg:x="168" fg:w="1"/><text x="18.0090%" y="159.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.11%)</title><rect x="17.7590%" y="133" width="0.1057%" height="15" fill="rgb(221,10,30)" fg:x="168" fg:w="1"/><text x="18.0090%" y="143.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (5 samples, 0.53%)</title><rect x="17.8647%" y="149" width="0.5285%" height="15" fill="rgb(210,229,1)" fg:x="169" fg:w="5"/><text x="18.1147%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.21%)</title><rect x="18.1818%" y="133" width="0.2114%" height="15" fill="rgb(222,148,37)" fg:x="172" fg:w="2"/><text x="18.4318%" y="143.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.11%)</title><rect x="18.2875%" y="117" width="0.1057%" height="15" fill="rgb(234,67,33)" fg:x="173" fg:w="1"/><text x="18.5375%" y="127.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::body (1 samples, 0.11%)</title><rect x="18.3932%" y="149" width="0.1057%" height="15" fill="rgb(247,98,35)" fg:x="174" fg:w="1"/><text x="18.6432%" y="159.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (2 samples, 0.21%)</title><rect x="18.4989%" y="149" width="0.2114%" height="15" fill="rgb(247,138,52)" fg:x="175" fg:w="2"/><text x="18.7489%" y="159.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.11%)</title><rect x="18.7104%" y="149" width="0.1057%" height="15" fill="rgb(213,79,30)" fg:x="177" fg:w="1"/><text x="18.9604%" y="159.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="18.8161%" y="133" width="0.1057%" height="15" fill="rgb(246,177,23)" fg:x="178" fg:w="1"/><text x="19.0661%" y="143.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="18.9218%" y="133" width="0.1057%" height="15" fill="rgb(230,62,27)" fg:x="179" fg:w="1"/><text x="19.1718%" y="143.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (41 samples, 4.33%)</title><rect x="14.7992%" y="181" width="4.3340%" height="15" fill="rgb(216,154,8)" fg:x="140" fg:w="41"/><text x="15.0492%" y="191.50">&lt;acti..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (39 samples, 4.12%)</title><rect x="15.0106%" y="165" width="4.1226%" height="15" fill="rgb(244,35,45)" fg:x="142" fg:w="39"/><text x="15.2606%" y="175.50">acti..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (3 samples, 0.32%)</title><rect x="18.8161%" y="149" width="0.3171%" height="15" fill="rgb(251,115,12)" fg:x="178" fg:w="3"/><text x="19.0661%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="19.0275%" y="133" width="0.1057%" height="15" fill="rgb(240,54,50)" fg:x="180" fg:w="1"/><text x="19.2775%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (7 samples, 0.74%)</title><rect x="19.1332%" y="165" width="0.7400%" height="15" fill="rgb(233,84,52)" fg:x="181" fg:w="7"/><text x="19.3832%" y="175.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (6 samples, 0.63%)</title><rect x="19.2389%" y="149" width="0.6342%" height="15" fill="rgb(207,117,47)" fg:x="182" fg:w="6"/><text x="19.4889%" y="159.50"></text></g><g><title>actix_http::helpers::write_content_length (1 samples, 0.11%)</title><rect x="19.7674%" y="133" width="0.1057%" height="15" fill="rgb(249,43,39)" fg:x="187" fg:w="1"/><text x="20.0174%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (55 samples, 5.81%)</title><rect x="14.1649%" y="197" width="5.8140%" height="15" fill="rgb(209,38,44)" fg:x="134" fg:w="55"/><text x="14.4149%" y="207.50">actix_h..</text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (8 samples, 0.85%)</title><rect x="19.1332%" y="181" width="0.8457%" height="15" fill="rgb(236,212,23)" fg:x="181" fg:w="8"/><text x="19.3832%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (1 samples, 0.11%)</title><rect x="19.8732%" y="165" width="0.1057%" height="15" fill="rgb(242,79,21)" fg:x="188" fg:w="1"/><text x="20.1232%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;actix_web::resource::Resource as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="19.8732%" y="149" width="0.1057%" height="15" fill="rgb(211,96,35)" fg:x="188" fg:w="1"/><text x="20.1232%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (3 samples, 0.32%)</title><rect x="19.9789%" y="197" width="0.3171%" height="15" fill="rgb(253,215,40)" fg:x="189" fg:w="3"/><text x="20.2289%" y="207.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.21%)</title><rect x="20.0846%" y="181" width="0.2114%" height="15" fill="rgb(211,81,21)" fg:x="190" fg:w="2"/><text x="20.3346%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="20.1903%" y="165" width="0.1057%" height="15" fill="rgb(208,190,38)" fg:x="191" fg:w="1"/><text x="20.4403%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (6 samples, 0.63%)</title><rect x="20.2960%" y="197" width="0.6342%" height="15" fill="rgb(235,213,38)" fg:x="192" fg:w="6"/><text x="20.5460%" y="207.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (3 samples, 0.32%)</title><rect x="20.9302%" y="197" width="0.3171%" height="15" fill="rgb(237,122,38)" fg:x="198" fg:w="3"/><text x="21.1802%" y="207.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (3 samples, 0.32%)</title><rect x="20.9302%" y="181" width="0.3171%" height="15" fill="rgb(244,218,35)" fg:x="198" fg:w="3"/><text x="21.1802%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (2 samples, 0.21%)</title><rect x="21.0359%" y="165" width="0.2114%" height="15" fill="rgb(240,68,47)" fg:x="199" fg:w="2"/><text x="21.2859%" y="175.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (4 samples, 0.42%)</title><rect x="21.5645%" y="181" width="0.4228%" height="15" fill="rgb(210,16,53)" fg:x="204" fg:w="4"/><text x="21.8145%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (3 samples, 0.32%)</title><rect x="21.6702%" y="165" width="0.3171%" height="15" fill="rgb(235,124,12)" fg:x="205" fg:w="3"/><text x="21.9202%" y="175.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (184 samples, 19.45%)</title><rect x="2.6427%" y="213" width="19.4503%" height="15" fill="rgb(224,169,11)" fg:x="25" fg:w="184"/><text x="2.8927%" y="223.50">&lt;actix_http::h1::dispatcher::D..</text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (8 samples, 0.85%)</title><rect x="21.2474%" y="197" width="0.8457%" height="15" fill="rgb(250,166,2)" fg:x="201" fg:w="8"/><text x="21.4974%" y="207.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.11%)</title><rect x="21.9873%" y="181" width="0.1057%" height="15" fill="rgb(242,216,29)" fg:x="208" fg:w="1"/><text x="22.2373%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.11%)</title><rect x="21.9873%" y="165" width="0.1057%" height="15" fill="rgb(230,116,27)" fg:x="208" fg:w="1"/><text x="22.2373%" y="175.50"></text></g><g><title>&lt;actix_http::service::HttpServiceHandlerResponse&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="22.0930%" y="213" width="0.1057%" height="15" fill="rgb(228,99,48)" fg:x="209" fg:w="1"/><text x="22.3430%" y="223.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (187 samples, 19.77%)</title><rect x="2.5370%" y="229" width="19.7674%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="187"/><text x="2.7870%" y="239.50">&lt;actix_server::service::StreamS..</text></g><g><title>&lt;actix_service::and_then::AndThenServiceResponse&lt;A,B,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="22.1987%" y="213" width="0.1057%" height="15" fill="rgb(247,143,39)" fg:x="210" fg:w="1"/><text x="22.4487%" y="223.50"></text></g><g><title>actix_http::date::DateService::new::{{closure}} (1 samples, 0.11%)</title><rect x="22.3044%" y="229" width="0.1057%" height="15" fill="rgb(236,97,10)" fg:x="211" fg:w="1"/><text x="22.5544%" y="239.50"></text></g><g><title>actix-rt|system (215 samples, 22.73%)</title><rect x="0.0000%" y="357" width="22.7273%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="215"/><text x="0.2500%" y="367.50">actix-rt|system</text></g><g><title>__clone (215 samples, 22.73%)</title><rect x="0.0000%" y="341" width="22.7273%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="215"/><text x="0.2500%" y="351.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (215 samples, 22.73%)</title><rect x="0.0000%" y="325" width="22.7273%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="215"/><text x="0.2500%" y="335.50">std::sys::pal::unix::thread::Thread:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (215 samples, 22.73%)</title><rect x="0.0000%" y="309" width="22.7273%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="215"/><text x="0.2500%" y="319.50">core::ops::function::FnOnce::call_on..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (215 samples, 22.73%)</title><rect x="0.0000%" y="293" width="22.7273%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="215"/><text x="0.2500%" y="303.50">std::sys::backtrace::__rust_begin_sh..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (196 samples, 20.72%)</title><rect x="2.0085%" y="277" width="20.7188%" height="15" fill="rgb(251,28,31)" fg:x="19" fg:w="196"/><text x="2.2585%" y="287.50">tokio::task::local::LocalSet::run..</text></g><g><title>tokio::task::local::LocalSet::tick (195 samples, 20.61%)</title><rect x="2.1142%" y="261" width="20.6131%" height="15" fill="rgb(233,223,10)" fg:x="20" fg:w="195"/><text x="2.3642%" y="271.50">tokio::task::local::LocalSet::ti..</text></g><g><title>tokio::runtime::task::raw::poll (193 samples, 20.40%)</title><rect x="2.3256%" y="245" width="20.4017%" height="15" fill="rgb(215,21,27)" fg:x="22" fg:w="193"/><text x="2.5756%" y="255.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::task::local::Shared::schedule (3 samples, 0.32%)</title><rect x="22.4101%" y="229" width="0.3171%" height="15" fill="rgb(232,23,21)" fg:x="212" fg:w="3"/><text x="22.6601%" y="239.50"></text></g><g><title>actix-server ac (1 samples, 0.11%)</title><rect x="22.7273%" y="357" width="0.1057%" height="15" fill="rgb(244,5,23)" fg:x="215" fg:w="1"/><text x="22.9773%" y="367.50"></text></g><g><title>__clone (1 samples, 0.11%)</title><rect x="22.7273%" y="341" width="0.1057%" height="15" fill="rgb(226,81,46)" fg:x="215" fg:w="1"/><text x="22.9773%" y="351.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.11%)</title><rect x="22.7273%" y="325" width="0.1057%" height="15" fill="rgb(247,70,30)" fg:x="215" fg:w="1"/><text x="22.9773%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.11%)</title><rect x="22.7273%" y="309" width="0.1057%" height="15" fill="rgb(212,68,19)" fg:x="215" fg:w="1"/><text x="22.9773%" y="319.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.11%)</title><rect x="22.7273%" y="293" width="0.1057%" height="15" fill="rgb(240,187,13)" fg:x="215" fg:w="1"/><text x="22.9773%" y="303.50"></text></g><g><title>actix_server::accept::Accept::accept (1 samples, 0.11%)</title><rect x="22.7273%" y="277" width="0.1057%" height="15" fill="rgb(223,113,26)" fg:x="215" fg:w="1"/><text x="22.9773%" y="287.50"></text></g><g><title>actix_server::accept::Accept::send_connection (1 samples, 0.11%)</title><rect x="22.7273%" y="261" width="0.1057%" height="15" fill="rgb(206,192,2)" fg:x="215" fg:w="1"/><text x="22.9773%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.11%)</title><rect x="22.7273%" y="245" width="0.1057%" height="15" fill="rgb(241,108,4)" fg:x="215" fg:w="1"/><text x="22.9773%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.11%)</title><rect x="24.7357%" y="261" width="0.1057%" height="15" fill="rgb(247,173,49)" fg:x="234" fg:w="1"/><text x="24.9857%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (2 samples, 0.21%)</title><rect x="24.8414%" y="261" width="0.2114%" height="15" fill="rgb(224,114,35)" fg:x="235" fg:w="2"/><text x="25.0914%" y="271.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (4 samples, 0.42%)</title><rect x="26.2156%" y="245" width="0.4228%" height="15" fill="rgb(245,159,27)" fg:x="248" fg:w="4"/><text x="26.4656%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.21%)</title><rect x="26.4271%" y="229" width="0.2114%" height="15" fill="rgb(245,172,44)" fg:x="250" fg:w="2"/><text x="26.6771%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (5 samples, 0.53%)</title><rect x="28.1184%" y="229" width="0.5285%" height="15" fill="rgb(236,23,11)" fg:x="266" fg:w="5"/><text x="28.3684%" y="239.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (4 samples, 0.42%)</title><rect x="28.6469%" y="229" width="0.4228%" height="15" fill="rgb(205,117,38)" fg:x="271" fg:w="4"/><text x="28.8969%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.74%)</title><rect x="30.1268%" y="213" width="0.7400%" height="15" fill="rgb(237,72,25)" fg:x="285" fg:w="7"/><text x="30.3768%" y="223.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (4 samples, 0.42%)</title><rect x="30.4440%" y="197" width="0.4228%" height="15" fill="rgb(244,70,9)" fg:x="288" fg:w="4"/><text x="30.6940%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (3 samples, 0.32%)</title><rect x="32.0296%" y="181" width="0.3171%" height="15" fill="rgb(217,125,39)" fg:x="303" fg:w="3"/><text x="32.2796%" y="191.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (34 samples, 3.59%)</title><rect x="29.0698%" y="229" width="3.5941%" height="15" fill="rgb(235,36,10)" fg:x="275" fg:w="34"/><text x="29.3198%" y="239.50">toki..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (17 samples, 1.80%)</title><rect x="30.8668%" y="213" width="1.7970%" height="15" fill="rgb(251,123,47)" fg:x="292" fg:w="17"/><text x="31.1168%" y="223.50">t..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 1.27%)</title><rect x="31.3953%" y="197" width="1.2685%" height="15" fill="rgb(221,13,13)" fg:x="297" fg:w="12"/><text x="31.6453%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::schedule (3 samples, 0.32%)</title><rect x="32.3467%" y="181" width="0.3171%" height="15" fill="rgb(238,131,9)" fg:x="306" fg:w="3"/><text x="32.5967%" y="191.50"></text></g><g><title>tokio::runtime::signal::Driver::process (3 samples, 0.32%)</title><rect x="32.6638%" y="229" width="0.3171%" height="15" fill="rgb(211,50,8)" fg:x="309" fg:w="3"/><text x="32.9138%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (79 samples, 8.35%)</title><rect x="25.0529%" y="261" width="8.3510%" height="15" fill="rgb(245,182,24)" fg:x="237" fg:w="79"/><text x="25.3029%" y="271.50">tokio::runti..</text></g><g><title>tokio::runtime::time::Driver::park_internal (64 samples, 6.77%)</title><rect x="26.6385%" y="245" width="6.7653%" height="15" fill="rgb(242,14,37)" fg:x="252" fg:w="64"/><text x="26.8885%" y="255.50">tokio::ru..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.42%)</title><rect x="32.9810%" y="229" width="0.4228%" height="15" fill="rgb(246,228,12)" fg:x="312" fg:w="4"/><text x="33.2310%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (8 samples, 0.85%)</title><rect x="33.4038%" y="261" width="0.8457%" height="15" fill="rgb(213,55,15)" fg:x="316" fg:w="8"/><text x="33.6538%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="38.0550%" y="213" width="0.1057%" height="15" fill="rgb(209,9,3)" fg:x="360" fg:w="1"/><text x="38.3050%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (2 samples, 0.21%)</title><rect x="38.1607%" y="213" width="0.2114%" height="15" fill="rgb(230,59,30)" fg:x="361" fg:w="2"/><text x="38.4107%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="38.2664%" y="197" width="0.1057%" height="15" fill="rgb(209,121,21)" fg:x="362" fg:w="1"/><text x="38.5164%" y="207.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (1 samples, 0.11%)</title><rect x="38.3721%" y="213" width="0.1057%" height="15" fill="rgb(220,109,13)" fg:x="363" fg:w="1"/><text x="38.6221%" y="223.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (1 samples, 0.11%)</title><rect x="38.4778%" y="213" width="0.1057%" height="15" fill="rgb(232,18,1)" fg:x="364" fg:w="1"/><text x="38.7278%" y="223.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (1 samples, 0.11%)</title><rect x="38.4778%" y="197" width="0.1057%" height="15" fill="rgb(215,41,42)" fg:x="364" fg:w="1"/><text x="38.7278%" y="207.50"></text></g><g><title>httparse::parse_headers_iter_uninit (4 samples, 0.42%)</title><rect x="38.5835%" y="213" width="0.4228%" height="15" fill="rgb(224,123,36)" fg:x="365" fg:w="4"/><text x="38.8335%" y="223.50"></text></g><g><title>httparse::parse_reason (1 samples, 0.11%)</title><rect x="39.0063%" y="213" width="0.1057%" height="15" fill="rgb(240,125,3)" fg:x="369" fg:w="1"/><text x="39.2563%" y="223.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::poll_canceled (1 samples, 0.11%)</title><rect x="39.1121%" y="213" width="0.1057%" height="15" fill="rgb(205,98,50)" fg:x="370" fg:w="1"/><text x="39.3621%" y="223.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.11%)</title><rect x="39.3235%" y="197" width="0.1057%" height="15" fill="rgb(205,185,37)" fg:x="372" fg:w="1"/><text x="39.5735%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.11%)</title><rect x="39.3235%" y="181" width="0.1057%" height="15" fill="rgb(238,207,15)" fg:x="372" fg:w="1"/><text x="39.5735%" y="191.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (1 samples, 0.11%)</title><rect x="39.3235%" y="165" width="0.1057%" height="15" fill="rgb(213,199,42)" fg:x="372" fg:w="1"/><text x="39.5735%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (3 samples, 0.32%)</title><rect x="39.2178%" y="213" width="0.3171%" height="15" fill="rgb(235,201,11)" fg:x="371" fg:w="3"/><text x="39.4678%" y="223.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (1 samples, 0.11%)</title><rect x="39.4292%" y="197" width="0.1057%" height="15" fill="rgb(207,46,11)" fg:x="373" fg:w="1"/><text x="39.6792%" y="207.50"></text></g><g><title>core::fmt::write (4 samples, 0.42%)</title><rect x="39.7463%" y="197" width="0.4228%" height="15" fill="rgb(241,35,35)" fg:x="376" fg:w="4"/><text x="39.9963%" y="207.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.21%)</title><rect x="39.9577%" y="181" width="0.2114%" height="15" fill="rgb(243,32,47)" fg:x="378" fg:w="2"/><text x="40.2077%" y="191.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert2 (1 samples, 0.11%)</title><rect x="40.1691%" y="197" width="0.1057%" height="15" fill="rgb(247,202,23)" fg:x="380" fg:w="1"/><text x="40.4191%" y="207.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (9 samples, 0.95%)</title><rect x="39.5349%" y="213" width="0.9514%" height="15" fill="rgb(219,102,11)" fg:x="374" fg:w="9"/><text x="39.7849%" y="223.50"></text></g><g><title>hyper::headers::content_length_parse_all (2 samples, 0.21%)</title><rect x="40.2748%" y="197" width="0.2114%" height="15" fill="rgb(243,110,44)" fg:x="381" fg:w="2"/><text x="40.5248%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (1 samples, 0.11%)</title><rect x="40.3805%" y="181" width="0.1057%" height="15" fill="rgb(222,74,54)" fg:x="382" fg:w="1"/><text x="40.6305%" y="191.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (3 samples, 0.32%)</title><rect x="40.4863%" y="213" width="0.3171%" height="15" fill="rgb(216,99,12)" fg:x="383" fg:w="3"/><text x="40.7363%" y="223.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.11%)</title><rect x="40.6977%" y="197" width="0.1057%" height="15" fill="rgb(226,22,26)" fg:x="385" fg:w="1"/><text x="40.9477%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2 samples, 0.21%)</title><rect x="40.8034%" y="213" width="0.2114%" height="15" fill="rgb(217,163,10)" fg:x="386" fg:w="2"/><text x="41.0534%" y="223.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (1 samples, 0.11%)</title><rect x="40.9091%" y="197" width="0.1057%" height="15" fill="rgb(213,25,53)" fg:x="387" fg:w="1"/><text x="41.1591%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.11%)</title><rect x="41.0148%" y="213" width="0.1057%" height="15" fill="rgb(252,105,26)" fg:x="388" fg:w="1"/><text x="41.2648%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.11%)</title><rect x="41.0148%" y="197" width="0.1057%" height="15" fill="rgb(220,39,43)" fg:x="388" fg:w="1"/><text x="41.2648%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="41.2262%" y="197" width="0.1057%" height="15" fill="rgb(229,68,48)" fg:x="390" fg:w="1"/><text x="41.4762%" y="207.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (46 samples, 4.86%)</title><rect x="36.5751%" y="229" width="4.8626%" height="15" fill="rgb(252,8,32)" fg:x="346" fg:w="46"/><text x="36.8251%" y="239.50">&lt;hyper..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (3 samples, 0.32%)</title><rect x="41.1205%" y="213" width="0.3171%" height="15" fill="rgb(223,20,43)" fg:x="389" fg:w="3"/><text x="41.3705%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.11%)</title><rect x="41.3319%" y="197" width="0.1057%" height="15" fill="rgb(229,81,49)" fg:x="391" fg:w="1"/><text x="41.5819%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.63%)</title><rect x="42.2833%" y="197" width="0.6342%" height="15" fill="rgb(236,28,36)" fg:x="400" fg:w="6"/><text x="42.5333%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.32%)</title><rect x="42.6004%" y="181" width="0.3171%" height="15" fill="rgb(249,185,26)" fg:x="403" fg:w="3"/><text x="42.8504%" y="191.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (2 samples, 0.21%)</title><rect x="44.2918%" y="165" width="0.2114%" height="15" fill="rgb(249,174,33)" fg:x="419" fg:w="2"/><text x="44.5418%" y="175.50"></text></g><g><title>combine::parser::Parser::parse_mode (4 samples, 0.42%)</title><rect x="45.7717%" y="133" width="0.4228%" height="15" fill="rgb(233,201,37)" fg:x="433" fg:w="4"/><text x="46.0217%" y="143.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2 samples, 0.21%)</title><rect x="45.9831%" y="117" width="0.2114%" height="15" fill="rgb(221,78,26)" fg:x="435" fg:w="2"/><text x="46.2331%" y="127.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.11%)</title><rect x="46.0888%" y="101" width="0.1057%" height="15" fill="rgb(250,127,30)" fg:x="436" fg:w="1"/><text x="46.3388%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (11 samples, 1.16%)</title><rect x="45.3488%" y="149" width="1.1628%" height="15" fill="rgb(230,49,44)" fg:x="429" fg:w="11"/><text x="45.5988%" y="159.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.32%)</title><rect x="46.1945%" y="133" width="0.3171%" height="15" fill="rgb(229,67,23)" fg:x="437" fg:w="3"/><text x="46.4445%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.11%)</title><rect x="47.3573%" y="85" width="0.1057%" height="15" fill="rgb(249,83,47)" fg:x="448" fg:w="1"/><text x="47.6073%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.11%)</title><rect x="47.3573%" y="69" width="0.1057%" height="15" fill="rgb(215,43,3)" fg:x="448" fg:w="1"/><text x="47.6073%" y="79.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.11%)</title><rect x="47.3573%" y="53" width="0.1057%" height="15" fill="rgb(238,154,13)" fg:x="448" fg:w="1"/><text x="47.6073%" y="63.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.11%)</title><rect x="47.3573%" y="37" width="0.1057%" height="15" fill="rgb(219,56,2)" fg:x="448" fg:w="1"/><text x="47.6073%" y="47.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (7 samples, 0.74%)</title><rect x="46.9345%" y="101" width="0.7400%" height="15" fill="rgb(233,0,4)" fg:x="444" fg:w="7"/><text x="47.1845%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.21%)</title><rect x="47.4630%" y="85" width="0.2114%" height="15" fill="rgb(235,30,7)" fg:x="449" fg:w="2"/><text x="47.7130%" y="95.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (1 samples, 0.11%)</title><rect x="47.5687%" y="69" width="0.1057%" height="15" fill="rgb(250,79,13)" fg:x="450" fg:w="1"/><text x="47.8187%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (12 samples, 1.27%)</title><rect x="46.5116%" y="149" width="1.2685%" height="15" fill="rgb(211,146,34)" fg:x="440" fg:w="12"/><text x="46.7616%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (10 samples, 1.06%)</title><rect x="46.7230%" y="133" width="1.0571%" height="15" fill="rgb(228,22,38)" fg:x="442" fg:w="10"/><text x="46.9730%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (8 samples, 0.85%)</title><rect x="46.9345%" y="117" width="0.8457%" height="15" fill="rgb(235,168,5)" fg:x="444" fg:w="8"/><text x="47.1845%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="47.6744%" y="101" width="0.1057%" height="15" fill="rgb(221,155,16)" fg:x="451" fg:w="1"/><text x="47.9244%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (43 samples, 4.55%)</title><rect x="43.4461%" y="181" width="4.5455%" height="15" fill="rgb(215,215,53)" fg:x="411" fg:w="43"/><text x="43.6961%" y="191.50">&lt;comb..</text></g><g><title>combine::parser::ParseMode::parse_committed (33 samples, 3.49%)</title><rect x="44.5032%" y="165" width="3.4884%" height="15" fill="rgb(223,4,10)" fg:x="421" fg:w="33"/><text x="44.7532%" y="175.50">com..</text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.21%)</title><rect x="47.7801%" y="149" width="0.2114%" height="15" fill="rgb(234,103,6)" fg:x="452" fg:w="2"/><text x="48.0301%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.21%)</title><rect x="47.7801%" y="133" width="0.2114%" height="15" fill="rgb(227,97,0)" fg:x="452" fg:w="2"/><text x="48.0301%" y="143.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (61 samples, 6.45%)</title><rect x="41.9662%" y="213" width="6.4482%" height="15" fill="rgb(234,150,53)" fg:x="397" fg:w="61"/><text x="42.2162%" y="223.50">&lt;tokio_u..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (52 samples, 5.50%)</title><rect x="42.9175%" y="197" width="5.4968%" height="15" fill="rgb(228,201,54)" fg:x="406" fg:w="52"/><text x="43.1675%" y="207.50">redis::..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.42%)</title><rect x="47.9915%" y="181" width="0.4228%" height="15" fill="rgb(222,22,37)" fg:x="454" fg:w="4"/><text x="48.2415%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (2 samples, 0.21%)</title><rect x="49.0486%" y="197" width="0.2114%" height="15" fill="rgb(237,53,32)" fg:x="464" fg:w="2"/><text x="49.2986%" y="207.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (9 samples, 0.95%)</title><rect x="48.4144%" y="213" width="0.9514%" height="15" fill="rgb(233,25,53)" fg:x="458" fg:w="9"/><text x="48.6644%" y="223.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.11%)</title><rect x="49.2600%" y="197" width="0.1057%" height="15" fill="rgb(210,40,34)" fg:x="466" fg:w="1"/><text x="49.5100%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.11%)</title><rect x="49.4715%" y="197" width="0.1057%" height="15" fill="rgb(241,220,44)" fg:x="468" fg:w="1"/><text x="49.7215%" y="207.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (80 samples, 8.46%)</title><rect x="41.4376%" y="229" width="8.4567%" height="15" fill="rgb(235,28,35)" fg:x="392" fg:w="80"/><text x="41.6876%" y="239.50">&lt;redis::aio:..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (5 samples, 0.53%)</title><rect x="49.3658%" y="213" width="0.5285%" height="15" fill="rgb(210,56,17)" fg:x="467" fg:w="5"/><text x="49.6158%" y="223.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.32%)</title><rect x="49.5772%" y="197" width="0.3171%" height="15" fill="rgb(224,130,29)" fg:x="469" fg:w="3"/><text x="49.8272%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.21%)</title><rect x="49.6829%" y="181" width="0.2114%" height="15" fill="rgb(235,212,8)" fg:x="470" fg:w="2"/><text x="49.9329%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (2 samples, 0.21%)</title><rect x="49.8943%" y="229" width="0.2114%" height="15" fill="rgb(223,33,50)" fg:x="472" fg:w="2"/><text x="50.1443%" y="239.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.11%)</title><rect x="50.5285%" y="213" width="0.1057%" height="15" fill="rgb(219,149,13)" fg:x="478" fg:w="1"/><text x="50.7785%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (7 samples, 0.74%)</title><rect x="50.1057%" y="229" width="0.7400%" height="15" fill="rgb(250,156,29)" fg:x="474" fg:w="7"/><text x="50.3557%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.21%)</title><rect x="50.6342%" y="213" width="0.2114%" height="15" fill="rgb(216,193,19)" fg:x="479" fg:w="2"/><text x="50.8842%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.21%)</title><rect x="50.6342%" y="197" width="0.2114%" height="15" fill="rgb(216,135,14)" fg:x="479" fg:w="2"/><text x="50.8842%" y="207.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (144 samples, 15.22%)</title><rect x="35.8351%" y="245" width="15.2220%" height="15" fill="rgb(241,47,5)" fg:x="339" fg:w="144"/><text x="36.0851%" y="255.50">&lt;futures_util::future::..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.21%)</title><rect x="50.8457%" y="229" width="0.2114%" height="15" fill="rgb(233,42,35)" fg:x="481" fg:w="2"/><text x="51.0957%" y="239.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.21%)</title><rect x="52.1142%" y="213" width="0.2114%" height="15" fill="rgb(231,13,6)" fg:x="493" fg:w="2"/><text x="52.3642%" y="223.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.11%)</title><rect x="52.2199%" y="197" width="0.1057%" height="15" fill="rgb(207,181,40)" fg:x="494" fg:w="1"/><text x="52.4699%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.11%)</title><rect x="53.5941%" y="165" width="0.1057%" height="15" fill="rgb(254,173,49)" fg:x="507" fg:w="1"/><text x="53.8441%" y="175.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 0.53%)</title><rect x="53.3827%" y="181" width="0.5285%" height="15" fill="rgb(221,1,38)" fg:x="505" fg:w="5"/><text x="53.6327%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (2 samples, 0.21%)</title><rect x="53.6998%" y="165" width="0.2114%" height="15" fill="rgb(206,124,46)" fg:x="508" fg:w="2"/><text x="53.9498%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.11%)</title><rect x="54.1226%" y="149" width="0.1057%" height="15" fill="rgb(249,21,11)" fg:x="512" fg:w="1"/><text x="54.3726%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="55.3911%" y="85" width="0.1057%" height="15" fill="rgb(222,201,40)" fg:x="524" fg:w="1"/><text x="55.6411%" y="95.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 1.59%)</title><rect x="54.0169%" y="165" width="1.5856%" height="15" fill="rgb(235,61,29)" fg:x="511" fg:w="15"/><text x="54.2669%" y="175.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (13 samples, 1.37%)</title><rect x="54.2283%" y="149" width="1.3742%" height="15" fill="rgb(219,207,3)" fg:x="513" fg:w="13"/><text x="54.4783%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (10 samples, 1.06%)</title><rect x="54.5455%" y="133" width="1.0571%" height="15" fill="rgb(222,56,46)" fg:x="516" fg:w="10"/><text x="54.7955%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (8 samples, 0.85%)</title><rect x="54.7569%" y="117" width="0.8457%" height="15" fill="rgb(239,76,54)" fg:x="518" fg:w="8"/><text x="55.0069%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.21%)</title><rect x="55.3911%" y="101" width="0.2114%" height="15" fill="rgb(231,124,27)" fg:x="524" fg:w="2"/><text x="55.6411%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.11%)</title><rect x="55.4968%" y="85" width="0.1057%" height="15" fill="rgb(249,195,6)" fg:x="525" fg:w="1"/><text x="55.7468%" y="95.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.11%)</title><rect x="55.4968%" y="69" width="0.1057%" height="15" fill="rgb(237,174,47)" fg:x="525" fg:w="1"/><text x="55.7468%" y="79.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.11%)</title><rect x="56.0254%" y="149" width="0.1057%" height="15" fill="rgb(206,201,31)" fg:x="530" fg:w="1"/><text x="56.2754%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (9 samples, 0.95%)</title><rect x="55.6025%" y="165" width="0.9514%" height="15" fill="rgb(231,57,52)" fg:x="526" fg:w="9"/><text x="55.8525%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (4 samples, 0.42%)</title><rect x="56.1311%" y="149" width="0.4228%" height="15" fill="rgb(248,177,22)" fg:x="531" fg:w="4"/><text x="56.3811%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="56.4482%" y="133" width="0.1057%" height="15" fill="rgb(215,211,37)" fg:x="534" fg:w="1"/><text x="56.6982%" y="143.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (27 samples, 2.85%)</title><rect x="53.9112%" y="181" width="2.8541%" height="15" fill="rgb(241,128,51)" fg:x="510" fg:w="27"/><text x="54.1612%" y="191.50">re..</text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.21%)</title><rect x="56.5539%" y="165" width="0.2114%" height="15" fill="rgb(227,165,31)" fg:x="535" fg:w="2"/><text x="56.8039%" y="175.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="56.6596%" y="149" width="0.1057%" height="15" fill="rgb(228,167,24)" fg:x="536" fg:w="1"/><text x="56.9096%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.21%)</title><rect x="57.0825%" y="165" width="0.2114%" height="15" fill="rgb(228,143,12)" fg:x="540" fg:w="2"/><text x="57.3325%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="57.1882%" y="149" width="0.1057%" height="15" fill="rgb(249,149,8)" fg:x="541" fg:w="1"/><text x="57.4382%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="57.2939%" y="149" width="0.1057%" height="15" fill="rgb(243,35,44)" fg:x="542" fg:w="1"/><text x="57.5439%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="57.2939%" y="133" width="0.1057%" height="15" fill="rgb(246,89,9)" fg:x="542" fg:w="1"/><text x="57.5439%" y="143.50"></text></g><g><title>redis::connection::connection_setup_pipeline (7 samples, 0.74%)</title><rect x="56.7653%" y="181" width="0.7400%" height="15" fill="rgb(233,213,13)" fg:x="537" fg:w="7"/><text x="57.0153%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.21%)</title><rect x="57.2939%" y="165" width="0.2114%" height="15" fill="rgb(233,141,41)" fg:x="542" fg:w="2"/><text x="57.5439%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.11%)</title><rect x="57.3996%" y="149" width="0.1057%" height="15" fill="rgb(239,167,4)" fg:x="543" fg:w="1"/><text x="57.6496%" y="159.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.11%)</title><rect x="57.5053%" y="181" width="0.1057%" height="15" fill="rgb(209,217,16)" fg:x="544" fg:w="1"/><text x="57.7553%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.11%)</title><rect x="57.5053%" y="165" width="0.1057%" height="15" fill="rgb(219,88,35)" fg:x="544" fg:w="1"/><text x="57.7553%" y="175.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (2 samples, 0.21%)</title><rect x="57.6110%" y="181" width="0.2114%" height="15" fill="rgb(220,193,23)" fg:x="545" fg:w="2"/><text x="57.8610%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (2 samples, 0.21%)</title><rect x="57.6110%" y="165" width="0.2114%" height="15" fill="rgb(230,90,52)" fg:x="545" fg:w="2"/><text x="57.8610%" y="175.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.11%)</title><rect x="57.7167%" y="149" width="0.1057%" height="15" fill="rgb(252,106,19)" fg:x="546" fg:w="1"/><text x="57.9667%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (53 samples, 5.60%)</title><rect x="52.3256%" y="213" width="5.6025%" height="15" fill="rgb(206,74,20)" fg:x="495" fg:w="53"/><text x="52.5756%" y="223.50">redis::..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (50 samples, 5.29%)</title><rect x="52.6427%" y="197" width="5.2854%" height="15" fill="rgb(230,138,44)" fg:x="498" fg:w="50"/><text x="52.8927%" y="207.50">redis:..</text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.11%)</title><rect x="57.8224%" y="181" width="0.1057%" height="15" fill="rgb(235,182,43)" fg:x="547" fg:w="1"/><text x="58.0724%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.42%)</title><rect x="58.2452%" y="197" width="0.4228%" height="15" fill="rgb(242,16,51)" fg:x="551" fg:w="4"/><text x="58.4952%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="58.5624%" y="181" width="0.1057%" height="15" fill="rgb(248,9,4)" fg:x="554" fg:w="1"/><text x="58.8124%" y="191.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="59.3023%" y="133" width="0.1057%" height="15" fill="rgb(210,31,22)" fg:x="561" fg:w="1"/><text x="59.5523%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="59.4080%" y="133" width="0.1057%" height="15" fill="rgb(239,54,39)" fg:x="562" fg:w="1"/><text x="59.6580%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (5 samples, 0.53%)</title><rect x="59.0909%" y="165" width="0.5285%" height="15" fill="rgb(230,99,41)" fg:x="559" fg:w="5"/><text x="59.3409%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (4 samples, 0.42%)</title><rect x="59.1966%" y="149" width="0.4228%" height="15" fill="rgb(253,106,12)" fg:x="560" fg:w="4"/><text x="59.4466%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="59.5137%" y="133" width="0.1057%" height="15" fill="rgb(213,46,41)" fg:x="563" fg:w="1"/><text x="59.7637%" y="143.50"></text></g><g><title>redis::cmd::args_len (2 samples, 0.21%)</title><rect x="59.6195%" y="165" width="0.2114%" height="15" fill="rgb(215,133,35)" fg:x="564" fg:w="2"/><text x="59.8695%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (9 samples, 0.95%)</title><rect x="58.9852%" y="181" width="0.9514%" height="15" fill="rgb(213,28,5)" fg:x="558" fg:w="9"/><text x="59.2352%" y="191.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="59.8309%" y="165" width="0.1057%" height="15" fill="rgb(215,77,49)" fg:x="566" fg:w="1"/><text x="60.0809%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="59.9366%" y="181" width="0.1057%" height="15" fill="rgb(248,100,22)" fg:x="567" fg:w="1"/><text x="60.1866%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.11%)</title><rect x="60.0423%" y="181" width="0.1057%" height="15" fill="rgb(208,67,9)" fg:x="568" fg:w="1"/><text x="60.2923%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (84 samples, 8.88%)</title><rect x="51.3742%" y="229" width="8.8795%" height="15" fill="rgb(219,133,21)" fg:x="486" fg:w="84"/><text x="51.6242%" y="239.50">&lt;rinha_de_bac..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (22 samples, 2.33%)</title><rect x="57.9281%" y="213" width="2.3256%" height="15" fill="rgb(246,46,29)" fg:x="548" fg:w="22"/><text x="58.1781%" y="223.50">r..</text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (15 samples, 1.59%)</title><rect x="58.6681%" y="197" width="1.5856%" height="15" fill="rgb(246,185,52)" fg:x="555" fg:w="15"/><text x="58.9181%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.11%)</title><rect x="60.1480%" y="181" width="0.1057%" height="15" fill="rgb(252,136,11)" fg:x="569" fg:w="1"/><text x="60.3980%" y="191.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.11%)</title><rect x="60.2537%" y="229" width="0.1057%" height="15" fill="rgb(219,138,53)" fg:x="570" fg:w="1"/><text x="60.5037%" y="239.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::mpsc_to_redis_worker::mpsc_to_redis_worker::{{closure}} (89 samples, 9.41%)</title><rect x="51.0571%" y="245" width="9.4080%" height="15" fill="rgb(211,51,23)" fg:x="483" fg:w="89"/><text x="51.3071%" y="255.50">rinha_de_back..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.11%)</title><rect x="60.3594%" y="229" width="0.1057%" height="15" fill="rgb(247,221,28)" fg:x="571" fg:w="1"/><text x="60.6094%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.5920 (1 samples, 0.11%)</title><rect x="63.0021%" y="165" width="0.1057%" height="15" fill="rgb(251,222,45)" fg:x="596" fg:w="1"/><text x="63.2521%" y="175.50"></text></g><g><title>core::fmt::write (3 samples, 0.32%)</title><rect x="62.8964%" y="181" width="0.3171%" height="15" fill="rgb(217,162,53)" fg:x="595" fg:w="3"/><text x="63.1464%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.11%)</title><rect x="63.1078%" y="165" width="0.1057%" height="15" fill="rgb(229,93,14)" fg:x="597" fg:w="1"/><text x="63.3578%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.11%)</title><rect x="63.4249%" y="165" width="0.1057%" height="15" fill="rgb(209,67,49)" fg:x="600" fg:w="1"/><text x="63.6749%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.5918 (1 samples, 0.11%)</title><rect x="63.4249%" y="149" width="0.1057%" height="15" fill="rgb(213,87,29)" fg:x="600" fg:w="1"/><text x="63.6749%" y="159.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.11%)</title><rect x="63.4249%" y="133" width="0.1057%" height="15" fill="rgb(205,151,52)" fg:x="600" fg:w="1"/><text x="63.6749%" y="143.50"></text></g><g><title>url::host::Host::parse (4 samples, 0.42%)</title><rect x="63.2135%" y="181" width="0.4228%" height="15" fill="rgb(253,215,39)" fg:x="598" fg:w="4"/><text x="63.4635%" y="191.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.11%)</title><rect x="63.5307%" y="165" width="0.1057%" height="15" fill="rgb(221,220,41)" fg:x="601" fg:w="1"/><text x="63.7807%" y="175.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (15 samples, 1.59%)</title><rect x="62.2622%" y="229" width="1.5856%" height="15" fill="rgb(218,133,21)" fg:x="589" fg:w="15"/><text x="62.5122%" y="239.50"></text></g><g><title>url::ParseOptions::parse (15 samples, 1.59%)</title><rect x="62.2622%" y="213" width="1.5856%" height="15" fill="rgb(221,193,43)" fg:x="589" fg:w="15"/><text x="62.5122%" y="223.50"></text></g><g><title>url::parser::Parser::after_double_slash (14 samples, 1.48%)</title><rect x="62.3679%" y="197" width="1.4799%" height="15" fill="rgb(240,128,52)" fg:x="590" fg:w="14"/><text x="62.6179%" y="207.50"></text></g><g><title>url::parser::Parser::parse_path (2 samples, 0.21%)</title><rect x="63.6364%" y="181" width="0.2114%" height="15" fill="rgb(253,114,12)" fg:x="602" fg:w="2"/><text x="63.8864%" y="191.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.21%)</title><rect x="63.8478%" y="213" width="0.2114%" height="15" fill="rgb(215,223,47)" fg:x="604" fg:w="2"/><text x="64.0978%" y="223.50"></text></g><g><title>core::fmt::write (2 samples, 0.21%)</title><rect x="63.8478%" y="197" width="0.2114%" height="15" fill="rgb(248,225,23)" fg:x="604" fg:w="2"/><text x="64.0978%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::send_request::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="64.0592%" y="197" width="0.1057%" height="15" fill="rgb(250,108,0)" fg:x="606" fg:w="1"/><text x="64.3092%" y="207.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="64.9049%" y="181" width="0.1057%" height="15" fill="rgb(228,208,7)" fg:x="614" fg:w="1"/><text x="65.1549%" y="191.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.11%)</title><rect x="64.9049%" y="165" width="0.1057%" height="15" fill="rgb(244,45,10)" fg:x="614" fg:w="1"/><text x="65.1549%" y="175.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.11%)</title><rect x="64.9049%" y="149" width="0.1057%" height="15" fill="rgb(207,125,25)" fg:x="614" fg:w="1"/><text x="65.1549%" y="159.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.11%)</title><rect x="64.9049%" y="133" width="0.1057%" height="15" fill="rgb(210,195,18)" fg:x="614" fg:w="1"/><text x="65.1549%" y="143.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.11%)</title><rect x="64.9049%" y="117" width="0.1057%" height="15" fill="rgb(249,80,12)" fg:x="614" fg:w="1"/><text x="65.1549%" y="127.50"></text></g><g><title>&lt;reqwest::dns::gai::GaiResolver as reqwest::dns::resolve::Resolve&gt;::resolve::{{closure}} (1 samples, 0.11%)</title><rect x="64.9049%" y="101" width="0.1057%" height="15" fill="rgb(221,65,9)" fg:x="614" fg:w="1"/><text x="65.1549%" y="111.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="64.9049%" y="85" width="0.1057%" height="15" fill="rgb(235,49,36)" fg:x="614" fg:w="1"/><text x="65.1549%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.74%)</title><rect x="65.1163%" y="165" width="0.7400%" height="15" fill="rgb(225,32,20)" fg:x="616" fg:w="7"/><text x="65.3663%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.42%)</title><rect x="65.4334%" y="149" width="0.4228%" height="15" fill="rgb(215,141,46)" fg:x="619" fg:w="4"/><text x="65.6834%" y="159.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (9 samples, 0.95%)</title><rect x="65.0106%" y="181" width="0.9514%" height="15" fill="rgb(250,160,47)" fg:x="615" fg:w="9"/><text x="65.2606%" y="191.50"></text></g><g><title>hyper_util::client::legacy::pool::Pool&lt;T,K&gt;::reuse (1 samples, 0.11%)</title><rect x="65.8562%" y="165" width="0.1057%" height="15" fill="rgb(216,222,40)" fg:x="623" fg:w="1"/><text x="66.1062%" y="175.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (1 samples, 0.11%)</title><rect x="65.9619%" y="181" width="0.1057%" height="15" fill="rgb(234,217,39)" fg:x="624" fg:w="1"/><text x="66.2119%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="66.0677%" y="181" width="0.1057%" height="15" fill="rgb(207,178,40)" fg:x="625" fg:w="1"/><text x="66.3177%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.11%)</title><rect x="66.0677%" y="165" width="0.1057%" height="15" fill="rgb(221,136,13)" fg:x="625" fg:w="1"/><text x="66.3177%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.11%)</title><rect x="66.1734%" y="181" width="0.1057%" height="15" fill="rgb(249,199,10)" fg:x="626" fg:w="1"/><text x="66.4234%" y="191.50"></text></g><g><title>http::header::map::VacantEntry&lt;T&gt;::try_insert (1 samples, 0.11%)</title><rect x="66.2791%" y="181" width="0.1057%" height="15" fill="rgb(249,222,13)" fg:x="627" fg:w="1"/><text x="66.5291%" y="191.50"></text></g><g><title>http::uri::authority::Authority::port (3 samples, 0.32%)</title><rect x="66.3848%" y="181" width="0.3171%" height="15" fill="rgb(244,185,38)" fg:x="628" fg:w="3"/><text x="66.6348%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (2 samples, 0.21%)</title><rect x="66.4905%" y="165" width="0.2114%" height="15" fill="rgb(236,202,9)" fg:x="629" fg:w="2"/><text x="66.7405%" y="175.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.11%)</title><rect x="66.5962%" y="149" width="0.1057%" height="15" fill="rgb(250,229,37)" fg:x="630" fg:w="1"/><text x="66.8462%" y="159.50"></text></g><g><title>http::uri::authority::host (1 samples, 0.11%)</title><rect x="66.7019%" y="181" width="0.1057%" height="15" fill="rgb(206,174,23)" fg:x="631" fg:w="1"/><text x="66.9519%" y="191.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (2 samples, 0.21%)</title><rect x="66.8076%" y="181" width="0.2114%" height="15" fill="rgb(211,33,43)" fg:x="632" fg:w="2"/><text x="67.0576%" y="191.50"></text></g><g><title>http::uri::builder::Builder::map (1 samples, 0.11%)</title><rect x="66.9133%" y="165" width="0.1057%" height="15" fill="rgb(245,58,50)" fg:x="633" fg:w="1"/><text x="67.1633%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (29 samples, 3.07%)</title><rect x="64.0592%" y="213" width="3.0655%" height="15" fill="rgb(244,68,36)" fg:x="606" fg:w="29"/><text x="64.3092%" y="223.50">&lt;re..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (28 samples, 2.96%)</title><rect x="64.1649%" y="197" width="2.9598%" height="15" fill="rgb(232,229,15)" fg:x="607" fg:w="28"/><text x="64.4149%" y="207.50">hyp..</text></g><g><title>hyper_util::client::legacy::client::origin_form (1 samples, 0.11%)</title><rect x="67.0190%" y="181" width="0.1057%" height="15" fill="rgb(254,30,23)" fg:x="634" fg:w="1"/><text x="67.2690%" y="191.50"></text></g><g><title>http::uri::Uri::from_parts (1 samples, 0.11%)</title><rect x="67.0190%" y="165" width="0.1057%" height="15" fill="rgb(235,160,14)" fg:x="634" fg:w="1"/><text x="67.2690%" y="175.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="67.7590%" y="181" width="0.1057%" height="15" fill="rgb(212,155,44)" fg:x="641" fg:w="1"/><text x="68.0090%" y="191.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.11%)</title><rect x="67.7590%" y="165" width="0.1057%" height="15" fill="rgb(226,2,50)" fg:x="641" fg:w="1"/><text x="68.0090%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.11%)</title><rect x="67.7590%" y="149" width="0.1057%" height="15" fill="rgb(234,177,6)" fg:x="641" fg:w="1"/><text x="68.0090%" y="159.50"></text></g><g><title>url::host::Host::parse (2 samples, 0.21%)</title><rect x="67.8647%" y="181" width="0.2114%" height="15" fill="rgb(217,24,9)" fg:x="642" fg:w="2"/><text x="68.1147%" y="191.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (2 samples, 0.21%)</title><rect x="67.8647%" y="165" width="0.2114%" height="15" fill="rgb(220,13,46)" fg:x="642" fg:w="2"/><text x="68.1147%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (41 samples, 4.33%)</title><rect x="63.8478%" y="229" width="4.3340%" height="15" fill="rgb(239,221,27)" fg:x="604" fg:w="41"/><text x="64.0978%" y="239.50">&lt;reqw..</text></g><g><title>url::ParseOptions::parse (10 samples, 1.06%)</title><rect x="67.1247%" y="213" width="1.0571%" height="15" fill="rgb(222,198,25)" fg:x="635" fg:w="10"/><text x="67.3747%" y="223.50"></text></g><g><title>url::parser::Parser::after_double_slash (9 samples, 0.95%)</title><rect x="67.2304%" y="197" width="0.9514%" height="15" fill="rgb(211,99,13)" fg:x="636" fg:w="9"/><text x="67.4804%" y="207.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.11%)</title><rect x="68.0761%" y="181" width="0.1057%" height="15" fill="rgb(232,111,31)" fg:x="644" fg:w="1"/><text x="68.3261%" y="191.50"></text></g><g><title>&lt;redis::client::Client as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="68.2875%" y="213" width="0.1057%" height="15" fill="rgb(245,82,37)" fg:x="646" fg:w="1"/><text x="68.5375%" y="223.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::clear::{{closure}} (1 samples, 0.11%)</title><rect x="68.3932%" y="213" width="0.1057%" height="15" fill="rgb(227,149,46)" fg:x="647" fg:w="1"/><text x="68.6432%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="69.7674%" y="181" width="0.1057%" height="15" fill="rgb(218,36,50)" fg:x="660" fg:w="1"/><text x="70.0174%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.11%)</title><rect x="69.7674%" y="165" width="0.1057%" height="15" fill="rgb(226,80,48)" fg:x="660" fg:w="1"/><text x="70.0174%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.11%)</title><rect x="69.7674%" y="149" width="0.1057%" height="15" fill="rgb(238,224,15)" fg:x="660" fg:w="1"/><text x="70.0174%" y="159.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.11%)</title><rect x="69.7674%" y="133" width="0.1057%" height="15" fill="rgb(241,136,10)" fg:x="660" fg:w="1"/><text x="70.0174%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::Map&lt;redis::aio::get_socket_addrs::{{closure}},&lt;redis::aio::DefaultAsyncDNSResolver as redis::io::dns::AsyncDNSResolver&gt;::resolve::{{closure}}&gt;&gt; (1 samples, 0.11%)</title><rect x="69.8732%" y="181" width="0.1057%" height="15" fill="rgb(208,32,45)" fg:x="661" fg:w="1"/><text x="70.1232%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::io::poll_evented::PollEvented&lt;mio::net::tcp::stream::TcpStream&gt;&gt; (1 samples, 0.11%)</title><rect x="69.9789%" y="181" width="0.1057%" height="15" fill="rgb(207,135,9)" fg:x="662" fg:w="1"/><text x="70.2289%" y="191.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="71.0359%" y="85" width="0.1057%" height="15" fill="rgb(206,86,44)" fg:x="672" fg:w="1"/><text x="71.2859%" y="95.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (10 samples, 1.06%)</title><rect x="70.4017%" y="165" width="1.0571%" height="15" fill="rgb(245,177,15)" fg:x="666" fg:w="10"/><text x="70.6517%" y="175.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (9 samples, 0.95%)</title><rect x="70.5074%" y="149" width="0.9514%" height="15" fill="rgb(206,64,50)" fg:x="667" fg:w="9"/><text x="70.7574%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (7 samples, 0.74%)</title><rect x="70.7188%" y="133" width="0.7400%" height="15" fill="rgb(234,36,40)" fg:x="669" fg:w="7"/><text x="70.9688%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (5 samples, 0.53%)</title><rect x="70.9302%" y="117" width="0.5285%" height="15" fill="rgb(213,64,8)" fg:x="671" fg:w="5"/><text x="71.1802%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (4 samples, 0.42%)</title><rect x="71.0359%" y="101" width="0.4228%" height="15" fill="rgb(210,75,36)" fg:x="672" fg:w="4"/><text x="71.2859%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (3 samples, 0.32%)</title><rect x="71.1416%" y="85" width="0.3171%" height="15" fill="rgb(229,88,21)" fg:x="673" fg:w="3"/><text x="71.3916%" y="95.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.11%)</title><rect x="71.3531%" y="69" width="0.1057%" height="15" fill="rgb(252,204,47)" fg:x="675" fg:w="1"/><text x="71.6031%" y="79.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (15 samples, 1.59%)</title><rect x="70.0846%" y="181" width="1.5856%" height="15" fill="rgb(208,77,27)" fg:x="663" fg:w="15"/><text x="70.3346%" y="191.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.21%)</title><rect x="71.4588%" y="165" width="0.2114%" height="15" fill="rgb(221,76,26)" fg:x="676" fg:w="2"/><text x="71.7088%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="71.8816%" y="165" width="0.1057%" height="15" fill="rgb(225,139,18)" fg:x="680" fg:w="1"/><text x="72.1316%" y="175.50"></text></g><g><title>redis::connection::connection_setup_pipeline (4 samples, 0.42%)</title><rect x="71.6702%" y="181" width="0.4228%" height="15" fill="rgb(230,137,11)" fg:x="678" fg:w="4"/><text x="71.9202%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.11%)</title><rect x="71.9873%" y="165" width="0.1057%" height="15" fill="rgb(212,28,1)" fg:x="681" fg:w="1"/><text x="72.2373%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="71.9873%" y="149" width="0.1057%" height="15" fill="rgb(248,164,17)" fg:x="681" fg:w="1"/><text x="72.2373%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="71.9873%" y="133" width="0.1057%" height="15" fill="rgb(222,171,42)" fg:x="681" fg:w="1"/><text x="72.2373%" y="143.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.11%)</title><rect x="72.0930%" y="181" width="0.1057%" height="15" fill="rgb(243,84,45)" fg:x="682" fg:w="1"/><text x="72.3430%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.11%)</title><rect x="72.0930%" y="165" width="0.1057%" height="15" fill="rgb(252,49,23)" fg:x="682" fg:w="1"/><text x="72.3430%" y="175.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1 samples, 0.11%)</title><rect x="72.1987%" y="181" width="0.1057%" height="15" fill="rgb(215,19,7)" fg:x="683" fg:w="1"/><text x="72.4487%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.11%)</title><rect x="72.1987%" y="165" width="0.1057%" height="15" fill="rgb(238,81,41)" fg:x="683" fg:w="1"/><text x="72.4487%" y="175.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.11%)</title><rect x="72.1987%" y="149" width="0.1057%" height="15" fill="rgb(210,199,37)" fg:x="683" fg:w="1"/><text x="72.4487%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (38 samples, 4.02%)</title><rect x="68.4989%" y="213" width="4.0169%" height="15" fill="rgb(244,192,49)" fg:x="648" fg:w="38"/><text x="68.7489%" y="223.50">redi..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (36 samples, 3.81%)</title><rect x="68.7104%" y="197" width="3.8055%" height="15" fill="rgb(226,211,11)" fg:x="650" fg:w="36"/><text x="68.9604%" y="207.50">redi..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.21%)</title><rect x="72.3044%" y="181" width="0.2114%" height="15" fill="rgb(236,162,54)" fg:x="684" fg:w="2"/><text x="72.5544%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="72.4101%" y="165" width="0.1057%" height="15" fill="rgb(220,229,9)" fg:x="685" fg:w="1"/><text x="72.6601%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (5 samples, 0.53%)</title><rect x="72.9387%" y="181" width="0.5285%" height="15" fill="rgb(250,87,22)" fg:x="690" fg:w="5"/><text x="73.1887%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (3 samples, 0.32%)</title><rect x="73.1501%" y="165" width="0.3171%" height="15" fill="rgb(239,43,17)" fg:x="692" fg:w="3"/><text x="73.4001%" y="175.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="73.3615%" y="149" width="0.1057%" height="15" fill="rgb(231,177,25)" fg:x="694" fg:w="1"/><text x="73.6115%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (6 samples, 0.63%)</title><rect x="72.9387%" y="197" width="0.6342%" height="15" fill="rgb(219,179,1)" fg:x="690" fg:w="6"/><text x="73.1887%" y="207.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="73.4672%" y="181" width="0.1057%" height="15" fill="rgb(238,219,53)" fg:x="695" fg:w="1"/><text x="73.7172%" y="191.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.11%)</title><rect x="73.6786%" y="165" width="0.1057%" height="15" fill="rgb(232,167,36)" fg:x="697" fg:w="1"/><text x="73.9286%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.42%)</title><rect x="73.5729%" y="197" width="0.4228%" height="15" fill="rgb(244,19,51)" fg:x="696" fg:w="4"/><text x="73.8229%" y="207.50"></text></g><g><title>core::fmt::write (4 samples, 0.42%)</title><rect x="73.5729%" y="181" width="0.4228%" height="15" fill="rgb(224,6,22)" fg:x="696" fg:w="4"/><text x="73.8229%" y="191.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (2 samples, 0.21%)</title><rect x="73.7844%" y="165" width="0.2114%" height="15" fill="rgb(224,145,5)" fg:x="698" fg:w="2"/><text x="74.0344%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.1958 (2 samples, 0.21%)</title><rect x="73.7844%" y="149" width="0.2114%" height="15" fill="rgb(234,130,49)" fg:x="698" fg:w="2"/><text x="74.0344%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="73.9958%" y="197" width="0.1057%" height="15" fill="rgb(254,6,2)" fg:x="700" fg:w="1"/><text x="74.2458%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="74.1015%" y="197" width="0.1057%" height="15" fill="rgb(208,96,46)" fg:x="701" fg:w="1"/><text x="74.3515%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (58 samples, 6.13%)</title><rect x="68.1818%" y="229" width="6.1311%" height="15" fill="rgb(239,3,39)" fg:x="645" fg:w="58"/><text x="68.4318%" y="239.50">&lt;rinha_d..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (17 samples, 1.80%)</title><rect x="72.5159%" y="213" width="1.7970%" height="15" fill="rgb(233,210,1)" fg:x="686" fg:w="17"/><text x="72.7659%" y="223.50">r..</text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.11%)</title><rect x="74.2072%" y="197" width="0.1057%" height="15" fill="rgb(244,137,37)" fg:x="702" fg:w="1"/><text x="74.4572%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="75.0529%" y="181" width="0.1057%" height="15" fill="rgb(240,136,2)" fg:x="710" fg:w="1"/><text x="75.3029%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (6 samples, 0.63%)</title><rect x="74.8414%" y="213" width="0.6342%" height="15" fill="rgb(239,18,37)" fg:x="708" fg:w="6"/><text x="75.0914%" y="223.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (4 samples, 0.42%)</title><rect x="75.0529%" y="197" width="0.4228%" height="15" fill="rgb(218,185,22)" fg:x="710" fg:w="4"/><text x="75.3029%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (3 samples, 0.32%)</title><rect x="75.1586%" y="181" width="0.3171%" height="15" fill="rgb(225,218,4)" fg:x="711" fg:w="3"/><text x="75.4086%" y="191.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.21%)</title><rect x="75.2643%" y="165" width="0.2114%" height="15" fill="rgb(230,182,32)" fg:x="712" fg:w="2"/><text x="75.5143%" y="175.50"></text></g><g><title>&lt;time::time::Time as powerfmt::smart_display::SmartDisplay&gt;::metadata (1 samples, 0.11%)</title><rect x="75.4757%" y="197" width="0.1057%" height="15" fill="rgb(242,56,43)" fg:x="714" fg:w="1"/><text x="75.7257%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.11%)</title><rect x="75.6871%" y="149" width="0.1057%" height="15" fill="rgb(233,99,24)" fg:x="716" fg:w="1"/><text x="75.9371%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.11%)</title><rect x="75.7928%" y="149" width="0.1057%" height="15" fill="rgb(234,209,42)" fg:x="717" fg:w="1"/><text x="76.0428%" y="159.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (4 samples, 0.42%)</title><rect x="75.5814%" y="181" width="0.4228%" height="15" fill="rgb(227,7,12)" fg:x="715" fg:w="4"/><text x="75.8314%" y="191.50"></text></g><g><title>core::fmt::write (4 samples, 0.42%)</title><rect x="75.5814%" y="165" width="0.4228%" height="15" fill="rgb(245,203,43)" fg:x="715" fg:w="4"/><text x="75.8314%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1 samples, 0.11%)</title><rect x="75.8985%" y="149" width="0.1057%" height="15" fill="rgb(238,205,33)" fg:x="718" fg:w="1"/><text x="76.1485%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.11%)</title><rect x="76.3214%" y="133" width="0.1057%" height="15" fill="rgb(231,56,7)" fg:x="722" fg:w="1"/><text x="76.5714%" y="143.50"></text></g><g><title>&lt;time::time::Time as core::fmt::Display&gt;::fmt (5 samples, 0.53%)</title><rect x="76.0042%" y="181" width="0.5285%" height="15" fill="rgb(244,186,29)" fg:x="719" fg:w="5"/><text x="76.2542%" y="191.50"></text></g><g><title>core::fmt::write (4 samples, 0.42%)</title><rect x="76.1099%" y="165" width="0.4228%" height="15" fill="rgb(234,111,31)" fg:x="720" fg:w="4"/><text x="76.3599%" y="175.50"></text></g><g><title>&lt;deranged::RangedU8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.21%)</title><rect x="76.3214%" y="149" width="0.2114%" height="15" fill="rgb(241,149,10)" fg:x="722" fg:w="2"/><text x="76.5714%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.11%)</title><rect x="76.4271%" y="133" width="0.1057%" height="15" fill="rgb(249,206,44)" fg:x="723" fg:w="1"/><text x="76.6771%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.11%)</title><rect x="76.4271%" y="117" width="0.1057%" height="15" fill="rgb(251,153,30)" fg:x="723" fg:w="1"/><text x="76.6771%" y="127.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="76.7442%" y="149" width="0.1057%" height="15" fill="rgb(239,152,38)" fg:x="726" fg:w="1"/><text x="76.9942%" y="159.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (16 samples, 1.69%)</title><rect x="75.4757%" y="213" width="1.6913%" height="15" fill="rgb(249,139,47)" fg:x="714" fg:w="16"/><text x="75.7257%" y="223.50"></text></g><g><title>core::fmt::write (15 samples, 1.59%)</title><rect x="75.5814%" y="197" width="1.5856%" height="15" fill="rgb(244,64,35)" fg:x="715" fg:w="15"/><text x="75.8314%" y="207.50"></text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (6 samples, 0.63%)</title><rect x="76.5328%" y="181" width="0.6342%" height="15" fill="rgb(216,46,15)" fg:x="724" fg:w="6"/><text x="76.7828%" y="191.50"></text></g><g><title>core::fmt::write (4 samples, 0.42%)</title><rect x="76.7442%" y="165" width="0.4228%" height="15" fill="rgb(250,74,19)" fg:x="726" fg:w="4"/><text x="76.9942%" y="175.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.32%)</title><rect x="76.8499%" y="149" width="0.3171%" height="15" fill="rgb(249,42,33)" fg:x="727" fg:w="3"/><text x="77.0999%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.21%)</title><rect x="76.9556%" y="133" width="0.2114%" height="15" fill="rgb(242,149,17)" fg:x="728" fg:w="2"/><text x="77.2056%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.11%)</title><rect x="77.0613%" y="117" width="0.1057%" height="15" fill="rgb(244,29,21)" fg:x="729" fg:w="1"/><text x="77.3113%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (1 samples, 0.11%)</title><rect x="77.3784%" y="165" width="0.1057%" height="15" fill="rgb(220,130,37)" fg:x="732" fg:w="1"/><text x="77.6284%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (1 samples, 0.11%)</title><rect x="77.4841%" y="165" width="0.1057%" height="15" fill="rgb(211,67,2)" fg:x="733" fg:w="1"/><text x="77.7341%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (7 samples, 0.74%)</title><rect x="77.1670%" y="213" width="0.7400%" height="15" fill="rgb(235,68,52)" fg:x="730" fg:w="7"/><text x="77.4170%" y="223.50"></text></g><g><title>core::fmt::write (6 samples, 0.63%)</title><rect x="77.2727%" y="197" width="0.6342%" height="15" fill="rgb(246,142,3)" fg:x="731" fg:w="6"/><text x="77.5227%" y="207.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (6 samples, 0.63%)</title><rect x="77.2727%" y="181" width="0.6342%" height="15" fill="rgb(241,25,7)" fg:x="731" fg:w="6"/><text x="77.5227%" y="191.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (3 samples, 0.32%)</title><rect x="77.5899%" y="165" width="0.3171%" height="15" fill="rgb(242,119,39)" fg:x="734" fg:w="3"/><text x="77.8399%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.21%)</title><rect x="77.9070%" y="213" width="0.2114%" height="15" fill="rgb(241,98,45)" fg:x="737" fg:w="2"/><text x="78.1570%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="78.0127%" y="197" width="0.1057%" height="15" fill="rgb(254,28,30)" fg:x="738" fg:w="1"/><text x="78.2627%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.11%)</title><rect x="78.1184%" y="213" width="0.1057%" height="15" fill="rgb(241,142,54)" fg:x="739" fg:w="1"/><text x="78.3684%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.11%)</title><rect x="78.1184%" y="197" width="0.1057%" height="15" fill="rgb(222,85,15)" fg:x="739" fg:w="1"/><text x="78.3684%" y="207.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for i128&gt;::write (1 samples, 0.11%)</title><rect x="78.2241%" y="213" width="0.1057%" height="15" fill="rgb(210,85,47)" fg:x="740" fg:w="1"/><text x="78.4741%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.21%)</title><rect x="78.9641%" y="165" width="0.2114%" height="15" fill="rgb(224,206,25)" fg:x="747" fg:w="2"/><text x="79.2141%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.11%)</title><rect x="79.0698%" y="149" width="0.1057%" height="15" fill="rgb(243,201,19)" fg:x="748" fg:w="1"/><text x="79.3198%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.11%)</title><rect x="79.1755%" y="165" width="0.1057%" height="15" fill="rgb(236,59,4)" fg:x="749" fg:w="1"/><text x="79.4255%" y="175.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 0.53%)</title><rect x="78.8584%" y="181" width="0.5285%" height="15" fill="rgb(254,179,45)" fg:x="746" fg:w="5"/><text x="79.1084%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="79.2812%" y="165" width="0.1057%" height="15" fill="rgb(226,14,10)" fg:x="750" fg:w="1"/><text x="79.5312%" y="175.50"></text></g><g><title>__connect (2 samples, 0.21%)</title><rect x="79.3869%" y="181" width="0.2114%" height="15" fill="rgb(244,27,41)" fg:x="751" fg:w="2"/><text x="79.6369%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream::connect&lt;&amp;core::net::socket_addr::SocketAddr&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="79.5983%" y="181" width="0.1057%" height="15" fill="rgb(235,35,32)" fg:x="753" fg:w="1"/><text x="79.8483%" y="191.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.53%)</title><rect x="79.8097%" y="165" width="0.5285%" height="15" fill="rgb(218,68,31)" fg:x="755" fg:w="5"/><text x="80.0597%" y="175.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (3 samples, 0.32%)</title><rect x="80.0211%" y="149" width="0.3171%" height="15" fill="rgb(207,120,37)" fg:x="757" fg:w="3"/><text x="80.2711%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (2 samples, 0.21%)</title><rect x="80.1268%" y="133" width="0.2114%" height="15" fill="rgb(227,98,0)" fg:x="758" fg:w="2"/><text x="80.3768%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.11%)</title><rect x="80.2326%" y="117" width="0.1057%" height="15" fill="rgb(207,7,3)" fg:x="759" fg:w="1"/><text x="80.4826%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.11%)</title><rect x="80.2326%" y="101" width="0.1057%" height="15" fill="rgb(206,98,19)" fg:x="759" fg:w="1"/><text x="80.4826%" y="111.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (3 samples, 0.32%)</title><rect x="80.3383%" y="165" width="0.3171%" height="15" fill="rgb(217,5,26)" fg:x="760" fg:w="3"/><text x="80.5883%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (1 samples, 0.11%)</title><rect x="80.5497%" y="149" width="0.1057%" height="15" fill="rgb(235,190,38)" fg:x="762" fg:w="1"/><text x="80.7997%" y="159.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (10 samples, 1.06%)</title><rect x="79.7040%" y="181" width="1.0571%" height="15" fill="rgb(247,86,24)" fg:x="754" fg:w="10"/><text x="79.9540%" y="191.50"></text></g><g><title>redis::pipeline::encode_pipeline (1 samples, 0.11%)</title><rect x="80.6554%" y="165" width="0.1057%" height="15" fill="rgb(205,101,16)" fg:x="763" fg:w="1"/><text x="80.9054%" y="175.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="80.6554%" y="149" width="0.1057%" height="15" fill="rgb(246,168,33)" fg:x="763" fg:w="1"/><text x="80.9054%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="80.8668%" y="165" width="0.1057%" height="15" fill="rgb(231,114,1)" fg:x="765" fg:w="1"/><text x="81.1168%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="80.8668%" y="149" width="0.1057%" height="15" fill="rgb(207,184,53)" fg:x="765" fg:w="1"/><text x="81.1168%" y="159.50"></text></g><g><title>redis::connection::connection_setup_pipeline (4 samples, 0.42%)</title><rect x="80.7611%" y="181" width="0.4228%" height="15" fill="rgb(224,95,51)" fg:x="764" fg:w="4"/><text x="81.0111%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.21%)</title><rect x="80.9725%" y="165" width="0.2114%" height="15" fill="rgb(212,188,45)" fg:x="766" fg:w="2"/><text x="81.2225%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="81.0782%" y="149" width="0.1057%" height="15" fill="rgb(223,154,38)" fg:x="767" fg:w="1"/><text x="81.3282%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="81.0782%" y="133" width="0.1057%" height="15" fill="rgb(251,22,52)" fg:x="767" fg:w="1"/><text x="81.3282%" y="143.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.11%)</title><rect x="81.1839%" y="181" width="0.1057%" height="15" fill="rgb(229,209,22)" fg:x="768" fg:w="1"/><text x="81.4339%" y="191.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.11%)</title><rect x="81.2896%" y="181" width="0.1057%" height="15" fill="rgb(234,138,34)" fg:x="769" fg:w="1"/><text x="81.5396%" y="191.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (30 samples, 3.17%)</title><rect x="78.3298%" y="213" width="3.1712%" height="15" fill="rgb(212,95,11)" fg:x="741" fg:w="30"/><text x="78.5798%" y="223.50">red..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (28 samples, 2.96%)</title><rect x="78.5412%" y="197" width="2.9598%" height="15" fill="rgb(240,179,47)" fg:x="743" fg:w="28"/><text x="78.7912%" y="207.50">red..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="81.3953%" y="181" width="0.1057%" height="15" fill="rgb(240,163,11)" fg:x="770" fg:w="1"/><text x="81.6453%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (70 samples, 7.40%)</title><rect x="74.3129%" y="229" width="7.3996%" height="15" fill="rgb(236,37,12)" fg:x="703" fg:w="70"/><text x="74.5629%" y="239.50">&lt;rinha_de_..</text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (2 samples, 0.21%)</title><rect x="81.5011%" y="213" width="0.2114%" height="15" fill="rgb(232,164,16)" fg:x="771" fg:w="2"/><text x="81.7511%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="81.6068%" y="197" width="0.1057%" height="15" fill="rgb(244,205,15)" fg:x="772" fg:w="1"/><text x="81.8568%" y="207.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.32%)</title><rect x="82.1353%" y="213" width="0.3171%" height="15" fill="rgb(223,117,47)" fg:x="777" fg:w="3"/><text x="82.3853%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.11%)</title><rect x="82.3467%" y="197" width="0.1057%" height="15" fill="rgb(244,107,35)" fg:x="779" fg:w="1"/><text x="82.5967%" y="207.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.11%)</title><rect x="82.3467%" y="181" width="0.1057%" height="15" fill="rgb(205,140,8)" fg:x="779" fg:w="1"/><text x="82.5967%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (3 samples, 0.32%)</title><rect x="82.4524%" y="213" width="0.3171%" height="15" fill="rgb(228,84,46)" fg:x="780" fg:w="3"/><text x="82.7024%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="82.7696%" y="213" width="0.1057%" height="15" fill="rgb(254,188,9)" fg:x="783" fg:w="1"/><text x="83.0196%" y="223.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.11%)</title><rect x="82.7696%" y="197" width="0.1057%" height="15" fill="rgb(206,112,54)" fg:x="783" fg:w="1"/><text x="83.0196%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::commands::AsyncCommands&gt;::brpop&lt;&amp;str,core::option::Option&lt;(alloc::string::String,alloc::string::String)&gt;&gt;::{{closure}}&gt; (2 samples, 0.21%)</title><rect x="82.8753%" y="213" width="0.2114%" height="15" fill="rgb(216,84,49)" fg:x="784" fg:w="2"/><text x="83.1253%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.11%)</title><rect x="84.6723%" y="149" width="0.1057%" height="15" fill="rgb(214,194,35)" fg:x="801" fg:w="1"/><text x="84.9223%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.21%)</title><rect x="84.6723%" y="165" width="0.2114%" height="15" fill="rgb(249,28,3)" fg:x="801" fg:w="2"/><text x="84.9223%" y="175.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.11%)</title><rect x="84.7780%" y="149" width="0.1057%" height="15" fill="rgb(222,56,52)" fg:x="802" fg:w="1"/><text x="85.0280%" y="159.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.63%)</title><rect x="84.3552%" y="181" width="0.6342%" height="15" fill="rgb(245,217,50)" fg:x="798" fg:w="6"/><text x="84.6052%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="84.8837%" y="165" width="0.1057%" height="15" fill="rgb(213,201,24)" fg:x="803" fg:w="1"/><text x="85.1337%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.11%)</title><rect x="84.8837%" y="149" width="0.1057%" height="15" fill="rgb(248,116,28)" fg:x="803" fg:w="1"/><text x="85.1337%" y="159.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.11%)</title><rect x="84.8837%" y="133" width="0.1057%" height="15" fill="rgb(219,72,43)" fg:x="803" fg:w="1"/><text x="85.1337%" y="143.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.11%)</title><rect x="85.5180%" y="101" width="0.1057%" height="15" fill="rgb(209,138,14)" fg:x="809" fg:w="1"/><text x="85.7680%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.11%)</title><rect x="85.5180%" y="85" width="0.1057%" height="15" fill="rgb(222,18,33)" fg:x="809" fg:w="1"/><text x="85.7680%" y="95.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.63%)</title><rect x="85.0951%" y="165" width="0.6342%" height="15" fill="rgb(213,199,7)" fg:x="805" fg:w="6"/><text x="85.3451%" y="175.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (4 samples, 0.42%)</title><rect x="85.3066%" y="149" width="0.4228%" height="15" fill="rgb(250,110,10)" fg:x="807" fg:w="4"/><text x="85.5566%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (4 samples, 0.42%)</title><rect x="85.3066%" y="133" width="0.4228%" height="15" fill="rgb(248,123,6)" fg:x="807" fg:w="4"/><text x="85.5566%" y="143.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.32%)</title><rect x="85.4123%" y="117" width="0.3171%" height="15" fill="rgb(206,91,31)" fg:x="808" fg:w="3"/><text x="85.6623%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="85.6237%" y="101" width="0.1057%" height="15" fill="rgb(211,154,13)" fg:x="810" fg:w="1"/><text x="85.8737%" y="111.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.21%)</title><rect x="85.7294%" y="165" width="0.2114%" height="15" fill="rgb(225,148,7)" fg:x="811" fg:w="2"/><text x="85.9794%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.11%)</title><rect x="85.8351%" y="149" width="0.1057%" height="15" fill="rgb(220,160,43)" fg:x="812" fg:w="1"/><text x="86.0851%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="85.8351%" y="133" width="0.1057%" height="15" fill="rgb(213,52,39)" fg:x="812" fg:w="1"/><text x="86.0851%" y="143.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.11%)</title><rect x="85.8351%" y="117" width="0.1057%" height="15" fill="rgb(243,137,7)" fg:x="812" fg:w="1"/><text x="86.0851%" y="127.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (10 samples, 1.06%)</title><rect x="84.9894%" y="181" width="1.0571%" height="15" fill="rgb(230,79,13)" fg:x="804" fg:w="10"/><text x="85.2394%" y="191.50"></text></g><g><title>redis::pipeline::encode_pipeline (1 samples, 0.11%)</title><rect x="85.9408%" y="165" width="0.1057%" height="15" fill="rgb(247,105,23)" fg:x="813" fg:w="1"/><text x="86.1908%" y="175.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="85.9408%" y="149" width="0.1057%" height="15" fill="rgb(223,179,41)" fg:x="813" fg:w="1"/><text x="86.1908%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="86.2579%" y="165" width="0.1057%" height="15" fill="rgb(218,9,34)" fg:x="816" fg:w="1"/><text x="86.5079%" y="175.50"></text></g><g><title>redis::connection::connection_setup_pipeline (5 samples, 0.53%)</title><rect x="86.0465%" y="181" width="0.5285%" height="15" fill="rgb(222,106,8)" fg:x="814" fg:w="5"/><text x="86.2965%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.21%)</title><rect x="86.3636%" y="165" width="0.2114%" height="15" fill="rgb(211,220,0)" fg:x="817" fg:w="2"/><text x="86.6136%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="86.4693%" y="149" width="0.1057%" height="15" fill="rgb(229,52,16)" fg:x="818" fg:w="1"/><text x="86.7193%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="86.4693%" y="133" width="0.1057%" height="15" fill="rgb(212,155,18)" fg:x="818" fg:w="1"/><text x="86.7193%" y="143.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (1 samples, 0.11%)</title><rect x="86.5751%" y="181" width="0.1057%" height="15" fill="rgb(242,21,14)" fg:x="819" fg:w="1"/><text x="86.8251%" y="191.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (36 samples, 3.81%)</title><rect x="83.0867%" y="213" width="3.8055%" height="15" fill="rgb(222,19,48)" fg:x="786" fg:w="36"/><text x="83.3367%" y="223.50">redi..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (34 samples, 3.59%)</title><rect x="83.2981%" y="197" width="3.5941%" height="15" fill="rgb(232,45,27)" fg:x="788" fg:w="34"/><text x="83.5481%" y="207.50">redi..</text></g><g><title>tokio::net::tcp::stream::TcpStream::new (2 samples, 0.21%)</title><rect x="86.6808%" y="181" width="0.2114%" height="15" fill="rgb(249,103,42)" fg:x="820" fg:w="2"/><text x="86.9308%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.11%)</title><rect x="86.7865%" y="165" width="0.1057%" height="15" fill="rgb(246,81,33)" fg:x="821" fg:w="1"/><text x="87.0365%" y="175.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (2 samples, 0.21%)</title><rect x="86.9979%" y="197" width="0.2114%" height="15" fill="rgb(252,33,42)" fg:x="823" fg:w="2"/><text x="87.2479%" y="207.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_owned_redis_value (1 samples, 0.11%)</title><rect x="87.1036%" y="181" width="0.1057%" height="15" fill="rgb(209,212,41)" fg:x="824" fg:w="1"/><text x="87.3536%" y="191.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="87.1036%" y="165" width="0.1057%" height="15" fill="rgb(207,154,6)" fg:x="824" fg:w="1"/><text x="87.3536%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (2 samples, 0.21%)</title><rect x="87.3150%" y="181" width="0.2114%" height="15" fill="rgb(223,64,47)" fg:x="826" fg:w="2"/><text x="87.5650%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="87.4207%" y="165" width="0.1057%" height="15" fill="rgb(211,161,38)" fg:x="827" fg:w="1"/><text x="87.6707%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (4 samples, 0.42%)</title><rect x="87.2093%" y="197" width="0.4228%" height="15" fill="rgb(219,138,40)" fg:x="825" fg:w="4"/><text x="87.4593%" y="207.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="87.5264%" y="181" width="0.1057%" height="15" fill="rgb(241,228,46)" fg:x="828" fg:w="1"/><text x="87.7764%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="87.6321%" y="197" width="0.1057%" height="15" fill="rgb(223,209,38)" fg:x="829" fg:w="1"/><text x="87.8821%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (58 samples, 6.13%)</title><rect x="81.7125%" y="229" width="6.1311%" height="15" fill="rgb(236,164,45)" fg:x="773" fg:w="58"/><text x="81.9625%" y="239.50">&lt;rinha_d..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (9 samples, 0.95%)</title><rect x="86.8922%" y="213" width="0.9514%" height="15" fill="rgb(231,15,5)" fg:x="822" fg:w="9"/><text x="87.1422%" y="223.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.11%)</title><rect x="87.7378%" y="197" width="0.1057%" height="15" fill="rgb(252,35,15)" fg:x="830" fg:w="1"/><text x="87.9878%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.11%)</title><rect x="87.7378%" y="181" width="0.1057%" height="15" fill="rgb(248,181,18)" fg:x="830" fg:w="1"/><text x="87.9878%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.21%)</title><rect x="88.3721%" y="165" width="0.2114%" height="15" fill="rgb(233,39,42)" fg:x="836" fg:w="2"/><text x="88.6221%" y="175.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (7 samples, 0.74%)</title><rect x="87.9493%" y="213" width="0.7400%" height="15" fill="rgb(238,110,33)" fg:x="832" fg:w="7"/><text x="88.1993%" y="223.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (7 samples, 0.74%)</title><rect x="87.9493%" y="197" width="0.7400%" height="15" fill="rgb(233,195,10)" fg:x="832" fg:w="7"/><text x="88.1993%" y="207.50"></text></g><g><title>redis::connection::connection_setup_pipeline (3 samples, 0.32%)</title><rect x="88.3721%" y="181" width="0.3171%" height="15" fill="rgb(254,105,3)" fg:x="836" fg:w="3"/><text x="88.6221%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.11%)</title><rect x="88.5835%" y="165" width="0.1057%" height="15" fill="rgb(221,225,9)" fg:x="838" fg:w="1"/><text x="88.8335%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="88.5835%" y="149" width="0.1057%" height="15" fill="rgb(224,227,45)" fg:x="838" fg:w="1"/><text x="88.8335%" y="159.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (10 samples, 1.06%)</title><rect x="87.8436%" y="229" width="1.0571%" height="15" fill="rgb(229,198,43)" fg:x="831" fg:w="10"/><text x="88.0936%" y="239.50"></text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (2 samples, 0.21%)</title><rect x="88.6892%" y="213" width="0.2114%" height="15" fill="rgb(206,209,35)" fg:x="839" fg:w="2"/><text x="88.9392%" y="223.50"></text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (2 samples, 0.21%)</title><rect x="88.6892%" y="197" width="0.2114%" height="15" fill="rgb(245,195,53)" fg:x="839" fg:w="2"/><text x="88.9392%" y="207.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (2 samples, 0.21%)</title><rect x="88.6892%" y="181" width="0.2114%" height="15" fill="rgb(240,92,26)" fg:x="839" fg:w="2"/><text x="88.9392%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (2 samples, 0.21%)</title><rect x="88.6892%" y="165" width="0.2114%" height="15" fill="rgb(207,40,23)" fg:x="839" fg:w="2"/><text x="88.9392%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="88.7949%" y="149" width="0.1057%" height="15" fill="rgb(223,111,35)" fg:x="840" fg:w="1"/><text x="89.0449%" y="159.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::routing::in_memory_payment_router::InMemoryPaymentRouter as rinha_de_backend::domain::payment_router::PaymentRouter&gt;::get_processor_for_payment::{{closure}} (1 samples, 0.11%)</title><rect x="88.9006%" y="229" width="0.1057%" height="15" fill="rgb(229,147,28)" fg:x="841" fg:w="1"/><text x="89.1506%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.11%)</title><rect x="89.0063%" y="229" width="0.1057%" height="15" fill="rgb(211,29,28)" fg:x="842" fg:w="1"/><text x="89.2563%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (1 samples, 0.11%)</title><rect x="89.0063%" y="213" width="0.1057%" height="15" fill="rgb(228,72,33)" fg:x="842" fg:w="1"/><text x="89.2563%" y="223.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.11%)</title><rect x="89.1121%" y="229" width="0.1057%" height="15" fill="rgb(205,214,31)" fg:x="843" fg:w="1"/><text x="89.3621%" y="239.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (2 samples, 0.21%)</title><rect x="89.2178%" y="229" width="0.2114%" height="15" fill="rgb(224,111,15)" fg:x="844" fg:w="2"/><text x="89.4678%" y="239.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.21%)</title><rect x="90.1691%" y="213" width="0.2114%" height="15" fill="rgb(253,21,26)" fg:x="853" fg:w="2"/><text x="90.4191%" y="223.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.21%)</title><rect x="90.3805%" y="213" width="0.2114%" height="15" fill="rgb(245,139,43)" fg:x="855" fg:w="2"/><text x="90.6305%" y="223.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="90.5920%" y="197" width="0.1057%" height="15" fill="rgb(252,170,7)" fg:x="857" fg:w="1"/><text x="90.8420%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="90.5920%" y="181" width="0.1057%" height="15" fill="rgb(231,118,14)" fg:x="857" fg:w="1"/><text x="90.8420%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4100 (1 samples, 0.11%)</title><rect x="90.5920%" y="165" width="0.1057%" height="15" fill="rgb(238,83,0)" fg:x="857" fg:w="1"/><text x="90.8420%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="90.5920%" y="149" width="0.1057%" height="15" fill="rgb(221,39,39)" fg:x="857" fg:w="1"/><text x="90.8420%" y="159.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (4 samples, 0.42%)</title><rect x="90.5920%" y="213" width="0.4228%" height="15" fill="rgb(222,119,46)" fg:x="857" fg:w="4"/><text x="90.8420%" y="223.50"></text></g><g><title>url::ParseOptions::parse (3 samples, 0.32%)</title><rect x="90.6977%" y="197" width="0.3171%" height="15" fill="rgb(222,165,49)" fg:x="858" fg:w="3"/><text x="90.9477%" y="207.50"></text></g><g><title>url::parser::Parser::after_double_slash (2 samples, 0.21%)</title><rect x="90.8034%" y="181" width="0.2114%" height="15" fill="rgb(219,113,52)" fg:x="859" fg:w="2"/><text x="91.0534%" y="191.50"></text></g><g><title>url::host::Host::parse (2 samples, 0.21%)</title><rect x="90.8034%" y="165" width="0.2114%" height="15" fill="rgb(214,7,15)" fg:x="859" fg:w="2"/><text x="91.0534%" y="175.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (2 samples, 0.21%)</title><rect x="90.8034%" y="149" width="0.2114%" height="15" fill="rgb(235,32,4)" fg:x="859" fg:w="2"/><text x="91.0534%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="91.0148%" y="213" width="0.1057%" height="15" fill="rgb(238,90,54)" fg:x="861" fg:w="1"/><text x="91.2648%" y="223.50"></text></g><g><title>http::header::map::VacantEntry&lt;T&gt;::try_insert (2 samples, 0.21%)</title><rect x="91.1205%" y="213" width="0.2114%" height="15" fill="rgb(213,208,19)" fg:x="862" fg:w="2"/><text x="91.3705%" y="223.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.11%)</title><rect x="91.3319%" y="213" width="0.1057%" height="15" fill="rgb(233,156,4)" fg:x="864" fg:w="1"/><text x="91.5819%" y="223.50"></text></g><g><title>http::uri::Uri::from_shared (3 samples, 0.32%)</title><rect x="91.4376%" y="213" width="0.3171%" height="15" fill="rgb(207,194,5)" fg:x="865" fg:w="3"/><text x="91.6876%" y="223.50"></text></g><g><title>bytes::bytes::Bytes::split_to (1 samples, 0.11%)</title><rect x="91.6490%" y="197" width="0.1057%" height="15" fill="rgb(206,111,30)" fg:x="867" fg:w="1"/><text x="91.8990%" y="207.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.11%)</title><rect x="91.6490%" y="181" width="0.1057%" height="15" fill="rgb(243,70,54)" fg:x="867" fg:w="1"/><text x="91.8990%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.11%)</title><rect x="92.0719%" y="181" width="0.1057%" height="15" fill="rgb(242,28,8)" fg:x="871" fg:w="1"/><text x="92.3219%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.11%)</title><rect x="92.0719%" y="165" width="0.1057%" height="15" fill="rgb(219,106,18)" fg:x="871" fg:w="1"/><text x="92.3219%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.11%)</title><rect x="92.0719%" y="149" width="0.1057%" height="15" fill="rgb(244,222,10)" fg:x="871" fg:w="1"/><text x="92.3219%" y="159.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (28 samples, 2.96%)</title><rect x="89.4292%" y="229" width="2.9598%" height="15" fill="rgb(236,179,52)" fg:x="846" fg:w="28"/><text x="89.6792%" y="239.50">req..</text></g><g><title>reqwest::proxy::Matcher::intercept (6 samples, 0.63%)</title><rect x="91.7548%" y="213" width="0.6342%" height="15" fill="rgb(213,23,39)" fg:x="868" fg:w="6"/><text x="92.0048%" y="223.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (5 samples, 0.53%)</title><rect x="91.8605%" y="197" width="0.5285%" height="15" fill="rgb(238,48,10)" fg:x="869" fg:w="5"/><text x="92.1105%" y="207.50"></text></g><g><title>http::uri::authority::host (2 samples, 0.21%)</title><rect x="92.1776%" y="181" width="0.2114%" height="15" fill="rgb(251,196,23)" fg:x="872" fg:w="2"/><text x="92.4276%" y="191.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (2 samples, 0.21%)</title><rect x="92.1776%" y="165" width="0.2114%" height="15" fill="rgb(250,152,24)" fg:x="872" fg:w="2"/><text x="92.4276%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (2 samples, 0.21%)</title><rect x="92.1776%" y="149" width="0.2114%" height="15" fill="rgb(209,150,17)" fg:x="872" fg:w="2"/><text x="92.4276%" y="159.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.11%)</title><rect x="92.2833%" y="133" width="0.1057%" height="15" fill="rgb(234,202,34)" fg:x="873" fg:w="1"/><text x="92.5333%" y="143.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.11%)</title><rect x="92.3890%" y="229" width="0.1057%" height="15" fill="rgb(253,148,53)" fg:x="874" fg:w="1"/><text x="92.6390%" y="239.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.11%)</title><rect x="92.3890%" y="213" width="0.1057%" height="15" fill="rgb(218,129,16)" fg:x="874" fg:w="1"/><text x="92.6390%" y="223.50"></text></g><g><title>time::serde::rfc3339::option::serialize (3 samples, 0.32%)</title><rect x="92.4947%" y="229" width="0.3171%" height="15" fill="rgb(216,85,19)" fg:x="875" fg:w="3"/><text x="92.7447%" y="239.50"></text></g><g><title>time::formatting::format_number_pad_zero (1 samples, 0.11%)</title><rect x="92.7061%" y="213" width="0.1057%" height="15" fill="rgb(235,228,7)" fg:x="877" fg:w="1"/><text x="92.9561%" y="223.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (307 samples, 32.45%)</title><rect x="60.4651%" y="245" width="32.4524%" height="15" fill="rgb(245,175,0)" fg:x="572" fg:w="307"/><text x="60.7151%" y="255.50">rinha_de_backend::infrastructure::workers::payment_pr..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (1 samples, 0.11%)</title><rect x="92.8118%" y="229" width="0.1057%" height="15" fill="rgb(208,168,36)" fg:x="878" fg:w="1"/><text x="93.0618%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.11%)</title><rect x="92.8118%" y="213" width="0.1057%" height="15" fill="rgb(246,171,24)" fg:x="878" fg:w="1"/><text x="93.0618%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="92.8118%" y="197" width="0.1057%" height="15" fill="rgb(215,142,24)" fg:x="878" fg:w="1"/><text x="93.0618%" y="207.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::processor_health_monitor_worker::processor_health_monitor_worker::{{closure}} (1 samples, 0.11%)</title><rect x="92.9175%" y="245" width="0.1057%" height="15" fill="rgb(250,187,7)" fg:x="879" fg:w="1"/><text x="93.1675%" y="255.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="92.9175%" y="229" width="0.1057%" height="15" fill="rgb(228,66,33)" fg:x="879" fg:w="1"/><text x="93.1675%" y="239.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (1 samples, 0.11%)</title><rect x="92.9175%" y="213" width="0.1057%" height="15" fill="rgb(234,215,21)" fg:x="879" fg:w="1"/><text x="93.1675%" y="223.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}}::Guard&lt;T,S&gt;::drain (1 samples, 0.11%)</title><rect x="93.4461%" y="213" width="0.1057%" height="15" fill="rgb(222,191,20)" fg:x="884" fg:w="1"/><text x="93.6961%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.11%)</title><rect x="93.4461%" y="197" width="0.1057%" height="15" fill="rgb(245,79,54)" fg:x="884" fg:w="1"/><text x="93.6961%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="93.5518%" y="213" width="0.1057%" height="15" fill="rgb(240,10,37)" fg:x="885" fg:w="1"/><text x="93.8018%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (3 samples, 0.32%)</title><rect x="94.0803%" y="197" width="0.3171%" height="15" fill="rgb(214,192,32)" fg:x="890" fg:w="3"/><text x="94.3303%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="94.8203%" y="181" width="0.1057%" height="15" fill="rgb(209,36,54)" fg:x="897" fg:w="1"/><text x="95.0703%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="94.8203%" y="165" width="0.1057%" height="15" fill="rgb(220,10,11)" fg:x="897" fg:w="1"/><text x="95.0703%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (13 samples, 1.37%)</title><rect x="93.6575%" y="213" width="1.3742%" height="15" fill="rgb(221,106,17)" fg:x="886" fg:w="13"/><text x="93.9075%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (6 samples, 0.63%)</title><rect x="94.3975%" y="197" width="0.6342%" height="15" fill="rgb(251,142,44)" fg:x="893" fg:w="6"/><text x="94.6475%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.11%)</title><rect x="94.9260%" y="181" width="0.1057%" height="15" fill="rgb(238,13,15)" fg:x="898" fg:w="1"/><text x="95.1760%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (21 samples, 2.22%)</title><rect x="93.0233%" y="245" width="2.2199%" height="15" fill="rgb(208,107,27)" fg:x="880" fg:w="21"/><text x="93.2733%" y="255.50">t..</text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (18 samples, 1.90%)</title><rect x="93.3404%" y="229" width="1.9027%" height="15" fill="rgb(205,136,37)" fg:x="883" fg:w="18"/><text x="93.5904%" y="239.50">c..</text></g><g><title>tokio::sync::notify::Notify::notify_waiters (2 samples, 0.21%)</title><rect x="95.0317%" y="213" width="0.2114%" height="15" fill="rgb(250,205,27)" fg:x="899" fg:w="2"/><text x="95.2817%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::release (2 samples, 0.21%)</title><rect x="95.2431%" y="229" width="0.2114%" height="15" fill="rgb(210,80,43)" fg:x="901" fg:w="2"/><text x="95.4931%" y="239.50"></text></g><g><title>rinha-de-backen (688 samples, 72.73%)</title><rect x="22.8330%" y="357" width="72.7273%" height="15" fill="rgb(247,160,36)" fg:x="216" fg:w="688"/><text x="23.0830%" y="367.50">rinha-de-backen</text></g><g><title>_start (688 samples, 72.73%)</title><rect x="22.8330%" y="341" width="72.7273%" height="15" fill="rgb(234,13,49)" fg:x="216" fg:w="688"/><text x="23.0830%" y="351.50">_start</text></g><g><title>__libc_start_main (688 samples, 72.73%)</title><rect x="22.8330%" y="325" width="72.7273%" height="15" fill="rgb(234,122,0)" fg:x="216" fg:w="688"/><text x="23.0830%" y="335.50">__libc_start_main</text></g><g><title>main (688 samples, 72.73%)</title><rect x="22.8330%" y="309" width="72.7273%" height="15" fill="rgb(207,146,38)" fg:x="216" fg:w="688"/><text x="23.0830%" y="319.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (688 samples, 72.73%)</title><rect x="22.8330%" y="293" width="72.7273%" height="15" fill="rgb(207,177,25)" fg:x="216" fg:w="688"/><text x="23.0830%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (688 samples, 72.73%)</title><rect x="22.8330%" y="277" width="72.7273%" height="15" fill="rgb(211,178,42)" fg:x="216" fg:w="688"/><text x="23.0830%" y="287.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (580 samples, 61.31%)</title><rect x="34.2495%" y="261" width="61.3108%" height="15" fill="rgb(230,69,54)" fg:x="324" fg:w="580"/><text x="34.4995%" y="271.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (3 samples, 0.32%)</title><rect x="95.2431%" y="245" width="0.3171%" height="15" fill="rgb(214,135,41)" fg:x="901" fg:w="3"/><text x="95.4931%" y="255.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.11%)</title><rect x="95.4545%" y="229" width="0.1057%" height="15" fill="rgb(237,67,25)" fg:x="903" fg:w="1"/><text x="95.7045%" y="239.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 0.63%)</title><rect x="95.9831%" y="277" width="0.6342%" height="15" fill="rgb(222,189,50)" fg:x="908" fg:w="6"/><text x="96.2331%" y="287.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (2 samples, 0.21%)</title><rect x="96.8288%" y="261" width="0.2114%" height="15" fill="rgb(245,148,34)" fg:x="916" fg:w="2"/><text x="97.0788%" y="271.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.11%)</title><rect x="96.9345%" y="245" width="0.1057%" height="15" fill="rgb(222,29,6)" fg:x="917" fg:w="1"/><text x="97.1845%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (10 samples, 1.06%)</title><rect x="96.6173%" y="277" width="1.0571%" height="15" fill="rgb(221,189,43)" fg:x="914" fg:w="10"/><text x="96.8673%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (6 samples, 0.63%)</title><rect x="97.0402%" y="261" width="0.6342%" height="15" fill="rgb(207,36,27)" fg:x="918" fg:w="6"/><text x="97.2902%" y="271.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (1 samples, 0.11%)</title><rect x="98.9429%" y="245" width="0.1057%" height="15" fill="rgb(217,90,24)" fg:x="936" fg:w="1"/><text x="99.1929%" y="255.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (3 samples, 0.32%)</title><rect x="99.0486%" y="245" width="0.3171%" height="15" fill="rgb(224,66,35)" fg:x="937" fg:w="3"/><text x="99.2986%" y="255.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (11 samples, 1.16%)</title><rect x="98.4144%" y="261" width="1.1628%" height="15" fill="rgb(221,13,50)" fg:x="931" fg:w="11"/><text x="98.6644%" y="271.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (2 samples, 0.21%)</title><rect x="99.3658%" y="245" width="0.2114%" height="15" fill="rgb(236,68,49)" fg:x="940" fg:w="2"/><text x="99.6158%" y="255.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.11%)</title><rect x="99.4715%" y="229" width="0.1057%" height="15" fill="rgb(229,146,28)" fg:x="941" fg:w="1"/><text x="99.7215%" y="239.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (1 samples, 0.11%)</title><rect x="99.4715%" y="213" width="0.1057%" height="15" fill="rgb(225,31,38)" fg:x="941" fg:w="1"/><text x="99.7215%" y="223.50"></text></g><g><title>all (946 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(250,208,3)" fg:x="0" fg:w="946"/><text x="0.2500%" y="383.50"></text></g><g><title>tokio-runtime-w (42 samples, 4.44%)</title><rect x="95.5603%" y="357" width="4.4397%" height="15" fill="rgb(246,54,23)" fg:x="904" fg:w="42"/><text x="95.8103%" y="367.50">tokio..</text></g><g><title>__clone (42 samples, 4.44%)</title><rect x="95.5603%" y="341" width="4.4397%" height="15" fill="rgb(243,76,11)" fg:x="904" fg:w="42"/><text x="95.8103%" y="351.50">__clo..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (42 samples, 4.44%)</title><rect x="95.5603%" y="325" width="4.4397%" height="15" fill="rgb(245,21,50)" fg:x="904" fg:w="42"/><text x="95.8103%" y="335.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (42 samples, 4.44%)</title><rect x="95.5603%" y="309" width="4.4397%" height="15" fill="rgb(228,9,43)" fg:x="904" fg:w="42"/><text x="95.8103%" y="319.50">core:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (42 samples, 4.44%)</title><rect x="95.5603%" y="293" width="4.4397%" height="15" fill="rgb(208,100,47)" fg:x="904" fg:w="42"/><text x="95.8103%" y="303.50">std::..</text></g><g><title>tokio::runtime::task::raw::poll (22 samples, 2.33%)</title><rect x="97.6744%" y="277" width="2.3256%" height="15" fill="rgb(232,26,8)" fg:x="924" fg:w="22"/><text x="97.9244%" y="287.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (4 samples, 0.42%)</title><rect x="99.5772%" y="261" width="0.4228%" height="15" fill="rgb(216,166,38)" fg:x="942" fg:w="4"/><text x="99.8272%" y="271.50"></text></g></svg></svg>