<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="907"><g><title>tokio::runtime::driver::Driver::park (3 samples, 0.33%)</title><rect x="0.3308%" y="229" width="0.3308%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="3"/><text x="0.5808%" y="239.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (4 samples, 0.44%)</title><rect x="0.6615%" y="229" width="0.4410%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="4"/><text x="0.9115%" y="239.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.22%)</title><rect x="0.8820%" y="213" width="0.2205%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="2"/><text x="1.1320%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.22%)</title><rect x="1.2128%" y="213" width="0.2205%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="2"/><text x="1.4628%" y="223.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.11%)</title><rect x="1.4333%" y="213" width="0.1103%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="1"/><text x="1.6833%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.22%)</title><rect x="1.9846%" y="181" width="0.2205%" height="15" fill="rgb(232,128,0)" fg:x="18" fg:w="2"/><text x="2.2346%" y="191.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (11 samples, 1.21%)</title><rect x="1.5436%" y="213" width="1.2128%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="11"/><text x="1.7936%" y="223.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (7 samples, 0.77%)</title><rect x="1.9846%" y="197" width="0.7718%" height="15" fill="rgb(228,23,34)" fg:x="18" fg:w="7"/><text x="2.2346%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (5 samples, 0.55%)</title><rect x="2.2051%" y="181" width="0.5513%" height="15" fill="rgb(218,30,26)" fg:x="20" fg:w="5"/><text x="2.4551%" y="191.50"></text></g><g><title>tokio::task::local::Shared::schedule (3 samples, 0.33%)</title><rect x="2.4256%" y="165" width="0.3308%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="3"/><text x="2.6756%" y="175.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (1 samples, 0.11%)</title><rect x="2.6461%" y="149" width="0.1103%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="1"/><text x="2.8961%" y="159.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.11%)</title><rect x="2.6461%" y="133" width="0.1103%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="1"/><text x="2.8961%" y="143.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.11%)</title><rect x="2.6461%" y="117" width="0.1103%" height="15" fill="rgb(216,20,37)" fg:x="24" fg:w="1"/><text x="2.8961%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (24 samples, 2.65%)</title><rect x="0.2205%" y="245" width="2.6461%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="24"/><text x="0.4705%" y="255.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (16 samples, 1.76%)</title><rect x="1.1025%" y="229" width="1.7641%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="16"/><text x="1.3525%" y="239.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.11%)</title><rect x="2.7563%" y="213" width="0.1103%" height="15" fill="rgb(231,73,38)" fg:x="25" fg:w="1"/><text x="3.0063%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (2 samples, 0.22%)</title><rect x="2.8666%" y="245" width="0.2205%" height="15" fill="rgb(225,20,46)" fg:x="26" fg:w="2"/><text x="3.1166%" y="255.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (5 samples, 0.55%)</title><rect x="3.1974%" y="229" width="0.5513%" height="15" fill="rgb(210,31,41)" fg:x="29" fg:w="5"/><text x="3.4474%" y="239.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.22%)</title><rect x="3.5281%" y="213" width="0.2205%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="2"/><text x="3.7781%" y="223.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.44%)</title><rect x="5.0717%" y="165" width="0.4410%" height="15" fill="rgb(226,26,5)" fg:x="46" fg:w="4"/><text x="5.3217%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (4 samples, 0.44%)</title><rect x="5.0717%" y="149" width="0.4410%" height="15" fill="rgb(249,33,26)" fg:x="46" fg:w="4"/><text x="5.3217%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (3 samples, 0.33%)</title><rect x="5.5127%" y="165" width="0.3308%" height="15" fill="rgb(235,183,28)" fg:x="50" fg:w="3"/><text x="5.7627%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.11%)</title><rect x="5.7332%" y="149" width="0.1103%" height="15" fill="rgb(221,5,38)" fg:x="52" fg:w="1"/><text x="5.9832%" y="159.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (1 samples, 0.11%)</title><rect x="9.0408%" y="133" width="0.1103%" height="15" fill="rgb(247,18,42)" fg:x="82" fg:w="1"/><text x="9.2908%" y="143.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.22%)</title><rect x="9.1510%" y="133" width="0.2205%" height="15" fill="rgb(241,131,45)" fg:x="83" fg:w="2"/><text x="9.4010%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.11%)</title><rect x="9.3716%" y="133" width="0.1103%" height="15" fill="rgb(249,31,29)" fg:x="85" fg:w="1"/><text x="9.6216%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (4 samples, 0.44%)</title><rect x="9.4818%" y="133" width="0.4410%" height="15" fill="rgb(225,111,53)" fg:x="86" fg:w="4"/><text x="9.7318%" y="143.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.11%)</title><rect x="9.8126%" y="117" width="0.1103%" height="15" fill="rgb(238,160,17)" fg:x="89" fg:w="1"/><text x="10.0626%" y="127.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (1 samples, 0.11%)</title><rect x="9.9228%" y="133" width="0.1103%" height="15" fill="rgb(214,148,48)" fg:x="90" fg:w="1"/><text x="10.1728%" y="143.50"></text></g><g><title>http::method::Method::from_bytes (1 samples, 0.11%)</title><rect x="10.0331%" y="133" width="0.1103%" height="15" fill="rgb(232,36,49)" fg:x="91" fg:w="1"/><text x="10.2831%" y="143.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (2 samples, 0.22%)</title><rect x="10.1433%" y="133" width="0.2205%" height="15" fill="rgb(209,103,24)" fg:x="92" fg:w="2"/><text x="10.3933%" y="143.50"></text></g><g><title>httparse::parse_headers_iter_uninit (2 samples, 0.22%)</title><rect x="10.3638%" y="133" width="0.2205%" height="15" fill="rgb(229,88,8)" fg:x="94" fg:w="2"/><text x="10.6138%" y="143.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (35 samples, 3.86%)</title><rect x="6.8357%" y="149" width="3.8589%" height="15" fill="rgb(213,181,19)" fg:x="62" fg:w="35"/><text x="7.0857%" y="159.50">&lt;act..</text></g><g><title>httparse::simd::runtime::match_uri_vectored (1 samples, 0.11%)</title><rect x="10.5843%" y="133" width="0.1103%" height="15" fill="rgb(254,191,54)" fg:x="96" fg:w="1"/><text x="10.8343%" y="143.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (1 samples, 0.11%)</title><rect x="11.1356%" y="133" width="0.1103%" height="15" fill="rgb(241,83,37)" fg:x="101" fg:w="1"/><text x="11.3856%" y="143.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (5 samples, 0.55%)</title><rect x="11.2459%" y="133" width="0.5513%" height="15" fill="rgb(233,36,39)" fg:x="102" fg:w="5"/><text x="11.4959%" y="143.50"></text></g><g><title>actix_http::extensions::Extensions::insert (4 samples, 0.44%)</title><rect x="11.3561%" y="117" width="0.4410%" height="15" fill="rgb(226,3,54)" fg:x="103" fg:w="4"/><text x="11.6061%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.22%)</title><rect x="11.5766%" y="101" width="0.2205%" height="15" fill="rgb(245,192,40)" fg:x="105" fg:w="2"/><text x="11.8266%" y="111.50"></text></g><g><title>actix_router::path::Path&lt;T&gt;::unprocessed (1 samples, 0.11%)</title><rect x="11.7971%" y="133" width="0.1103%" height="15" fill="rgb(238,167,29)" fg:x="107" fg:w="1"/><text x="12.0471%" y="143.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (3 samples, 0.33%)</title><rect x="11.9074%" y="133" width="0.3308%" height="15" fill="rgb(232,182,51)" fg:x="108" fg:w="3"/><text x="12.1574%" y="143.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (15 samples, 1.65%)</title><rect x="10.6946%" y="149" width="1.6538%" height="15" fill="rgb(231,60,39)" fg:x="97" fg:w="15"/><text x="10.9446%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (1 samples, 0.11%)</title><rect x="12.2381%" y="133" width="0.1103%" height="15" fill="rgb(208,69,12)" fg:x="111" fg:w="1"/><text x="12.4881%" y="143.50"></text></g><g><title> 16]&gt; (1 samples, 0.11%)</title><rect x="12.2381%" y="117" width="0.1103%" height="15" fill="rgb(235,93,37)" fg:x="111" fg:w="1"/><text x="12.4881%" y="127.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.11%)</title><rect x="13.6714%" y="117" width="0.1103%" height="15" fill="rgb(213,116,39)" fg:x="124" fg:w="1"/><text x="13.9214%" y="127.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (2 samples, 0.22%)</title><rect x="13.7817%" y="117" width="0.2205%" height="15" fill="rgb(222,207,29)" fg:x="125" fg:w="2"/><text x="14.0317%" y="127.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (16 samples, 1.76%)</title><rect x="12.3484%" y="149" width="1.7641%" height="15" fill="rgb(206,96,30)" fg:x="112" fg:w="16"/><text x="12.5984%" y="159.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (16 samples, 1.76%)</title><rect x="12.3484%" y="133" width="1.7641%" height="15" fill="rgb(218,138,4)" fg:x="112" fg:w="16"/><text x="12.5984%" y="143.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.11%)</title><rect x="14.0022%" y="117" width="0.1103%" height="15" fill="rgb(250,191,14)" fg:x="127" fg:w="1"/><text x="14.2522%" y="127.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (1 samples, 0.11%)</title><rect x="14.1125%" y="149" width="0.1103%" height="15" fill="rgb(239,60,40)" fg:x="128" fg:w="1"/><text x="14.3625%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (2 samples, 0.22%)</title><rect x="14.2227%" y="149" width="0.2205%" height="15" fill="rgb(206,27,48)" fg:x="129" fg:w="2"/><text x="14.4727%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.22%)</title><rect x="14.2227%" y="133" width="0.2205%" height="15" fill="rgb(225,35,8)" fg:x="129" fg:w="2"/><text x="14.4727%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="14.3330%" y="117" width="0.1103%" height="15" fill="rgb(250,213,24)" fg:x="130" fg:w="1"/><text x="14.5830%" y="127.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.11%)</title><rect x="14.4432%" y="149" width="0.1103%" height="15" fill="rgb(247,123,22)" fg:x="131" fg:w="1"/><text x="14.6932%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (80 samples, 8.82%)</title><rect x="5.8434%" y="165" width="8.8203%" height="15" fill="rgb(231,138,38)" fg:x="53" fg:w="80"/><text x="6.0934%" y="175.50">actix_http::..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="14.5535%" y="149" width="0.1103%" height="15" fill="rgb(231,145,46)" fg:x="132" fg:w="1"/><text x="14.8035%" y="159.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (1 samples, 0.11%)</title><rect x="15.1047%" y="149" width="0.1103%" height="15" fill="rgb(251,118,11)" fg:x="137" fg:w="1"/><text x="15.3547%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.22%)</title><rect x="16.7585%" y="117" width="0.2205%" height="15" fill="rgb(217,147,25)" fg:x="152" fg:w="2"/><text x="17.0085%" y="127.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.22%)</title><rect x="17.0893%" y="101" width="0.2205%" height="15" fill="rgb(247,81,37)" fg:x="155" fg:w="2"/><text x="17.3393%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="17.1996%" y="85" width="0.1103%" height="15" fill="rgb(209,12,38)" fg:x="156" fg:w="1"/><text x="17.4496%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (1 samples, 0.11%)</title><rect x="17.5303%" y="85" width="0.1103%" height="15" fill="rgb(227,1,9)" fg:x="159" fg:w="1"/><text x="17.7803%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (6 samples, 0.66%)</title><rect x="17.3098%" y="101" width="0.6615%" height="15" fill="rgb(248,47,43)" fg:x="157" fg:w="6"/><text x="17.5598%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (3 samples, 0.33%)</title><rect x="17.6406%" y="85" width="0.3308%" height="15" fill="rgb(221,10,30)" fg:x="160" fg:w="3"/><text x="17.8906%" y="95.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 1.54%)</title><rect x="16.9791%" y="117" width="1.5436%" height="15" fill="rgb(210,229,1)" fg:x="154" fg:w="14"/><text x="17.2291%" y="127.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (5 samples, 0.55%)</title><rect x="17.9713%" y="101" width="0.5513%" height="15" fill="rgb(222,148,37)" fg:x="163" fg:w="5"/><text x="18.2213%" y="111.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::get_summary_by_group::{{closure}} (1 samples, 0.11%)</title><rect x="18.5226%" y="117" width="0.1103%" height="15" fill="rgb(234,67,33)" fg:x="168" fg:w="1"/><text x="18.7726%" y="127.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="18.5226%" y="101" width="0.1103%" height="15" fill="rgb(247,98,35)" fg:x="168" fg:w="1"/><text x="18.7726%" y="111.50"></text></g><g><title>&lt;&amp;T as core::fmt::LowerHex&gt;::fmt (1 samples, 0.11%)</title><rect x="18.5226%" y="85" width="0.1103%" height="15" fill="rgb(247,138,52)" fg:x="168" fg:w="1"/><text x="18.7726%" y="95.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}} (4 samples, 0.44%)</title><rect x="18.6329%" y="117" width="0.4410%" height="15" fill="rgb(213,79,30)" fg:x="169" fg:w="4"/><text x="18.8829%" y="127.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.22%)</title><rect x="19.0739%" y="117" width="0.2205%" height="15" fill="rgb(246,177,23)" fg:x="173" fg:w="2"/><text x="19.3239%" y="127.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.22%)</title><rect x="19.2944%" y="117" width="0.2205%" height="15" fill="rgb(230,62,27)" fg:x="175" fg:w="2"/><text x="19.5444%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.11%)</title><rect x="19.4046%" y="101" width="0.1103%" height="15" fill="rgb(216,154,8)" fg:x="176" fg:w="1"/><text x="19.6546%" y="111.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (2 samples, 0.22%)</title><rect x="19.5149%" y="117" width="0.2205%" height="15" fill="rgb(244,35,45)" fg:x="177" fg:w="2"/><text x="19.7649%" y="127.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (3 samples, 0.33%)</title><rect x="19.7354%" y="117" width="0.3308%" height="15" fill="rgb(251,115,12)" fg:x="179" fg:w="3"/><text x="19.9854%" y="127.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.11%)</title><rect x="20.0662%" y="117" width="0.1103%" height="15" fill="rgb(240,54,50)" fg:x="182" fg:w="1"/><text x="20.3162%" y="127.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="20.2867%" y="101" width="0.1103%" height="15" fill="rgb(233,84,52)" fg:x="184" fg:w="1"/><text x="20.5367%" y="111.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (47 samples, 5.18%)</title><rect x="15.3252%" y="133" width="5.1819%" height="15" fill="rgb(207,117,47)" fg:x="139" fg:w="47"/><text x="15.5752%" y="143.50">actix_..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (3 samples, 0.33%)</title><rect x="20.1764%" y="117" width="0.3308%" height="15" fill="rgb(249,43,39)" fg:x="183" fg:w="3"/><text x="20.4264%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="20.3969%" y="101" width="0.1103%" height="15" fill="rgb(209,38,44)" fg:x="185" fg:w="1"/><text x="20.6469%" y="111.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (50 samples, 5.51%)</title><rect x="15.2150%" y="149" width="5.5127%" height="15" fill="rgb(236,212,23)" fg:x="138" fg:w="50"/><text x="15.4650%" y="159.50">&lt;actix_..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::handler::handler_service&lt;&lt;rinha_de_backend::adapters::web::payments_handler::payments as actix_web::service::HttpServiceFactory&gt;::register::payments,(actix_web::types::json::Json&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;,actix_web::data::Data&lt;alloc::boxed::Box&lt;dyn rinha_de_backend::domain::payment_producer::PaymentProducer&gt;&gt;)&gt;::{{closure}}::{{closure}}&gt; (2 samples, 0.22%)</title><rect x="20.5072%" y="133" width="0.2205%" height="15" fill="rgb(242,79,21)" fg:x="186" fg:w="2"/><text x="20.7572%" y="143.50"></text></g><g><title>&lt;actix_http::responses::head::BoxedResponseHead as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="22.0507%" y="101" width="0.1103%" height="15" fill="rgb(211,96,35)" fg:x="200" fg:w="1"/><text x="22.3007%" y="111.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (10 samples, 1.10%)</title><rect x="21.1687%" y="133" width="1.1025%" height="15" fill="rgb(253,215,40)" fg:x="192" fg:w="10"/><text x="21.4187%" y="143.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (10 samples, 1.10%)</title><rect x="21.1687%" y="117" width="1.1025%" height="15" fill="rgb(211,81,21)" fg:x="192" fg:w="10"/><text x="21.4187%" y="127.50"></text></g><g><title>actix_http::helpers::write_content_length (1 samples, 0.11%)</title><rect x="22.1610%" y="101" width="0.1103%" height="15" fill="rgb(208,190,38)" fg:x="201" fg:w="1"/><text x="22.4110%" y="111.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (71 samples, 7.83%)</title><rect x="14.6637%" y="165" width="7.8280%" height="15" fill="rgb(235,213,38)" fg:x="133" fg:w="71"/><text x="14.9137%" y="175.50">actix_http:..</text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (16 samples, 1.76%)</title><rect x="20.7277%" y="149" width="1.7641%" height="15" fill="rgb(237,122,38)" fg:x="188" fg:w="16"/><text x="20.9777%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (2 samples, 0.22%)</title><rect x="22.2712%" y="133" width="0.2205%" height="15" fill="rgb(244,218,35)" fg:x="202" fg:w="2"/><text x="22.5212%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (4 samples, 0.44%)</title><rect x="22.4917%" y="165" width="0.4410%" height="15" fill="rgb(240,68,47)" fg:x="204" fg:w="4"/><text x="22.7417%" y="175.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="22.8225%" y="149" width="0.1103%" height="15" fill="rgb(210,16,53)" fg:x="207" fg:w="1"/><text x="23.0725%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (1 samples, 0.11%)</title><rect x="22.9327%" y="165" width="0.1103%" height="15" fill="rgb(235,124,12)" fg:x="208" fg:w="1"/><text x="23.1827%" y="175.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (2 samples, 0.22%)</title><rect x="23.0430%" y="165" width="0.2205%" height="15" fill="rgb(224,169,11)" fg:x="209" fg:w="2"/><text x="23.2930%" y="175.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (2 samples, 0.22%)</title><rect x="23.0430%" y="149" width="0.2205%" height="15" fill="rgb(250,166,2)" fg:x="209" fg:w="2"/><text x="23.2930%" y="159.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.22%)</title><rect x="23.7045%" y="149" width="0.2205%" height="15" fill="rgb(242,216,29)" fg:x="215" fg:w="2"/><text x="23.9545%" y="159.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (2 samples, 0.22%)</title><rect x="23.7045%" y="133" width="0.2205%" height="15" fill="rgb(230,116,27)" fg:x="215" fg:w="2"/><text x="23.9545%" y="143.50"></text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (7 samples, 0.77%)</title><rect x="23.2635%" y="165" width="0.7718%" height="15" fill="rgb(228,99,48)" fg:x="211" fg:w="7"/><text x="23.5135%" y="175.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.11%)</title><rect x="23.9250%" y="149" width="0.1103%" height="15" fill="rgb(253,11,6)" fg:x="217" fg:w="1"/><text x="24.1750%" y="159.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.11%)</title><rect x="23.9250%" y="133" width="0.1103%" height="15" fill="rgb(247,143,39)" fg:x="217" fg:w="1"/><text x="24.1750%" y="143.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (181 samples, 19.96%)</title><rect x="4.4101%" y="181" width="19.9559%" height="15" fill="rgb(236,97,10)" fg:x="40" fg:w="181"/><text x="4.6601%" y="191.50">&lt;actix_http::h1::dispatcher::Di..</text></g><g><title>tokio::time::sleep::Sleep::new_timeout (3 samples, 0.33%)</title><rect x="24.0353%" y="165" width="0.3308%" height="15" fill="rgb(233,208,19)" fg:x="218" fg:w="3"/><text x="24.2853%" y="175.50"></text></g><g><title>&lt;actix_http::service::HttpServiceHandlerResponse&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="24.3660%" y="181" width="0.1103%" height="15" fill="rgb(216,164,2)" fg:x="221" fg:w="1"/><text x="24.6160%" y="191.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (184 samples, 20.29%)</title><rect x="4.4101%" y="197" width="20.2867%" height="15" fill="rgb(220,129,5)" fg:x="40" fg:w="184"/><text x="4.6601%" y="207.50">&lt;actix_server::service::StreamSe..</text></g><g><title>&lt;actix_service::and_then::AndThenServiceResponse&lt;A,B,Req&gt; as core::future::future::Future&gt;::poll (2 samples, 0.22%)</title><rect x="24.4763%" y="181" width="0.2205%" height="15" fill="rgb(242,17,10)" fg:x="222" fg:w="2"/><text x="24.7263%" y="191.50"></text></g><g><title>actix-rt|system (226 samples, 24.92%)</title><rect x="0.0000%" y="325" width="24.9173%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="226"/><text x="0.2500%" y="335.50">actix-rt|system</text></g><g><title>__clone (226 samples, 24.92%)</title><rect x="0.0000%" y="309" width="24.9173%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="226"/><text x="0.2500%" y="319.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (226 samples, 24.92%)</title><rect x="0.0000%" y="293" width="24.9173%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="226"/><text x="0.2500%" y="303.50">std::sys::pal::unix::thread::Thread::new..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (226 samples, 24.92%)</title><rect x="0.0000%" y="277" width="24.9173%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="226"/><text x="0.2500%" y="287.50">core::ops::function::FnOnce::call_once{{..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (226 samples, 24.92%)</title><rect x="0.0000%" y="261" width="24.9173%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="226"/><text x="0.2500%" y="271.50">std::sys::backtrace::__rust_begin_short_..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (198 samples, 21.83%)</title><rect x="3.0871%" y="245" width="21.8302%" height="15" fill="rgb(244,5,23)" fg:x="28" fg:w="198"/><text x="3.3371%" y="255.50">tokio::task::local::LocalSet::run_u..</text></g><g><title>tokio::task::local::LocalSet::tick (192 samples, 21.17%)</title><rect x="3.7486%" y="229" width="21.1687%" height="15" fill="rgb(226,81,46)" fg:x="34" fg:w="192"/><text x="3.9986%" y="239.50">tokio::task::local::LocalSet::tick</text></g><g><title>tokio::runtime::task::raw::poll (188 samples, 20.73%)</title><rect x="4.1896%" y="213" width="20.7277%" height="15" fill="rgb(247,70,30)" fg:x="38" fg:w="188"/><text x="4.4396%" y="223.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::task::local::Shared::schedule (2 samples, 0.22%)</title><rect x="24.6968%" y="197" width="0.2205%" height="15" fill="rgb(212,68,19)" fg:x="224" fg:w="2"/><text x="24.9468%" y="207.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (14 samples, 1.54%)</title><rect x="27.2326%" y="213" width="1.5436%" height="15" fill="rgb(240,187,13)" fg:x="247" fg:w="14"/><text x="27.4826%" y="223.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.44%)</title><rect x="28.3352%" y="197" width="0.4410%" height="15" fill="rgb(223,113,26)" fg:x="257" fg:w="4"/><text x="28.5852%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.33%)</title><rect x="29.6582%" y="197" width="0.3308%" height="15" fill="rgb(206,192,2)" fg:x="269" fg:w="3"/><text x="29.9082%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.11%)</title><rect x="29.9890%" y="197" width="0.1103%" height="15" fill="rgb(241,108,4)" fg:x="272" fg:w="1"/><text x="30.2390%" y="207.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (3 samples, 0.33%)</title><rect x="30.0992%" y="197" width="0.3308%" height="15" fill="rgb(247,173,49)" fg:x="273" fg:w="3"/><text x="30.3492%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.44%)</title><rect x="31.5325%" y="181" width="0.4410%" height="15" fill="rgb(224,114,35)" fg:x="286" fg:w="4"/><text x="31.7825%" y="191.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (3 samples, 0.33%)</title><rect x="31.6428%" y="165" width="0.3308%" height="15" fill="rgb(245,159,27)" fg:x="287" fg:w="3"/><text x="31.8928%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="32.3043%" y="165" width="0.1103%" height="15" fill="rgb(245,172,44)" fg:x="293" fg:w="1"/><text x="32.5543%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (6 samples, 0.66%)</title><rect x="33.4068%" y="149" width="0.6615%" height="15" fill="rgb(236,23,11)" fg:x="303" fg:w="6"/><text x="33.6568%" y="159.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (34 samples, 3.75%)</title><rect x="30.4300%" y="197" width="3.7486%" height="15" fill="rgb(205,117,38)" fg:x="276" fg:w="34"/><text x="30.6800%" y="207.50">toki..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (20 samples, 2.21%)</title><rect x="31.9735%" y="181" width="2.2051%" height="15" fill="rgb(237,72,25)" fg:x="290" fg:w="20"/><text x="32.2235%" y="191.50">t..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (16 samples, 1.76%)</title><rect x="32.4146%" y="165" width="1.7641%" height="15" fill="rgb(244,70,9)" fg:x="294" fg:w="16"/><text x="32.6646%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.11%)</title><rect x="34.0684%" y="149" width="0.1103%" height="15" fill="rgb(217,125,39)" fg:x="309" fg:w="1"/><text x="34.3184%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (76 samples, 8.38%)</title><rect x="26.4609%" y="229" width="8.3793%" height="15" fill="rgb(235,36,10)" fg:x="240" fg:w="76"/><text x="26.7109%" y="239.50">tokio::runti..</text></g><g><title>tokio::runtime::time::Driver::park_internal (55 samples, 6.06%)</title><rect x="28.7762%" y="213" width="6.0639%" height="15" fill="rgb(251,123,47)" fg:x="261" fg:w="55"/><text x="29.0262%" y="223.50">tokio::r..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (6 samples, 0.66%)</title><rect x="34.1786%" y="197" width="0.6615%" height="15" fill="rgb(221,13,13)" fg:x="310" fg:w="6"/><text x="34.4286%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (5 samples, 0.55%)</title><rect x="34.8401%" y="229" width="0.5513%" height="15" fill="rgb(238,131,9)" fg:x="316" fg:w="5"/><text x="35.0901%" y="239.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.11%)</title><rect x="39.1400%" y="181" width="0.1103%" height="15" fill="rgb(211,50,8)" fg:x="355" fg:w="1"/><text x="39.3900%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (1 samples, 0.11%)</title><rect x="39.2503%" y="181" width="0.1103%" height="15" fill="rgb(245,182,24)" fg:x="356" fg:w="1"/><text x="39.5003%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (1 samples, 0.11%)</title><rect x="39.3605%" y="181" width="0.1103%" height="15" fill="rgb(242,14,37)" fg:x="357" fg:w="1"/><text x="39.6105%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="39.4708%" y="181" width="0.1103%" height="15" fill="rgb(246,228,12)" fg:x="358" fg:w="1"/><text x="39.7208%" y="191.50"></text></g><g><title>bytes::bytes::Bytes::slice (1 samples, 0.11%)</title><rect x="39.5810%" y="181" width="0.1103%" height="15" fill="rgb(213,55,15)" fg:x="359" fg:w="1"/><text x="39.8310%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (1 samples, 0.11%)</title><rect x="39.6913%" y="181" width="0.1103%" height="15" fill="rgb(209,9,3)" fg:x="360" fg:w="1"/><text x="39.9413%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="39.6913%" y="165" width="0.1103%" height="15" fill="rgb(230,59,30)" fg:x="360" fg:w="1"/><text x="39.9413%" y="175.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.11%)</title><rect x="39.9118%" y="165" width="0.1103%" height="15" fill="rgb(209,121,21)" fg:x="362" fg:w="1"/><text x="40.1618%" y="175.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (3 samples, 0.33%)</title><rect x="39.8015%" y="181" width="0.3308%" height="15" fill="rgb(220,109,13)" fg:x="361" fg:w="3"/><text x="40.0515%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="40.0221%" y="165" width="0.1103%" height="15" fill="rgb(232,18,1)" fg:x="363" fg:w="1"/><text x="40.2721%" y="175.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (1 samples, 0.11%)</title><rect x="40.1323%" y="181" width="0.1103%" height="15" fill="rgb(215,41,42)" fg:x="364" fg:w="1"/><text x="40.3823%" y="191.50"></text></g><g><title>httparse::parse_headers_iter_uninit (3 samples, 0.33%)</title><rect x="40.2426%" y="181" width="0.3308%" height="15" fill="rgb(224,123,36)" fg:x="365" fg:w="3"/><text x="40.4926%" y="191.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (2 samples, 0.22%)</title><rect x="40.3528%" y="165" width="0.2205%" height="15" fill="rgb(240,125,3)" fg:x="366" fg:w="2"/><text x="40.6028%" y="175.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (2 samples, 0.22%)</title><rect x="40.5733%" y="181" width="0.2205%" height="15" fill="rgb(205,98,50)" fg:x="368" fg:w="2"/><text x="40.8233%" y="191.50"></text></g><g><title>hyper::headers::is_chunked (1 samples, 0.11%)</title><rect x="40.6836%" y="165" width="0.1103%" height="15" fill="rgb(205,185,37)" fg:x="369" fg:w="1"/><text x="40.9336%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.11%)</title><rect x="40.6836%" y="149" width="0.1103%" height="15" fill="rgb(238,207,15)" fg:x="369" fg:w="1"/><text x="40.9336%" y="159.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.11%)</title><rect x="40.6836%" y="133" width="0.1103%" height="15" fill="rgb(213,199,42)" fg:x="369" fg:w="1"/><text x="40.9336%" y="143.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (1 samples, 0.11%)</title><rect x="40.7938%" y="149" width="0.1103%" height="15" fill="rgb(235,201,11)" fg:x="370" fg:w="1"/><text x="41.0438%" y="159.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (2 samples, 0.22%)</title><rect x="40.7938%" y="181" width="0.2205%" height="15" fill="rgb(207,46,11)" fg:x="370" fg:w="2"/><text x="41.0438%" y="191.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (2 samples, 0.22%)</title><rect x="40.7938%" y="165" width="0.2205%" height="15" fill="rgb(241,35,35)" fg:x="370" fg:w="2"/><text x="41.0438%" y="175.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.11%)</title><rect x="40.9041%" y="149" width="0.1103%" height="15" fill="rgb(243,32,47)" fg:x="371" fg:w="1"/><text x="41.1541%" y="159.50"></text></g><g><title>core::fmt::write (5 samples, 0.55%)</title><rect x="41.1246%" y="165" width="0.5513%" height="15" fill="rgb(247,202,23)" fg:x="373" fg:w="5"/><text x="41.3746%" y="175.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (5 samples, 0.55%)</title><rect x="41.1246%" y="149" width="0.5513%" height="15" fill="rgb(219,102,11)" fg:x="373" fg:w="5"/><text x="41.3746%" y="159.50"></text></g><g><title>core::fmt::write (3 samples, 0.33%)</title><rect x="41.3451%" y="133" width="0.3308%" height="15" fill="rgb(243,110,44)" fg:x="375" fg:w="3"/><text x="41.5951%" y="143.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert2 (1 samples, 0.11%)</title><rect x="41.6759%" y="165" width="0.1103%" height="15" fill="rgb(222,74,54)" fg:x="378" fg:w="1"/><text x="41.9259%" y="175.50"></text></g><g><title>hyper::headers::content_length_parse_all (1 samples, 0.11%)</title><rect x="41.7861%" y="165" width="0.1103%" height="15" fill="rgb(216,99,12)" fg:x="379" fg:w="1"/><text x="42.0361%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (9 samples, 0.99%)</title><rect x="41.0143%" y="181" width="0.9923%" height="15" fill="rgb(226,22,26)" fg:x="372" fg:w="9"/><text x="41.2643%" y="191.50"></text></g><g><title>hyper::proto::h1::role::write_headers (1 samples, 0.11%)</title><rect x="41.8964%" y="165" width="0.1103%" height="15" fill="rgb(217,163,10)" fg:x="380" fg:w="1"/><text x="42.1464%" y="175.50"></text></g><g><title>http::header::name::StandardHeader::as_str.3367 (1 samples, 0.11%)</title><rect x="41.8964%" y="149" width="0.1103%" height="15" fill="rgb(213,25,53)" fg:x="380" fg:w="1"/><text x="42.1464%" y="159.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.11%)</title><rect x="42.4476%" y="165" width="0.1103%" height="15" fill="rgb(252,105,26)" fg:x="385" fg:w="1"/><text x="42.6976%" y="175.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (6 samples, 0.66%)</title><rect x="42.0066%" y="181" width="0.6615%" height="15" fill="rgb(220,39,43)" fg:x="381" fg:w="6"/><text x="42.2566%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.11%)</title><rect x="42.5579%" y="165" width="0.1103%" height="15" fill="rgb(229,68,48)" fg:x="386" fg:w="1"/><text x="42.8079%" y="175.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.11%)</title><rect x="42.6681%" y="181" width="0.1103%" height="15" fill="rgb(252,8,32)" fg:x="387" fg:w="1"/><text x="42.9181%" y="191.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (46 samples, 5.07%)</title><rect x="37.8170%" y="197" width="5.0717%" height="15" fill="rgb(223,20,43)" fg:x="343" fg:w="46"/><text x="38.0670%" y="207.50">&lt;hyper..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (1 samples, 0.11%)</title><rect x="42.7784%" y="181" width="0.1103%" height="15" fill="rgb(229,81,49)" fg:x="388" fg:w="1"/><text x="43.0284%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.44%)</title><rect x="43.6604%" y="165" width="0.4410%" height="15" fill="rgb(236,28,36)" fg:x="396" fg:w="4"/><text x="43.9104%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.33%)</title><rect x="43.7707%" y="149" width="0.3308%" height="15" fill="rgb(249,185,26)" fg:x="397" fg:w="3"/><text x="44.0207%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.22%)</title><rect x="45.6450%" y="101" width="0.2205%" height="15" fill="rgb(249,174,33)" fg:x="414" fg:w="2"/><text x="45.8950%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.11%)</title><rect x="45.7552%" y="85" width="0.1103%" height="15" fill="rgb(233,201,37)" fg:x="415" fg:w="1"/><text x="46.0052%" y="95.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (4 samples, 0.44%)</title><rect x="45.5347%" y="117" width="0.4410%" height="15" fill="rgb(221,78,26)" fg:x="413" fg:w="4"/><text x="45.7847%" y="127.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="45.8655%" y="101" width="0.1103%" height="15" fill="rgb(250,127,30)" fg:x="416" fg:w="1"/><text x="46.1155%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.22%)</title><rect x="46.1963%" y="69" width="0.2205%" height="15" fill="rgb(230,49,44)" fg:x="419" fg:w="2"/><text x="46.4463%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.22%)</title><rect x="46.1963%" y="53" width="0.2205%" height="15" fill="rgb(229,67,23)" fg:x="419" fg:w="2"/><text x="46.4463%" y="63.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (5 samples, 0.55%)</title><rect x="45.9757%" y="117" width="0.5513%" height="15" fill="rgb(249,83,47)" fg:x="417" fg:w="5"/><text x="46.2257%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (4 samples, 0.44%)</title><rect x="46.0860%" y="101" width="0.4410%" height="15" fill="rgb(215,43,3)" fg:x="418" fg:w="4"/><text x="46.3360%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (3 samples, 0.33%)</title><rect x="46.1963%" y="85" width="0.3308%" height="15" fill="rgb(238,154,13)" fg:x="419" fg:w="3"/><text x="46.4463%" y="95.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="46.4168%" y="69" width="0.1103%" height="15" fill="rgb(219,56,2)" fg:x="421" fg:w="1"/><text x="46.6668%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (18 samples, 1.98%)</title><rect x="44.8732%" y="133" width="1.9846%" height="15" fill="rgb(233,0,4)" fg:x="407" fg:w="18"/><text x="45.1232%" y="143.50">c..</text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.33%)</title><rect x="46.5270%" y="117" width="0.3308%" height="15" fill="rgb(235,30,7)" fg:x="422" fg:w="3"/><text x="46.7770%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="46.7475%" y="101" width="0.1103%" height="15" fill="rgb(250,79,13)" fg:x="424" fg:w="1"/><text x="46.9975%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (23 samples, 2.54%)</title><rect x="44.4322%" y="149" width="2.5358%" height="15" fill="rgb(211,146,34)" fg:x="403" fg:w="23"/><text x="44.6822%" y="159.50">&lt;c..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="46.8578%" y="133" width="0.1103%" height="15" fill="rgb(228,22,38)" fg:x="425" fg:w="1"/><text x="47.1078%" y="143.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 3.97%)</title><rect x="43.2194%" y="181" width="3.9691%" height="15" fill="rgb(235,168,5)" fg:x="392" fg:w="36"/><text x="43.4694%" y="191.50">&lt;tok..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (28 samples, 3.09%)</title><rect x="44.1014%" y="165" width="3.0871%" height="15" fill="rgb(221,155,16)" fg:x="400" fg:w="28"/><text x="44.3514%" y="175.50">red..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.22%)</title><rect x="46.9680%" y="149" width="0.2205%" height="15" fill="rgb(215,215,53)" fg:x="426" fg:w="2"/><text x="47.2180%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (1 samples, 0.11%)</title><rect x="47.6295%" y="165" width="0.1103%" height="15" fill="rgb(223,4,10)" fg:x="432" fg:w="1"/><text x="47.8795%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.11%)</title><rect x="47.7398%" y="165" width="0.1103%" height="15" fill="rgb(234,103,6)" fg:x="433" fg:w="1"/><text x="47.9898%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (8 samples, 0.88%)</title><rect x="47.1885%" y="181" width="0.8820%" height="15" fill="rgb(227,97,0)" fg:x="428" fg:w="8"/><text x="47.4385%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 0.22%)</title><rect x="47.8501%" y="165" width="0.2205%" height="15" fill="rgb(234,150,53)" fg:x="434" fg:w="2"/><text x="48.1001%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="47.9603%" y="149" width="0.1103%" height="15" fill="rgb(228,201,54)" fg:x="435" fg:w="1"/><text x="48.2103%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (3 samples, 0.33%)</title><rect x="48.4013%" y="149" width="0.3308%" height="15" fill="rgb(222,22,37)" fg:x="439" fg:w="3"/><text x="48.6513%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.22%)</title><rect x="48.7321%" y="149" width="0.2205%" height="15" fill="rgb(237,53,32)" fg:x="442" fg:w="2"/><text x="48.9821%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (56 samples, 6.17%)</title><rect x="42.8886%" y="197" width="6.1742%" height="15" fill="rgb(233,25,53)" fg:x="389" fg:w="56"/><text x="43.1386%" y="207.50">&lt;redis::..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (9 samples, 0.99%)</title><rect x="48.0706%" y="181" width="0.9923%" height="15" fill="rgb(210,40,34)" fg:x="436" fg:w="9"/><text x="48.3206%" y="191.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (6 samples, 0.66%)</title><rect x="48.4013%" y="165" width="0.6615%" height="15" fill="rgb(241,220,44)" fg:x="439" fg:w="6"/><text x="48.6513%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.11%)</title><rect x="48.9526%" y="149" width="0.1103%" height="15" fill="rgb(235,28,35)" fg:x="444" fg:w="1"/><text x="49.2026%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.11%)</title><rect x="49.0628%" y="197" width="0.1103%" height="15" fill="rgb(210,56,17)" fg:x="445" fg:w="1"/><text x="49.3128%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.11%)</title><rect x="49.3936%" y="181" width="0.1103%" height="15" fill="rgb(224,130,29)" fg:x="448" fg:w="1"/><text x="49.6436%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (5 samples, 0.55%)</title><rect x="49.1731%" y="197" width="0.5513%" height="15" fill="rgb(235,212,8)" fg:x="446" fg:w="5"/><text x="49.4231%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.22%)</title><rect x="49.5039%" y="181" width="0.2205%" height="15" fill="rgb(223,33,50)" fg:x="449" fg:w="2"/><text x="49.7539%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="49.6141%" y="165" width="0.1103%" height="15" fill="rgb(219,149,13)" fg:x="450" fg:w="1"/><text x="49.8641%" y="175.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.11%)</title><rect x="49.7244%" y="197" width="0.1103%" height="15" fill="rgb(250,156,29)" fg:x="451" fg:w="1"/><text x="49.9744%" y="207.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.44%)</title><rect x="49.8346%" y="197" width="0.4410%" height="15" fill="rgb(216,193,19)" fg:x="452" fg:w="4"/><text x="50.0846%" y="207.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (119 samples, 13.12%)</title><rect x="37.2657%" y="213" width="13.1202%" height="15" fill="rgb(216,135,14)" fg:x="338" fg:w="119"/><text x="37.5157%" y="223.50">&lt;futures_util::futur..</text></g><g><title>want::Giver::poll_want (1 samples, 0.11%)</title><rect x="50.2756%" y="197" width="0.1103%" height="15" fill="rgb(241,47,5)" fg:x="456" fg:w="1"/><text x="50.5256%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.11%)</title><rect x="51.7089%" y="181" width="0.1103%" height="15" fill="rgb(233,42,35)" fg:x="469" fg:w="1"/><text x="51.9589%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.33%)</title><rect x="52.0397%" y="165" width="0.3308%" height="15" fill="rgb(231,13,6)" fg:x="472" fg:w="3"/><text x="52.2897%" y="175.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.99%)</title><rect x="51.8192%" y="181" width="0.9923%" height="15" fill="rgb(207,181,40)" fg:x="470" fg:w="9"/><text x="52.0692%" y="191.50"></text></g><g><title>ryu::pretty::format64 (4 samples, 0.44%)</title><rect x="52.3705%" y="165" width="0.4410%" height="15" fill="rgb(254,173,49)" fg:x="475" fg:w="4"/><text x="52.6205%" y="175.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (2 samples, 0.22%)</title><rect x="52.5910%" y="149" width="0.2205%" height="15" fill="rgb(221,1,38)" fg:x="477" fg:w="2"/><text x="52.8410%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.33%)</title><rect x="52.8115%" y="181" width="0.3308%" height="15" fill="rgb(206,124,46)" fg:x="479" fg:w="3"/><text x="53.0615%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (2 samples, 0.22%)</title><rect x="52.9217%" y="165" width="0.2205%" height="15" fill="rgb(249,21,11)" fg:x="480" fg:w="2"/><text x="53.1717%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.11%)</title><rect x="55.6781%" y="133" width="0.1103%" height="15" fill="rgb(222,201,40)" fg:x="505" fg:w="1"/><text x="55.9281%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.11%)</title><rect x="55.6781%" y="117" width="0.1103%" height="15" fill="rgb(235,61,29)" fg:x="505" fg:w="1"/><text x="55.9281%" y="127.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.11%)</title><rect x="55.6781%" y="101" width="0.1103%" height="15" fill="rgb(219,207,3)" fg:x="505" fg:w="1"/><text x="55.9281%" y="111.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (4 samples, 0.44%)</title><rect x="55.7883%" y="133" width="0.4410%" height="15" fill="rgb(222,56,46)" fg:x="506" fg:w="4"/><text x="56.0383%" y="143.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2 samples, 0.22%)</title><rect x="56.0088%" y="117" width="0.2205%" height="15" fill="rgb(239,76,54)" fg:x="508" fg:w="2"/><text x="56.2588%" y="127.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 0.88%)</title><rect x="55.4576%" y="149" width="0.8820%" height="15" fill="rgb(231,124,27)" fg:x="503" fg:w="8"/><text x="55.7076%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="56.2293%" y="133" width="0.1103%" height="15" fill="rgb(249,195,6)" fg:x="510" fg:w="1"/><text x="56.4793%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.11%)</title><rect x="56.2293%" y="117" width="0.1103%" height="15" fill="rgb(237,174,47)" fg:x="510" fg:w="1"/><text x="56.4793%" y="127.50"></text></g><g><title>__connect (1 samples, 0.11%)</title><rect x="56.3396%" y="149" width="0.1103%" height="15" fill="rgb(206,201,31)" fg:x="511" fg:w="1"/><text x="56.5896%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection::new_with_config&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="56.4498%" y="149" width="0.1103%" height="15" fill="rgb(231,57,52)" fg:x="512" fg:w="1"/><text x="56.6998%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.44%)</title><rect x="57.2216%" y="117" width="0.4410%" height="15" fill="rgb(248,177,22)" fg:x="519" fg:w="4"/><text x="57.4716%" y="127.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="57.5524%" y="101" width="0.1103%" height="15" fill="rgb(215,211,37)" fg:x="522" fg:w="1"/><text x="57.8024%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="58.3241%" y="53" width="0.1103%" height="15" fill="rgb(241,128,51)" fg:x="529" fg:w="1"/><text x="58.5741%" y="63.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 1.43%)</title><rect x="57.1114%" y="133" width="1.4333%" height="15" fill="rgb(227,165,31)" fg:x="518" fg:w="13"/><text x="57.3614%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (8 samples, 0.88%)</title><rect x="57.6626%" y="117" width="0.8820%" height="15" fill="rgb(228,167,24)" fg:x="523" fg:w="8"/><text x="57.9126%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (7 samples, 0.77%)</title><rect x="57.7729%" y="101" width="0.7718%" height="15" fill="rgb(228,143,12)" fg:x="524" fg:w="7"/><text x="58.0229%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (6 samples, 0.66%)</title><rect x="57.8831%" y="85" width="0.6615%" height="15" fill="rgb(249,149,8)" fg:x="525" fg:w="6"/><text x="58.1331%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.33%)</title><rect x="58.2139%" y="69" width="0.3308%" height="15" fill="rgb(243,35,44)" fg:x="528" fg:w="3"/><text x="58.4639%" y="79.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.11%)</title><rect x="58.4344%" y="53" width="0.1103%" height="15" fill="rgb(246,89,9)" fg:x="530" fg:w="1"/><text x="58.6844%" y="63.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.11%)</title><rect x="58.4344%" y="37" width="0.1103%" height="15" fill="rgb(233,213,13)" fg:x="530" fg:w="1"/><text x="58.6844%" y="47.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.11%)</title><rect x="58.5447%" y="117" width="0.1103%" height="15" fill="rgb(233,141,41)" fg:x="531" fg:w="1"/><text x="58.7947%" y="127.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.22%)</title><rect x="58.5447%" y="133" width="0.2205%" height="15" fill="rgb(239,167,4)" fg:x="531" fg:w="2"/><text x="58.7947%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.11%)</title><rect x="58.6549%" y="117" width="0.1103%" height="15" fill="rgb(209,217,16)" fg:x="532" fg:w="1"/><text x="58.9049%" y="127.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (24 samples, 2.65%)</title><rect x="56.5601%" y="149" width="2.6461%" height="15" fill="rgb(219,88,35)" fg:x="513" fg:w="24"/><text x="56.8101%" y="159.50">re..</text></g><g><title>redis::pipeline::encode_pipeline (4 samples, 0.44%)</title><rect x="58.7652%" y="133" width="0.4410%" height="15" fill="rgb(220,193,23)" fg:x="533" fg:w="4"/><text x="59.0152%" y="143.50"></text></g><g><title>redis::cmd::write_command (4 samples, 0.44%)</title><rect x="58.7652%" y="117" width="0.4410%" height="15" fill="rgb(230,90,52)" fg:x="533" fg:w="4"/><text x="59.0152%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="59.3164%" y="133" width="0.1103%" height="15" fill="rgb(252,106,19)" fg:x="538" fg:w="1"/><text x="59.5664%" y="143.50"></text></g><g><title>redis::connection::connection_setup_pipeline (4 samples, 0.44%)</title><rect x="59.2062%" y="149" width="0.4410%" height="15" fill="rgb(206,74,20)" fg:x="537" fg:w="4"/><text x="59.4562%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.22%)</title><rect x="59.4267%" y="133" width="0.2205%" height="15" fill="rgb(230,138,44)" fg:x="539" fg:w="2"/><text x="59.6767%" y="143.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (4 samples, 0.44%)</title><rect x="59.6472%" y="149" width="0.4410%" height="15" fill="rgb(235,182,43)" fg:x="541" fg:w="4"/><text x="59.8972%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (4 samples, 0.44%)</title><rect x="59.6472%" y="133" width="0.4410%" height="15" fill="rgb(242,16,51)" fg:x="541" fg:w="4"/><text x="59.8972%" y="143.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (64 samples, 7.06%)</title><rect x="53.1422%" y="181" width="7.0562%" height="15" fill="rgb(248,9,4)" fg:x="482" fg:w="64"/><text x="53.3922%" y="191.50">redis::cl..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (59 samples, 6.50%)</title><rect x="53.6935%" y="165" width="6.5050%" height="15" fill="rgb(210,31,22)" fg:x="487" fg:w="59"/><text x="53.9435%" y="175.50">redis::cl..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="60.0882%" y="149" width="0.1103%" height="15" fill="rgb(239,54,39)" fg:x="545" fg:w="1"/><text x="60.3382%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="60.0882%" y="133" width="0.1103%" height="15" fill="rgb(230,99,41)" fg:x="545" fg:w="1"/><text x="60.3382%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="60.7497%" y="133" width="0.1103%" height="15" fill="rgb(253,106,12)" fg:x="551" fg:w="1"/><text x="60.9997%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (5 samples, 0.55%)</title><rect x="60.8600%" y="133" width="0.5513%" height="15" fill="rgb(213,46,41)" fg:x="552" fg:w="5"/><text x="61.1100%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (3 samples, 0.33%)</title><rect x="61.0805%" y="117" width="0.3308%" height="15" fill="rgb(215,133,35)" fg:x="554" fg:w="3"/><text x="61.3305%" y="127.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.22%)</title><rect x="61.1907%" y="101" width="0.2205%" height="15" fill="rgb(213,28,5)" fg:x="555" fg:w="2"/><text x="61.4407%" y="111.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (8 samples, 0.88%)</title><rect x="60.7497%" y="149" width="0.8820%" height="15" fill="rgb(215,77,49)" fg:x="551" fg:w="8"/><text x="60.9997%" y="159.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.22%)</title><rect x="61.4112%" y="133" width="0.2205%" height="15" fill="rgb(248,100,22)" fg:x="557" fg:w="2"/><text x="61.6612%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (99 samples, 10.92%)</title><rect x="50.8269%" y="197" width="10.9151%" height="15" fill="rgb(208,67,9)" fg:x="461" fg:w="99"/><text x="51.0769%" y="207.50">&lt;rinha_de_backen..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (14 samples, 1.54%)</title><rect x="60.1985%" y="181" width="1.5436%" height="15" fill="rgb(219,133,21)" fg:x="546" fg:w="14"/><text x="60.4485%" y="191.50"></text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (13 samples, 1.43%)</title><rect x="60.3087%" y="165" width="1.4333%" height="15" fill="rgb(246,46,29)" fg:x="547" fg:w="13"/><text x="60.5587%" y="175.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.11%)</title><rect x="61.6318%" y="149" width="0.1103%" height="15" fill="rgb(246,185,52)" fg:x="559" fg:w="1"/><text x="61.8818%" y="159.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::mpsc_to_redis_worker::mpsc_to_redis_worker::{{closure}} (107 samples, 11.80%)</title><rect x="50.3859%" y="213" width="11.7971%" height="15" fill="rgb(252,136,11)" fg:x="457" fg:w="107"/><text x="50.6359%" y="223.50">rinha_de_backend:..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.44%)</title><rect x="61.7420%" y="197" width="0.4410%" height="15" fill="rgb(219,138,53)" fg:x="560" fg:w="4"/><text x="61.9920%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.33%)</title><rect x="63.5061%" y="197" width="0.3308%" height="15" fill="rgb(211,51,23)" fg:x="576" fg:w="3"/><text x="63.7561%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="64.1676%" y="149" width="0.1103%" height="15" fill="rgb(247,221,28)" fg:x="582" fg:w="1"/><text x="64.4176%" y="159.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (1 samples, 0.11%)</title><rect x="64.3881%" y="133" width="0.1103%" height="15" fill="rgb(251,222,45)" fg:x="584" fg:w="1"/><text x="64.6381%" y="143.50"></text></g><g><title>url::host::Host::parse (3 samples, 0.33%)</title><rect x="64.2778%" y="149" width="0.3308%" height="15" fill="rgb(217,162,53)" fg:x="583" fg:w="3"/><text x="64.5278%" y="159.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.11%)</title><rect x="64.4983%" y="133" width="0.1103%" height="15" fill="rgb(229,93,14)" fg:x="585" fg:w="1"/><text x="64.7483%" y="143.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (9 samples, 0.99%)</title><rect x="63.8368%" y="197" width="0.9923%" height="15" fill="rgb(209,67,49)" fg:x="579" fg:w="9"/><text x="64.0868%" y="207.50"></text></g><g><title>url::ParseOptions::parse (9 samples, 0.99%)</title><rect x="63.8368%" y="181" width="0.9923%" height="15" fill="rgb(213,87,29)" fg:x="579" fg:w="9"/><text x="64.0868%" y="191.50"></text></g><g><title>url::parser::Parser::after_double_slash (6 samples, 0.66%)</title><rect x="64.1676%" y="165" width="0.6615%" height="15" fill="rgb(205,151,52)" fg:x="582" fg:w="6"/><text x="64.4176%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path (2 samples, 0.22%)</title><rect x="64.6086%" y="149" width="0.2205%" height="15" fill="rgb(253,215,39)" fg:x="586" fg:w="2"/><text x="64.8586%" y="159.50"></text></g><g><title>url::parser::Parser::check_url_code_point (1 samples, 0.11%)</title><rect x="64.7189%" y="133" width="0.1103%" height="15" fill="rgb(221,220,41)" fg:x="587" fg:w="1"/><text x="64.9689%" y="143.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log (1 samples, 0.11%)</title><rect x="64.8291%" y="197" width="0.1103%" height="15" fill="rgb(218,133,21)" fg:x="588" fg:w="1"/><text x="65.0791%" y="207.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::{{closure}} (1 samples, 0.11%)</title><rect x="64.8291%" y="181" width="0.1103%" height="15" fill="rgb(221,193,43)" fg:x="588" fg:w="1"/><text x="65.0791%" y="191.50"></text></g><g><title>&lt;env_logger::fmt::ConfigurableFormat as env_logger::fmt::RecordFormat&gt;::format (1 samples, 0.11%)</title><rect x="64.8291%" y="165" width="0.1103%" height="15" fill="rgb(240,128,52)" fg:x="588" fg:w="1"/><text x="65.0791%" y="175.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.11%)</title><rect x="64.8291%" y="149" width="0.1103%" height="15" fill="rgb(253,114,12)" fg:x="588" fg:w="1"/><text x="65.0791%" y="159.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="64.8291%" y="133" width="0.1103%" height="15" fill="rgb(215,223,47)" fg:x="588" fg:w="1"/><text x="65.0791%" y="143.50"></text></g><g><title>&lt;env_logger::fmt::humantime::Timestamp as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="64.8291%" y="117" width="0.1103%" height="15" fill="rgb(248,225,23)" fg:x="588" fg:w="1"/><text x="65.0791%" y="127.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.11%)</title><rect x="65.2701%" y="181" width="0.1103%" height="15" fill="rgb(250,108,0)" fg:x="592" fg:w="1"/><text x="65.5201%" y="191.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.22%)</title><rect x="65.3804%" y="181" width="0.2205%" height="15" fill="rgb(228,208,7)" fg:x="593" fg:w="2"/><text x="65.6304%" y="191.50"></text></g><g><title>core::fmt::write (2 samples, 0.22%)</title><rect x="65.3804%" y="165" width="0.2205%" height="15" fill="rgb(244,45,10)" fg:x="593" fg:w="2"/><text x="65.6304%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4100 (2 samples, 0.22%)</title><rect x="65.3804%" y="149" width="0.2205%" height="15" fill="rgb(207,125,25)" fg:x="593" fg:w="2"/><text x="65.6304%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="65.4906%" y="133" width="0.1103%" height="15" fill="rgb(210,195,18)" fg:x="594" fg:w="1"/><text x="65.7406%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="65.4906%" y="117" width="0.1103%" height="15" fill="rgb(249,80,12)" fg:x="594" fg:w="1"/><text x="65.7406%" y="127.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (1 samples, 0.11%)</title><rect x="67.0342%" y="149" width="0.1103%" height="15" fill="rgb(221,65,9)" fg:x="608" fg:w="1"/><text x="67.2842%" y="159.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (2 samples, 0.22%)</title><rect x="67.1444%" y="149" width="0.2205%" height="15" fill="rgb(235,49,36)" fg:x="609" fg:w="2"/><text x="67.3944%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.22%)</title><rect x="67.1444%" y="133" width="0.2205%" height="15" fill="rgb(225,32,20)" fg:x="609" fg:w="2"/><text x="67.3944%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.22%)</title><rect x="67.1444%" y="117" width="0.2205%" height="15" fill="rgb(215,141,46)" fg:x="609" fg:w="2"/><text x="67.3944%" y="127.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (1 samples, 0.11%)</title><rect x="67.3649%" y="149" width="0.1103%" height="15" fill="rgb(250,160,47)" fg:x="611" fg:w="1"/><text x="67.6149%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Checkout&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (1 samples, 0.11%)</title><rect x="67.4752%" y="149" width="0.1103%" height="15" fill="rgb(216,222,40)" fg:x="612" fg:w="1"/><text x="67.7252%" y="159.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (19 samples, 2.09%)</title><rect x="65.6009%" y="181" width="2.0948%" height="15" fill="rgb(234,217,39)" fg:x="595" fg:w="19"/><text x="65.8509%" y="191.50">&lt;..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (16 samples, 1.76%)</title><rect x="65.9316%" y="165" width="1.7641%" height="15" fill="rgb(207,178,40)" fg:x="598" fg:w="16"/><text x="66.1816%" y="175.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (1 samples, 0.11%)</title><rect x="67.5854%" y="149" width="0.1103%" height="15" fill="rgb(221,136,13)" fg:x="613" fg:w="1"/><text x="67.8354%" y="159.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.11%)</title><rect x="68.9085%" y="133" width="0.1103%" height="15" fill="rgb(249,199,10)" fg:x="625" fg:w="1"/><text x="69.1585%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.5918 (1 samples, 0.11%)</title><rect x="68.9085%" y="117" width="0.1103%" height="15" fill="rgb(249,222,13)" fg:x="625" fg:w="1"/><text x="69.1585%" y="127.50"></text></g><g><title>url::host::Host::parse (6 samples, 0.66%)</title><rect x="68.5777%" y="149" width="0.6615%" height="15" fill="rgb(244,185,38)" fg:x="622" fg:w="6"/><text x="68.8277%" y="159.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (2 samples, 0.22%)</title><rect x="69.0187%" y="133" width="0.2205%" height="15" fill="rgb(236,202,9)" fg:x="626" fg:w="2"/><text x="69.2687%" y="143.50"></text></g><g><title>url::parser::Parser::parse_path (4 samples, 0.44%)</title><rect x="69.2393%" y="149" width="0.4410%" height="15" fill="rgb(250,229,37)" fg:x="628" fg:w="4"/><text x="69.4893%" y="159.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (45 samples, 4.96%)</title><rect x="64.9394%" y="197" width="4.9614%" height="15" fill="rgb(206,174,23)" fg:x="589" fg:w="45"/><text x="65.1894%" y="207.50">&lt;reqwe..</text></g><g><title>url::ParseOptions::parse (20 samples, 2.21%)</title><rect x="67.6957%" y="181" width="2.2051%" height="15" fill="rgb(211,33,43)" fg:x="614" fg:w="20"/><text x="67.9457%" y="191.50">u..</text></g><g><title>url::parser::Parser::after_double_slash (17 samples, 1.87%)</title><rect x="68.0265%" y="165" width="1.8743%" height="15" fill="rgb(245,58,50)" fg:x="617" fg:w="17"/><text x="68.2765%" y="175.50">u..</text></g><g><title>url::parser::Parser::parse_path_start (2 samples, 0.22%)</title><rect x="69.6803%" y="149" width="0.2205%" height="15" fill="rgb(244,68,36)" fg:x="632" fg:w="2"/><text x="69.9303%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::commands::AsyncCommands&gt;::zscore&lt;&amp;str,&amp;str,f64&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="70.6725%" y="181" width="0.1103%" height="15" fill="rgb(232,229,15)" fg:x="641" fg:w="1"/><text x="70.9225%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.11%)</title><rect x="70.7828%" y="181" width="0.1103%" height="15" fill="rgb(254,30,23)" fg:x="642" fg:w="1"/><text x="71.0328%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.11%)</title><rect x="70.7828%" y="165" width="0.1103%" height="15" fill="rgb(235,160,14)" fg:x="642" fg:w="1"/><text x="71.0328%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::RedisError&gt; (1 samples, 0.11%)</title><rect x="70.8931%" y="181" width="0.1103%" height="15" fill="rgb(212,155,44)" fg:x="643" fg:w="1"/><text x="71.1431%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.11%)</title><rect x="72.4366%" y="133" width="0.1103%" height="15" fill="rgb(226,2,50)" fg:x="657" fg:w="1"/><text x="72.6866%" y="143.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.11%)</title><rect x="72.4366%" y="117" width="0.1103%" height="15" fill="rgb(234,177,6)" fg:x="657" fg:w="1"/><text x="72.6866%" y="127.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (1 samples, 0.11%)</title><rect x="72.4366%" y="101" width="0.1103%" height="15" fill="rgb(217,24,9)" fg:x="657" fg:w="1"/><text x="72.6866%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::net::addr::&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for (&amp;str,u16)&gt;::to_socket_addrs::{{closure}}&gt;,tokio::runtime::blocking::schedule::BlockingSchedule&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="72.5469%" y="133" width="0.1103%" height="15" fill="rgb(220,13,46)" fg:x="658" fg:w="1"/><text x="72.7969%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.22%)</title><rect x="72.6571%" y="133" width="0.2205%" height="15" fill="rgb(239,221,27)" fg:x="659" fg:w="2"/><text x="72.9071%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.11%)</title><rect x="72.7674%" y="117" width="0.1103%" height="15" fill="rgb(222,198,25)" fg:x="660" fg:w="1"/><text x="73.0174%" y="127.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.11%)</title><rect x="72.7674%" y="101" width="0.1103%" height="15" fill="rgb(211,99,13)" fg:x="660" fg:w="1"/><text x="73.0174%" y="111.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (11 samples, 1.21%)</title><rect x="71.7751%" y="149" width="1.2128%" height="15" fill="rgb(232,111,31)" fg:x="651" fg:w="11"/><text x="72.0251%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="72.8776%" y="133" width="0.1103%" height="15" fill="rgb(245,82,37)" fg:x="661" fg:w="1"/><text x="73.1276%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::connection::connect_simple&lt;redis::aio::tokio::Tokio&gt;::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="72.9879%" y="149" width="0.1103%" height="15" fill="rgb(227,149,46)" fg:x="662" fg:w="1"/><text x="73.2379%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.55%)</title><rect x="73.5391%" y="133" width="0.5513%" height="15" fill="rgb(218,36,50)" fg:x="667" fg:w="5"/><text x="73.7891%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (4 samples, 0.44%)</title><rect x="73.6494%" y="117" width="0.4410%" height="15" fill="rgb(226,80,48)" fg:x="668" fg:w="4"/><text x="73.8994%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (4 samples, 0.44%)</title><rect x="73.6494%" y="101" width="0.4410%" height="15" fill="rgb(238,224,15)" fg:x="668" fg:w="4"/><text x="73.8994%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (4 samples, 0.44%)</title><rect x="73.6494%" y="85" width="0.4410%" height="15" fill="rgb(241,136,10)" fg:x="668" fg:w="4"/><text x="73.8994%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.33%)</title><rect x="73.7596%" y="69" width="0.3308%" height="15" fill="rgb(208,32,45)" fg:x="669" fg:w="3"/><text x="74.0096%" y="79.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (1 samples, 0.11%)</title><rect x="74.3109%" y="117" width="0.1103%" height="15" fill="rgb(207,135,9)" fg:x="674" fg:w="1"/><text x="74.5609%" y="127.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (4 samples, 0.44%)</title><rect x="74.0904%" y="133" width="0.4410%" height="15" fill="rgb(206,86,44)" fg:x="672" fg:w="4"/><text x="74.3404%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.11%)</title><rect x="74.4212%" y="117" width="0.1103%" height="15" fill="rgb(245,177,15)" fg:x="675" fg:w="1"/><text x="74.6712%" y="127.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="74.4212%" y="101" width="0.1103%" height="15" fill="rgb(206,64,50)" fg:x="675" fg:w="1"/><text x="74.6712%" y="111.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="74.4212%" y="85" width="0.1103%" height="15" fill="rgb(234,36,40)" fg:x="675" fg:w="1"/><text x="74.6712%" y="95.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (17 samples, 1.87%)</title><rect x="73.0981%" y="149" width="1.8743%" height="15" fill="rgb(213,64,8)" fg:x="663" fg:w="17"/><text x="73.3481%" y="159.50">r..</text></g><g><title>redis::pipeline::encode_pipeline (4 samples, 0.44%)</title><rect x="74.5314%" y="133" width="0.4410%" height="15" fill="rgb(210,75,36)" fg:x="676" fg:w="4"/><text x="74.7814%" y="143.50"></text></g><g><title>redis::cmd::write_command (3 samples, 0.33%)</title><rect x="74.6417%" y="117" width="0.3308%" height="15" fill="rgb(229,88,21)" fg:x="677" fg:w="3"/><text x="74.8917%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.22%)</title><rect x="75.0827%" y="133" width="0.2205%" height="15" fill="rgb(252,204,47)" fg:x="681" fg:w="2"/><text x="75.3327%" y="143.50"></text></g><g><title>redis::connection::connection_setup_pipeline (5 samples, 0.55%)</title><rect x="74.9724%" y="149" width="0.5513%" height="15" fill="rgb(208,77,27)" fg:x="680" fg:w="5"/><text x="75.2224%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.22%)</title><rect x="75.3032%" y="133" width="0.2205%" height="15" fill="rgb(221,76,26)" fg:x="683" fg:w="2"/><text x="75.5532%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="75.4135%" y="117" width="0.1103%" height="15" fill="rgb(225,139,18)" fg:x="684" fg:w="1"/><text x="75.6635%" y="127.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (2 samples, 0.22%)</title><rect x="75.5237%" y="149" width="0.2205%" height="15" fill="rgb(230,137,11)" fg:x="685" fg:w="2"/><text x="75.7737%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1 samples, 0.11%)</title><rect x="75.6340%" y="133" width="0.1103%" height="15" fill="rgb(212,28,1)" fg:x="686" fg:w="1"/><text x="75.8840%" y="143.50"></text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (1 samples, 0.11%)</title><rect x="75.6340%" y="117" width="0.1103%" height="15" fill="rgb(248,164,17)" fg:x="686" fg:w="1"/><text x="75.8840%" y="127.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (44 samples, 4.85%)</title><rect x="71.0033%" y="181" width="4.8512%" height="15" fill="rgb(222,171,42)" fg:x="644" fg:w="44"/><text x="71.2533%" y="191.50">redis:..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (44 samples, 4.85%)</title><rect x="71.0033%" y="165" width="4.8512%" height="15" fill="rgb(243,84,45)" fg:x="644" fg:w="44"/><text x="71.2533%" y="175.50">redis:..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="75.7442%" y="149" width="0.1103%" height="15" fill="rgb(252,49,23)" fg:x="687" fg:w="1"/><text x="75.9942%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (2 samples, 0.22%)</title><rect x="76.2955%" y="149" width="0.2205%" height="15" fill="rgb(215,19,7)" fg:x="692" fg:w="2"/><text x="76.5455%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="76.4057%" y="133" width="0.1103%" height="15" fill="rgb(238,81,41)" fg:x="693" fg:w="1"/><text x="76.6557%" y="143.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (3 samples, 0.33%)</title><rect x="76.2955%" y="165" width="0.3308%" height="15" fill="rgb(210,199,37)" fg:x="692" fg:w="3"/><text x="76.5455%" y="175.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="76.5160%" y="149" width="0.1103%" height="15" fill="rgb(244,192,49)" fg:x="694" fg:w="1"/><text x="76.7660%" y="159.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.11%)</title><rect x="76.6262%" y="165" width="0.1103%" height="15" fill="rgb(226,211,11)" fg:x="695" fg:w="1"/><text x="76.8762%" y="175.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="76.6262%" y="149" width="0.1103%" height="15" fill="rgb(236,162,54)" fg:x="695" fg:w="1"/><text x="76.8762%" y="159.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.11%)</title><rect x="76.6262%" y="133" width="0.1103%" height="15" fill="rgb(220,229,9)" fg:x="695" fg:w="1"/><text x="76.8762%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (63 samples, 6.95%)</title><rect x="69.9008%" y="197" width="6.9460%" height="15" fill="rgb(250,87,22)" fg:x="634" fg:w="63"/><text x="70.1508%" y="207.50">&lt;rinha_de..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (9 samples, 0.99%)</title><rect x="75.8545%" y="181" width="0.9923%" height="15" fill="rgb(239,43,17)" fg:x="688" fg:w="9"/><text x="76.1045%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="76.7365%" y="165" width="0.1103%" height="15" fill="rgb(231,177,25)" fg:x="696" fg:w="1"/><text x="76.9865%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (3 samples, 0.33%)</title><rect x="77.6185%" y="165" width="0.3308%" height="15" fill="rgb(219,179,1)" fg:x="704" fg:w="3"/><text x="77.8685%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (2 samples, 0.22%)</title><rect x="77.7288%" y="149" width="0.2205%" height="15" fill="rgb(238,219,53)" fg:x="705" fg:w="2"/><text x="77.9788%" y="159.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="77.8390%" y="133" width="0.1103%" height="15" fill="rgb(232,167,36)" fg:x="706" fg:w="1"/><text x="78.0890%" y="143.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (6 samples, 0.66%)</title><rect x="77.3980%" y="181" width="0.6615%" height="15" fill="rgb(244,19,51)" fg:x="702" fg:w="6"/><text x="77.6480%" y="191.50"></text></g><g><title>redis::pipeline::encode_pipeline (1 samples, 0.11%)</title><rect x="77.9493%" y="165" width="0.1103%" height="15" fill="rgb(224,6,22)" fg:x="707" fg:w="1"/><text x="78.1993%" y="175.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.11%)</title><rect x="77.9493%" y="149" width="0.1103%" height="15" fill="rgb(224,145,5)" fg:x="707" fg:w="1"/><text x="78.1993%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.11%)</title><rect x="78.1698%" y="117" width="0.1103%" height="15" fill="rgb(234,130,49)" fg:x="709" fg:w="1"/><text x="78.4198%" y="127.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (3 samples, 0.33%)</title><rect x="78.1698%" y="149" width="0.3308%" height="15" fill="rgb(254,6,2)" fg:x="709" fg:w="3"/><text x="78.4198%" y="159.50"></text></g><g><title>core::fmt::write (3 samples, 0.33%)</title><rect x="78.1698%" y="133" width="0.3308%" height="15" fill="rgb(208,96,46)" fg:x="709" fg:w="3"/><text x="78.4198%" y="143.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (2 samples, 0.22%)</title><rect x="78.2800%" y="117" width="0.2205%" height="15" fill="rgb(239,3,39)" fg:x="710" fg:w="2"/><text x="78.5300%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.22%)</title><rect x="78.2800%" y="101" width="0.2205%" height="15" fill="rgb(233,210,1)" fg:x="710" fg:w="2"/><text x="78.5300%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4169 (1 samples, 0.11%)</title><rect x="78.3903%" y="85" width="0.1103%" height="15" fill="rgb(244,137,37)" fg:x="711" fg:w="1"/><text x="78.6403%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="78.3903%" y="69" width="0.1103%" height="15" fill="rgb(240,136,2)" fg:x="711" fg:w="1"/><text x="78.6403%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="78.3903%" y="53" width="0.1103%" height="15" fill="rgb(239,18,37)" fg:x="711" fg:w="1"/><text x="78.6403%" y="63.50"></text></g><g><title>&lt;time::time::Time as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="78.5006%" y="149" width="0.1103%" height="15" fill="rgb(218,185,22)" fg:x="712" fg:w="1"/><text x="78.7506%" y="159.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="78.5006%" y="133" width="0.1103%" height="15" fill="rgb(225,218,4)" fg:x="712" fg:w="1"/><text x="78.7506%" y="143.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (9 samples, 0.99%)</title><rect x="78.0595%" y="181" width="0.9923%" height="15" fill="rgb(230,182,32)" fg:x="708" fg:w="9"/><text x="78.3095%" y="191.50"></text></g><g><title>core::fmt::write (9 samples, 0.99%)</title><rect x="78.0595%" y="165" width="0.9923%" height="15" fill="rgb(242,56,43)" fg:x="708" fg:w="9"/><text x="78.3095%" y="175.50"></text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (4 samples, 0.44%)</title><rect x="78.6108%" y="149" width="0.4410%" height="15" fill="rgb(233,99,24)" fg:x="713" fg:w="4"/><text x="78.8608%" y="159.50"></text></g><g><title>core::fmt::write (4 samples, 0.44%)</title><rect x="78.6108%" y="133" width="0.4410%" height="15" fill="rgb(234,209,42)" fg:x="713" fg:w="4"/><text x="78.8608%" y="143.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.33%)</title><rect x="78.7211%" y="117" width="0.3308%" height="15" fill="rgb(227,7,12)" fg:x="714" fg:w="3"/><text x="78.9711%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.22%)</title><rect x="78.8313%" y="101" width="0.2205%" height="15" fill="rgb(245,203,43)" fg:x="715" fg:w="2"/><text x="79.0813%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.11%)</title><rect x="78.9416%" y="85" width="0.1103%" height="15" fill="rgb(238,205,33)" fg:x="716" fg:w="1"/><text x="79.1916%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.11%)</title><rect x="79.2723%" y="149" width="0.1103%" height="15" fill="rgb(231,56,7)" fg:x="719" fg:w="1"/><text x="79.5223%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.1958 (1 samples, 0.11%)</title><rect x="79.3826%" y="149" width="0.1103%" height="15" fill="rgb(244,186,29)" fg:x="720" fg:w="1"/><text x="79.6326%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="79.3826%" y="133" width="0.1103%" height="15" fill="rgb(234,111,31)" fg:x="720" fg:w="1"/><text x="79.6326%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="79.3826%" y="117" width="0.1103%" height="15" fill="rgb(241,149,10)" fg:x="720" fg:w="1"/><text x="79.6326%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.11%)</title><rect x="79.4928%" y="149" width="0.1103%" height="15" fill="rgb(249,206,44)" fg:x="721" fg:w="1"/><text x="79.7428%" y="159.50"></text></g><g><title>alloc::fmt::format::format_inner (7 samples, 0.77%)</title><rect x="79.0518%" y="181" width="0.7718%" height="15" fill="rgb(251,153,30)" fg:x="717" fg:w="7"/><text x="79.3018%" y="191.50"></text></g><g><title>core::fmt::write (7 samples, 0.77%)</title><rect x="79.0518%" y="165" width="0.7718%" height="15" fill="rgb(239,152,38)" fg:x="717" fg:w="7"/><text x="79.3018%" y="175.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (2 samples, 0.22%)</title><rect x="79.6031%" y="149" width="0.2205%" height="15" fill="rgb(249,139,47)" fg:x="722" fg:w="2"/><text x="79.8531%" y="159.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (1 samples, 0.11%)</title><rect x="79.7133%" y="133" width="0.1103%" height="15" fill="rgb(244,64,35)" fg:x="723" fg:w="1"/><text x="79.9633%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.22%)</title><rect x="79.8236%" y="181" width="0.2205%" height="15" fill="rgb(216,46,15)" fg:x="724" fg:w="2"/><text x="80.0736%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="79.9338%" y="165" width="0.1103%" height="15" fill="rgb(250,74,19)" fg:x="725" fg:w="1"/><text x="80.1838%" y="175.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.22%)</title><rect x="80.9261%" y="149" width="0.2205%" height="15" fill="rgb(249,42,33)" fg:x="734" fg:w="2"/><text x="81.1761%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.22%)</title><rect x="81.4774%" y="117" width="0.2205%" height="15" fill="rgb(242,149,17)" fg:x="739" fg:w="2"/><text x="81.7274%" y="127.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.22%)</title><rect x="81.4774%" y="101" width="0.2205%" height="15" fill="rgb(244,29,21)" fg:x="739" fg:w="2"/><text x="81.7274%" y="111.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 0.44%)</title><rect x="81.3671%" y="133" width="0.4410%" height="15" fill="rgb(220,130,37)" fg:x="738" fg:w="4"/><text x="81.6171%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (1 samples, 0.11%)</title><rect x="81.6979%" y="117" width="0.1103%" height="15" fill="rgb(211,67,2)" fg:x="741" fg:w="1"/><text x="81.9479%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (1 samples, 0.11%)</title><rect x="81.6979%" y="101" width="0.1103%" height="15" fill="rgb(235,68,52)" fg:x="741" fg:w="1"/><text x="81.9479%" y="111.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (3 samples, 0.33%)</title><rect x="81.8082%" y="133" width="0.3308%" height="15" fill="rgb(246,142,3)" fg:x="742" fg:w="3"/><text x="82.0582%" y="143.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.11%)</title><rect x="82.0287%" y="117" width="0.1103%" height="15" fill="rgb(241,25,7)" fg:x="744" fg:w="1"/><text x="82.2787%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="82.1389%" y="117" width="0.1103%" height="15" fill="rgb(242,119,39)" fg:x="745" fg:w="1"/><text x="82.3889%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="82.1389%" y="101" width="0.1103%" height="15" fill="rgb(241,98,45)" fg:x="745" fg:w="1"/><text x="82.3889%" y="111.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (13 samples, 1.43%)</title><rect x="81.1466%" y="149" width="1.4333%" height="15" fill="rgb(254,28,30)" fg:x="736" fg:w="13"/><text x="81.3966%" y="159.50"></text></g><g><title>redis::pipeline::encode_pipeline (4 samples, 0.44%)</title><rect x="82.1389%" y="133" width="0.4410%" height="15" fill="rgb(241,142,54)" fg:x="745" fg:w="4"/><text x="82.3889%" y="143.50"></text></g><g><title>redis::cmd::write_command (3 samples, 0.33%)</title><rect x="82.2492%" y="117" width="0.3308%" height="15" fill="rgb(222,85,15)" fg:x="746" fg:w="3"/><text x="82.4992%" y="127.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::from_std (2 samples, 0.22%)</title><rect x="82.5799%" y="149" width="0.2205%" height="15" fill="rgb(210,85,47)" fg:x="749" fg:w="2"/><text x="82.8299%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (2 samples, 0.22%)</title><rect x="82.5799%" y="133" width="0.2205%" height="15" fill="rgb(224,206,25)" fg:x="749" fg:w="2"/><text x="82.8299%" y="143.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (26 samples, 2.87%)</title><rect x="80.0441%" y="181" width="2.8666%" height="15" fill="rgb(243,201,19)" fg:x="726" fg:w="26"/><text x="80.2941%" y="191.50">re..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (23 samples, 2.54%)</title><rect x="80.3749%" y="165" width="2.5358%" height="15" fill="rgb(236,59,4)" fg:x="729" fg:w="23"/><text x="80.6249%" y="175.50">re..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="82.8004%" y="149" width="0.1103%" height="15" fill="rgb(254,179,45)" fg:x="751" fg:w="1"/><text x="83.0504%" y="159.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.11%)</title><rect x="82.8004%" y="133" width="0.1103%" height="15" fill="rgb(226,14,10)" fg:x="751" fg:w="1"/><text x="83.0504%" y="143.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (3 samples, 0.33%)</title><rect x="82.9107%" y="181" width="0.3308%" height="15" fill="rgb(244,27,41)" fg:x="752" fg:w="3"/><text x="83.1607%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (59 samples, 6.50%)</title><rect x="76.8467%" y="197" width="6.5050%" height="15" fill="rgb(235,35,32)" fg:x="697" fg:w="59"/><text x="77.0967%" y="207.50">&lt;rinha_de..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (1 samples, 0.11%)</title><rect x="83.2415%" y="181" width="0.1103%" height="15" fill="rgb(218,68,31)" fg:x="755" fg:w="1"/><text x="83.4915%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4168 (1 samples, 0.11%)</title><rect x="83.2415%" y="165" width="0.1103%" height="15" fill="rgb(207,120,37)" fg:x="755" fg:w="1"/><text x="83.4915%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="83.2415%" y="149" width="0.1103%" height="15" fill="rgb(227,98,0)" fg:x="755" fg:w="1"/><text x="83.4915%" y="159.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.11%)</title><rect x="83.7927%" y="165" width="0.1103%" height="15" fill="rgb(207,7,3)" fg:x="760" fg:w="1"/><text x="84.0427%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.11%)</title><rect x="83.7927%" y="149" width="0.1103%" height="15" fill="rgb(206,98,19)" fg:x="760" fg:w="1"/><text x="84.0427%" y="159.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.11%)</title><rect x="83.9030%" y="165" width="0.1103%" height="15" fill="rgb(217,5,26)" fg:x="761" fg:w="1"/><text x="84.1530%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.11%)</title><rect x="84.0132%" y="165" width="0.1103%" height="15" fill="rgb(235,190,38)" fg:x="762" fg:w="1"/><text x="84.2632%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.66%)</title><rect x="83.6825%" y="181" width="0.6615%" height="15" fill="rgb(247,86,24)" fg:x="759" fg:w="6"/><text x="83.9325%" y="191.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (2 samples, 0.22%)</title><rect x="84.1235%" y="165" width="0.2205%" height="15" fill="rgb(205,101,16)" fg:x="763" fg:w="2"/><text x="84.3735%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.11%)</title><rect x="84.3440%" y="181" width="0.1103%" height="15" fill="rgb(246,168,33)" fg:x="765" fg:w="1"/><text x="84.5940%" y="191.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="85.3363%" y="149" width="0.1103%" height="15" fill="rgb(231,114,1)" fg:x="774" fg:w="1"/><text x="85.5863%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::net::addr::&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for (&amp;str,u16)&gt;::to_socket_addrs::{{closure}}&gt;,tokio::runtime::blocking::schedule::BlockingSchedule&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="85.6670%" y="133" width="0.1103%" height="15" fill="rgb(207,184,53)" fg:x="777" fg:w="1"/><text x="85.9170%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.22%)</title><rect x="85.7773%" y="133" width="0.2205%" height="15" fill="rgb(224,95,51)" fg:x="778" fg:w="2"/><text x="86.0273%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.11%)</title><rect x="85.8875%" y="117" width="0.1103%" height="15" fill="rgb(212,188,45)" fg:x="779" fg:w="1"/><text x="86.1375%" y="127.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.66%)</title><rect x="85.4465%" y="149" width="0.6615%" height="15" fill="rgb(223,154,38)" fg:x="775" fg:w="6"/><text x="85.6965%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.11%)</title><rect x="85.9978%" y="133" width="0.1103%" height="15" fill="rgb(251,22,52)" fg:x="780" fg:w="1"/><text x="86.2478%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.11%)</title><rect x="85.9978%" y="117" width="0.1103%" height="15" fill="rgb(229,209,22)" fg:x="780" fg:w="1"/><text x="86.2478%" y="127.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.11%)</title><rect x="85.9978%" y="101" width="0.1103%" height="15" fill="rgb(234,138,34)" fg:x="780" fg:w="1"/><text x="86.2478%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;core::net::socket_addr::SocketAddr&gt;&gt; (1 samples, 0.11%)</title><rect x="86.1080%" y="149" width="0.1103%" height="15" fill="rgb(212,95,11)" fg:x="781" fg:w="1"/><text x="86.3580%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.11%)</title><rect x="86.8798%" y="117" width="0.1103%" height="15" fill="rgb(240,179,47)" fg:x="788" fg:w="1"/><text x="87.1298%" y="127.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.55%)</title><rect x="86.7696%" y="133" width="0.5513%" height="15" fill="rgb(240,163,11)" fg:x="787" fg:w="5"/><text x="87.0196%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (3 samples, 0.33%)</title><rect x="86.9901%" y="117" width="0.3308%" height="15" fill="rgb(236,37,12)" fg:x="789" fg:w="3"/><text x="87.2401%" y="127.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (3 samples, 0.33%)</title><rect x="86.9901%" y="101" width="0.3308%" height="15" fill="rgb(232,164,16)" fg:x="789" fg:w="3"/><text x="87.2401%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.22%)</title><rect x="87.1003%" y="85" width="0.2205%" height="15" fill="rgb(244,205,15)" fg:x="790" fg:w="2"/><text x="87.3503%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.11%)</title><rect x="87.2106%" y="69" width="0.1103%" height="15" fill="rgb(223,117,47)" fg:x="791" fg:w="1"/><text x="87.4606%" y="79.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.11%)</title><rect x="87.2106%" y="53" width="0.1103%" height="15" fill="rgb(244,107,35)" fg:x="791" fg:w="1"/><text x="87.4606%" y="63.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2 samples, 0.22%)</title><rect x="87.3208%" y="133" width="0.2205%" height="15" fill="rgb(205,140,8)" fg:x="792" fg:w="2"/><text x="87.5708%" y="143.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (1 samples, 0.11%)</title><rect x="87.4311%" y="117" width="0.1103%" height="15" fill="rgb(228,84,46)" fg:x="793" fg:w="1"/><text x="87.6811%" y="127.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (14 samples, 1.54%)</title><rect x="86.2183%" y="149" width="1.5436%" height="15" fill="rgb(254,188,9)" fg:x="782" fg:w="14"/><text x="86.4683%" y="159.50"></text></g><g><title>redis::pipeline::encode_pipeline (2 samples, 0.22%)</title><rect x="87.5413%" y="133" width="0.2205%" height="15" fill="rgb(206,112,54)" fg:x="794" fg:w="2"/><text x="87.7913%" y="143.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.22%)</title><rect x="87.5413%" y="117" width="0.2205%" height="15" fill="rgb(216,84,49)" fg:x="794" fg:w="2"/><text x="87.7913%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="87.8721%" y="133" width="0.1103%" height="15" fill="rgb(214,194,35)" fg:x="797" fg:w="1"/><text x="88.1221%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="87.8721%" y="117" width="0.1103%" height="15" fill="rgb(249,28,3)" fg:x="797" fg:w="1"/><text x="88.1221%" y="127.50"></text></g><g><title>redis::connection::connection_setup_pipeline (4 samples, 0.44%)</title><rect x="87.7619%" y="149" width="0.4410%" height="15" fill="rgb(222,56,52)" fg:x="796" fg:w="4"/><text x="88.0119%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.22%)</title><rect x="87.9824%" y="133" width="0.2205%" height="15" fill="rgb(245,217,50)" fg:x="798" fg:w="2"/><text x="88.2324%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.22%)</title><rect x="87.9824%" y="117" width="0.2205%" height="15" fill="rgb(213,201,24)" fg:x="798" fg:w="2"/><text x="88.2324%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="88.0926%" y="101" width="0.1103%" height="15" fill="rgb(248,116,28)" fg:x="799" fg:w="1"/><text x="88.3426%" y="111.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 0.11%)</title><rect x="88.2029%" y="149" width="0.1103%" height="15" fill="rgb(219,72,43)" fg:x="800" fg:w="1"/><text x="88.4529%" y="159.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (36 samples, 3.97%)</title><rect x="84.4542%" y="181" width="3.9691%" height="15" fill="rgb(209,138,14)" fg:x="766" fg:w="36"/><text x="84.7042%" y="191.50">redi..</text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (36 samples, 3.97%)</title><rect x="84.4542%" y="165" width="3.9691%" height="15" fill="rgb(222,18,33)" fg:x="766" fg:w="36"/><text x="84.7042%" y="175.50">redi..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.11%)</title><rect x="88.3131%" y="149" width="0.1103%" height="15" fill="rgb(213,199,7)" fg:x="801" fg:w="1"/><text x="88.5631%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (4 samples, 0.44%)</title><rect x="88.6439%" y="149" width="0.4410%" height="15" fill="rgb(250,110,10)" fg:x="804" fg:w="4"/><text x="88.8939%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (2 samples, 0.22%)</title><rect x="88.8644%" y="133" width="0.2205%" height="15" fill="rgb(248,123,6)" fg:x="806" fg:w="2"/><text x="89.1144%" y="143.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (6 samples, 0.66%)</title><rect x="88.5336%" y="165" width="0.6615%" height="15" fill="rgb(206,91,31)" fg:x="803" fg:w="6"/><text x="88.7836%" y="175.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.11%)</title><rect x="89.0849%" y="149" width="0.1103%" height="15" fill="rgb(211,154,13)" fg:x="808" fg:w="1"/><text x="89.3349%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="89.1951%" y="165" width="0.1103%" height="15" fill="rgb(225,148,7)" fg:x="809" fg:w="1"/><text x="89.4451%" y="175.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.11%)</title><rect x="89.3054%" y="165" width="0.1103%" height="15" fill="rgb(220,160,43)" fg:x="810" fg:w="1"/><text x="89.5554%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (57 samples, 6.28%)</title><rect x="83.3517%" y="197" width="6.2845%" height="15" fill="rgb(213,52,39)" fg:x="756" fg:w="57"/><text x="83.6017%" y="207.50">&lt;rinha_d..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (11 samples, 1.21%)</title><rect x="88.4234%" y="181" width="1.2128%" height="15" fill="rgb(243,137,7)" fg:x="802" fg:w="11"/><text x="88.6734%" y="191.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.22%)</title><rect x="89.4157%" y="165" width="0.2205%" height="15" fill="rgb(230,79,13)" fg:x="811" fg:w="2"/><text x="89.6657%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (1 samples, 0.11%)</title><rect x="89.6362%" y="197" width="0.1103%" height="15" fill="rgb(247,105,23)" fg:x="813" fg:w="1"/><text x="89.8862%" y="207.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection::{{closure}} (1 samples, 0.11%)</title><rect x="89.6362%" y="181" width="0.1103%" height="15" fill="rgb(223,179,41)" fg:x="813" fg:w="1"/><text x="89.8862%" y="191.50"></text></g><g><title>redis::client::Client::get_multiplexed_async_connection_inner::{{closure}} (1 samples, 0.11%)</title><rect x="89.6362%" y="165" width="0.1103%" height="15" fill="rgb(218,9,34)" fg:x="813" fg:w="1"/><text x="89.8862%" y="175.50"></text></g><g><title>redis::aio::execute_connection_pipeline::{{closure}} (1 samples, 0.11%)</title><rect x="89.6362%" y="149" width="0.1103%" height="15" fill="rgb(222,106,8)" fg:x="813" fg:w="1"/><text x="89.8862%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.11%)</title><rect x="89.6362%" y="133" width="0.1103%" height="15" fill="rgb(211,220,0)" fg:x="813" fg:w="1"/><text x="89.8862%" y="143.50"></text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (1 samples, 0.11%)</title><rect x="89.6362%" y="117" width="0.1103%" height="15" fill="rgb(229,52,16)" fg:x="813" fg:w="1"/><text x="89.8862%" y="127.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.11%)</title><rect x="89.7464%" y="197" width="0.1103%" height="15" fill="rgb(212,155,18)" fg:x="814" fg:w="1"/><text x="89.9964%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="89.7464%" y="181" width="0.1103%" height="15" fill="rgb(242,21,14)" fg:x="814" fg:w="1"/><text x="89.9964%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.11%)</title><rect x="89.7464%" y="165" width="0.1103%" height="15" fill="rgb(222,19,48)" fg:x="814" fg:w="1"/><text x="89.9964%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="89.8567%" y="197" width="0.1103%" height="15" fill="rgb(232,45,27)" fg:x="815" fg:w="1"/><text x="90.1067%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.22%)</title><rect x="90.0772%" y="181" width="0.2205%" height="15" fill="rgb(249,103,42)" fg:x="817" fg:w="2"/><text x="90.3272%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (4 samples, 0.44%)</title><rect x="89.9669%" y="197" width="0.4410%" height="15" fill="rgb(246,81,33)" fg:x="816" fg:w="4"/><text x="90.2169%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::HyperService&gt; (1 samples, 0.11%)</title><rect x="90.2977%" y="181" width="0.1103%" height="15" fill="rgb(252,33,42)" fg:x="819" fg:w="1"/><text x="90.5477%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Sync+core::marker::Send&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (4 samples, 0.44%)</title><rect x="90.4079%" y="197" width="0.4410%" height="15" fill="rgb(209,212,41)" fg:x="820" fg:w="4"/><text x="90.6579%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (3 samples, 0.33%)</title><rect x="90.5182%" y="181" width="0.3308%" height="15" fill="rgb(207,154,6)" fg:x="821" fg:w="3"/><text x="90.7682%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.11%)</title><rect x="90.7387%" y="165" width="0.1103%" height="15" fill="rgb(223,64,47)" fg:x="823" fg:w="1"/><text x="90.9887%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.11%)</title><rect x="90.7387%" y="149" width="0.1103%" height="15" fill="rgb(211,161,38)" fg:x="823" fg:w="1"/><text x="90.9887%" y="159.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (1 samples, 0.11%)</title><rect x="90.8490%" y="197" width="0.1103%" height="15" fill="rgb(219,138,40)" fg:x="824" fg:w="1"/><text x="91.0990%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="91.4002%" y="181" width="0.1103%" height="15" fill="rgb(241,228,46)" fg:x="829" fg:w="1"/><text x="91.6502%" y="191.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (1 samples, 0.11%)</title><rect x="91.6207%" y="117" width="0.1103%" height="15" fill="rgb(223,209,38)" fg:x="831" fg:w="1"/><text x="91.8707%" y="127.50"></text></g><g><title>url::host::Host::parse (2 samples, 0.22%)</title><rect x="91.6207%" y="133" width="0.2205%" height="15" fill="rgb(236,164,45)" fg:x="831" fg:w="2"/><text x="91.8707%" y="143.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.11%)</title><rect x="91.7310%" y="117" width="0.1103%" height="15" fill="rgb(231,15,5)" fg:x="832" fg:w="1"/><text x="91.9810%" y="127.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (5 samples, 0.55%)</title><rect x="91.5105%" y="181" width="0.5513%" height="15" fill="rgb(252,35,15)" fg:x="830" fg:w="5"/><text x="91.7605%" y="191.50"></text></g><g><title>url::ParseOptions::parse (5 samples, 0.55%)</title><rect x="91.5105%" y="165" width="0.5513%" height="15" fill="rgb(248,181,18)" fg:x="830" fg:w="5"/><text x="91.7605%" y="175.50"></text></g><g><title>url::parser::Parser::after_double_slash (5 samples, 0.55%)</title><rect x="91.5105%" y="149" width="0.5513%" height="15" fill="rgb(233,39,42)" fg:x="830" fg:w="5"/><text x="91.7605%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path (2 samples, 0.22%)</title><rect x="91.8412%" y="133" width="0.2205%" height="15" fill="rgb(238,110,33)" fg:x="833" fg:w="2"/><text x="92.0912%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.11%)</title><rect x="92.0617%" y="181" width="0.1103%" height="15" fill="rgb(233,195,10)" fg:x="835" fg:w="1"/><text x="92.3117%" y="191.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.11%)</title><rect x="92.1720%" y="181" width="0.1103%" height="15" fill="rgb(254,105,3)" fg:x="836" fg:w="1"/><text x="92.4220%" y="191.50"></text></g><g><title>bytes::bytes::Bytes::split_to (1 samples, 0.11%)</title><rect x="92.6130%" y="165" width="0.1103%" height="15" fill="rgb(221,225,9)" fg:x="840" fg:w="1"/><text x="92.8630%" y="175.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.11%)</title><rect x="92.6130%" y="149" width="0.1103%" height="15" fill="rgb(224,227,45)" fg:x="840" fg:w="1"/><text x="92.8630%" y="159.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (1 samples, 0.11%)</title><rect x="92.6130%" y="133" width="0.1103%" height="15" fill="rgb(229,198,43)" fg:x="840" fg:w="1"/><text x="92.8630%" y="143.50"></text></g><g><title>http::uri::Uri::from_shared (5 samples, 0.55%)</title><rect x="92.2822%" y="181" width="0.5513%" height="15" fill="rgb(206,209,35)" fg:x="837" fg:w="5"/><text x="92.5322%" y="191.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.11%)</title><rect x="92.7233%" y="165" width="0.1103%" height="15" fill="rgb(245,195,53)" fg:x="841" fg:w="1"/><text x="92.9733%" y="175.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (18 samples, 1.98%)</title><rect x="90.9592%" y="197" width="1.9846%" height="15" fill="rgb(240,92,26)" fg:x="825" fg:w="18"/><text x="91.2092%" y="207.50">r..</text></g><g><title>reqwest::proxy::Matcher::intercept (1 samples, 0.11%)</title><rect x="92.8335%" y="181" width="0.1103%" height="15" fill="rgb(207,40,23)" fg:x="842" fg:w="1"/><text x="93.0835%" y="191.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (280 samples, 30.87%)</title><rect x="62.1830%" y="213" width="30.8710%" height="15" fill="rgb(223,111,35)" fg:x="564" fg:w="280"/><text x="62.4330%" y="223.50">rinha_de_backend::infrastructure::workers::payment..</text></g><g><title>ryu::pretty::format64 (1 samples, 0.11%)</title><rect x="92.9438%" y="197" width="0.1103%" height="15" fill="rgb(229,147,28)" fg:x="843" fg:w="1"/><text x="93.1938%" y="207.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::processor_health_monitor_worker::processor_health_monitor_worker::{{closure}} (1 samples, 0.11%)</title><rect x="93.0540%" y="213" width="0.1103%" height="15" fill="rgb(211,29,28)" fg:x="844" fg:w="1"/><text x="93.3040%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.0540%" y="197" width="0.1103%" height="15" fill="rgb(228,72,33)" fg:x="844" fg:w="1"/><text x="93.3040%" y="207.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (1 samples, 0.11%)</title><rect x="93.0540%" y="181" width="0.1103%" height="15" fill="rgb(205,214,31)" fg:x="844" fg:w="1"/><text x="93.3040%" y="191.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (1 samples, 0.11%)</title><rect x="93.0540%" y="165" width="0.1103%" height="15" fill="rgb(224,111,15)" fg:x="844" fg:w="1"/><text x="93.3040%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.11%)</title><rect x="93.0540%" y="149" width="0.1103%" height="15" fill="rgb(253,21,26)" fg:x="844" fg:w="1"/><text x="93.3040%" y="159.50"></text></g><g><title>core::fmt::write (1 samples, 0.11%)</title><rect x="93.0540%" y="133" width="0.1103%" height="15" fill="rgb(245,139,43)" fg:x="844" fg:w="1"/><text x="93.3040%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.11%)</title><rect x="93.0540%" y="117" width="0.1103%" height="15" fill="rgb(252,170,7)" fg:x="844" fg:w="1"/><text x="93.3040%" y="127.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}}::Guard&lt;T,S&gt;::drain (3 samples, 0.33%)</title><rect x="93.8258%" y="181" width="0.3308%" height="15" fill="rgb(231,118,14)" fg:x="851" fg:w="3"/><text x="94.0758%" y="191.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.11%)</title><rect x="94.0463%" y="165" width="0.1103%" height="15" fill="rgb(238,83,0)" fg:x="853" fg:w="1"/><text x="94.2963%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.22%)</title><rect x="94.1566%" y="181" width="0.2205%" height="15" fill="rgb(221,39,39)" fg:x="854" fg:w="2"/><text x="94.4066%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (6 samples, 0.66%)</title><rect x="94.3771%" y="181" width="0.6615%" height="15" fill="rgb(222,119,46)" fg:x="856" fg:w="6"/><text x="94.6271%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (6 samples, 0.66%)</title><rect x="94.3771%" y="165" width="0.6615%" height="15" fill="rgb(222,165,49)" fg:x="856" fg:w="6"/><text x="94.6271%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.22%)</title><rect x="94.8181%" y="149" width="0.2205%" height="15" fill="rgb(219,113,52)" fg:x="860" fg:w="2"/><text x="95.0681%" y="159.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (18 samples, 1.98%)</title><rect x="93.1643%" y="213" width="1.9846%" height="15" fill="rgb(214,7,15)" fg:x="845" fg:w="18"/><text x="93.4143%" y="223.50">t..</text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::stream::Forward&lt;futures_util::stream::stream::map::Map&lt;futures_util::stream::poll_fn::PollFn&lt;redis::aio::multiplexed_connection::Pipeline::new&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;::{{closure}}&gt;,core::result::Result&lt;redis::aio::multiplexed_connection::PipelineMessage,()&gt;::Ok&gt;,redis::aio::multiplexed_connection::PipelineSink&lt;tokio_util::codec::framed::Framed&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn redis::aio::AsyncStream+core::marker::Sync+core::marker::Send&gt;&gt;,redis::parser::aio_support::ValueCodec&gt;&gt;&gt;&gt; (14 samples, 1.54%)</title><rect x="93.6053%" y="197" width="1.5436%" height="15" fill="rgb(235,32,4)" fg:x="849" fg:w="14"/><text x="93.8553%" y="207.50"></text></g><g><title>tokio::sync::notify::Notify::notify_waiters (1 samples, 0.11%)</title><rect x="95.0386%" y="181" width="0.1103%" height="15" fill="rgb(238,90,54)" fg:x="862" fg:w="1"/><text x="95.2886%" y="191.50"></text></g><g><title>rinha-de-backen (638 samples, 70.34%)</title><rect x="24.9173%" y="325" width="70.3418%" height="15" fill="rgb(213,208,19)" fg:x="226" fg:w="638"/><text x="25.1673%" y="335.50">rinha-de-backen</text></g><g><title>_start (638 samples, 70.34%)</title><rect x="24.9173%" y="309" width="70.3418%" height="15" fill="rgb(233,156,4)" fg:x="226" fg:w="638"/><text x="25.1673%" y="319.50">_start</text></g><g><title>__libc_start_main (638 samples, 70.34%)</title><rect x="24.9173%" y="293" width="70.3418%" height="15" fill="rgb(207,194,5)" fg:x="226" fg:w="638"/><text x="25.1673%" y="303.50">__libc_start_main</text></g><g><title>main (638 samples, 70.34%)</title><rect x="24.9173%" y="277" width="70.3418%" height="15" fill="rgb(206,111,30)" fg:x="226" fg:w="638"/><text x="25.1673%" y="287.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (638 samples, 70.34%)</title><rect x="24.9173%" y="261" width="70.3418%" height="15" fill="rgb(243,70,54)" fg:x="226" fg:w="638"/><text x="25.1673%" y="271.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (638 samples, 70.34%)</title><rect x="24.9173%" y="245" width="70.3418%" height="15" fill="rgb(242,28,8)" fg:x="226" fg:w="638"/><text x="25.1673%" y="255.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (543 samples, 59.87%)</title><rect x="35.3914%" y="229" width="59.8677%" height="15" fill="rgb(219,106,18)" fg:x="321" fg:w="543"/><text x="35.6414%" y="239.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.11%)</title><rect x="95.1488%" y="213" width="0.1103%" height="15" fill="rgb(244,222,10)" fg:x="863" fg:w="1"/><text x="95.3988%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (8 samples, 0.88%)</title><rect x="95.4796%" y="245" width="0.8820%" height="15" fill="rgb(236,179,52)" fg:x="866" fg:w="8"/><text x="95.7296%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.22%)</title><rect x="96.3616%" y="245" width="0.2205%" height="15" fill="rgb(213,23,39)" fg:x="874" fg:w="2"/><text x="96.6116%" y="255.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (2 samples, 0.22%)</title><rect x="96.6924%" y="229" width="0.2205%" height="15" fill="rgb(238,48,10)" fg:x="877" fg:w="2"/><text x="96.9424%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.11%)</title><rect x="96.8026%" y="213" width="0.1103%" height="15" fill="rgb(251,196,23)" fg:x="878" fg:w="1"/><text x="97.0526%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (3 samples, 0.33%)</title><rect x="96.9129%" y="229" width="0.3308%" height="15" fill="rgb(250,152,24)" fg:x="879" fg:w="3"/><text x="97.1629%" y="239.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.22%)</title><rect x="97.2437%" y="229" width="0.2205%" height="15" fill="rgb(209,150,17)" fg:x="882" fg:w="2"/><text x="97.4937%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (9 samples, 0.99%)</title><rect x="96.5821%" y="245" width="0.9923%" height="15" fill="rgb(234,202,34)" fg:x="876" fg:w="9"/><text x="96.8321%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.11%)</title><rect x="97.4642%" y="229" width="0.1103%" height="15" fill="rgb(253,148,53)" fg:x="884" fg:w="1"/><text x="97.7142%" y="239.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (4 samples, 0.44%)</title><rect x="98.6770%" y="213" width="0.4410%" height="15" fill="rgb(218,129,16)" fg:x="895" fg:w="4"/><text x="98.9270%" y="223.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (2 samples, 0.22%)</title><rect x="99.1180%" y="213" width="0.2205%" height="15" fill="rgb(216,85,19)" fg:x="899" fg:w="2"/><text x="99.3680%" y="223.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (16 samples, 1.76%)</title><rect x="98.0154%" y="229" width="1.7641%" height="15" fill="rgb(235,228,7)" fg:x="889" fg:w="16"/><text x="98.2654%" y="239.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (4 samples, 0.44%)</title><rect x="99.3385%" y="213" width="0.4410%" height="15" fill="rgb(245,175,0)" fg:x="901" fg:w="4"/><text x="99.5885%" y="223.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (2 samples, 0.22%)</title><rect x="99.5590%" y="197" width="0.2205%" height="15" fill="rgb(208,168,36)" fg:x="903" fg:w="2"/><text x="99.8090%" y="207.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (2 samples, 0.22%)</title><rect x="99.5590%" y="181" width="0.2205%" height="15" fill="rgb(246,171,24)" fg:x="903" fg:w="2"/><text x="99.8090%" y="191.50"></text></g><g><title>all (907 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(215,142,24)" fg:x="0" fg:w="907"/><text x="0.2500%" y="351.50"></text></g><g><title>tokio-runtime-w (43 samples, 4.74%)</title><rect x="95.2591%" y="325" width="4.7409%" height="15" fill="rgb(250,187,7)" fg:x="864" fg:w="43"/><text x="95.5091%" y="335.50">tokio-..</text></g><g><title>__clone (43 samples, 4.74%)</title><rect x="95.2591%" y="309" width="4.7409%" height="15" fill="rgb(228,66,33)" fg:x="864" fg:w="43"/><text x="95.5091%" y="319.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (43 samples, 4.74%)</title><rect x="95.2591%" y="293" width="4.7409%" height="15" fill="rgb(234,215,21)" fg:x="864" fg:w="43"/><text x="95.5091%" y="303.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (43 samples, 4.74%)</title><rect x="95.2591%" y="277" width="4.7409%" height="15" fill="rgb(222,191,20)" fg:x="864" fg:w="43"/><text x="95.5091%" y="287.50">core::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (43 samples, 4.74%)</title><rect x="95.2591%" y="261" width="4.7409%" height="15" fill="rgb(245,79,54)" fg:x="864" fg:w="43"/><text x="95.5091%" y="271.50">std::s..</text></g><g><title>tokio::runtime::task::raw::poll (22 samples, 2.43%)</title><rect x="97.5744%" y="245" width="2.4256%" height="15" fill="rgb(240,10,37)" fg:x="885" fg:w="22"/><text x="97.8244%" y="255.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2 samples, 0.22%)</title><rect x="99.7795%" y="229" width="0.2205%" height="15" fill="rgb(214,192,32)" fg:x="905" fg:w="2"/><text x="100.0295%" y="239.50"></text></g></svg></svg>