<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="1297"><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.08%)</title><rect x="0.1542%" y="261" width="0.0771%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1"/><text x="0.4042%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="0.1542%" y="245" width="0.0771%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4042%" y="255.50"></text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.08%)</title><rect x="0.1542%" y="229" width="0.0771%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.4042%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.15%)</title><rect x="0.3855%" y="245" width="0.1542%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="2"/><text x="0.6355%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="0.5397%" y="245" width="0.0771%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="1"/><text x="0.7897%" y="255.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (14 samples, 1.08%)</title><rect x="0.6168%" y="245" width="1.0794%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="14"/><text x="0.8668%" y="255.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (7 samples, 0.54%)</title><rect x="1.1565%" y="229" width="0.5397%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="7"/><text x="1.4065%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (7 samples, 0.54%)</title><rect x="1.1565%" y="213" width="0.5397%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="7"/><text x="1.4065%" y="223.50"></text></g><g><title>tokio::task::local::Shared::schedule (5 samples, 0.39%)</title><rect x="1.3107%" y="197" width="0.3855%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="5"/><text x="1.5607%" y="207.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (4 samples, 0.31%)</title><rect x="1.3878%" y="181" width="0.3084%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="4"/><text x="1.6378%" y="191.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (3 samples, 0.23%)</title><rect x="1.4649%" y="165" width="0.2313%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="3"/><text x="1.7149%" y="175.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (2 samples, 0.15%)</title><rect x="1.5420%" y="149" width="0.1542%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="2"/><text x="1.7920%" y="159.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.08%)</title><rect x="1.6962%" y="245" width="0.0771%" height="15" fill="rgb(216,20,37)" fg:x="22" fg:w="1"/><text x="1.9462%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (23 samples, 1.77%)</title><rect x="0.1542%" y="277" width="1.7733%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="23"/><text x="0.4042%" y="287.50">t..</text></g><g><title>tokio::runtime::time::Driver::park_internal (22 samples, 1.70%)</title><rect x="0.2313%" y="261" width="1.6962%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="22"/><text x="0.4813%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.15%)</title><rect x="1.7733%" y="245" width="0.1542%" height="15" fill="rgb(231,73,38)" fg:x="23" fg:w="2"/><text x="2.0233%" y="255.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (2 samples, 0.15%)</title><rect x="2.1588%" y="261" width="0.1542%" height="15" fill="rgb(225,20,46)" fg:x="28" fg:w="2"/><text x="2.4088%" y="271.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.08%)</title><rect x="2.2359%" y="245" width="0.0771%" height="15" fill="rgb(210,31,41)" fg:x="29" fg:w="1"/><text x="2.4859%" y="255.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.46%)</title><rect x="4.1635%" y="197" width="0.4626%" height="15" fill="rgb(221,200,47)" fg:x="54" fg:w="6"/><text x="4.4135%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (5 samples, 0.39%)</title><rect x="4.2406%" y="181" width="0.3855%" height="15" fill="rgb(226,26,5)" fg:x="55" fg:w="5"/><text x="4.4906%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (2 samples, 0.15%)</title><rect x="4.6261%" y="197" width="0.1542%" height="15" fill="rgb(249,33,26)" fg:x="60" fg:w="2"/><text x="4.8761%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.08%)</title><rect x="4.7032%" y="181" width="0.0771%" height="15" fill="rgb(235,183,28)" fg:x="61" fg:w="1"/><text x="4.9532%" y="191.50"></text></g><g><title>actix_http::header::map::HeaderMap::append (2 samples, 0.15%)</title><rect x="7.4017%" y="165" width="0.1542%" height="15" fill="rgb(221,5,38)" fg:x="96" fg:w="2"/><text x="7.6517%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.4788%" y="149" width="0.0771%" height="15" fill="rgb(247,18,42)" fg:x="97" fg:w="1"/><text x="7.7288%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.08%)</title><rect x="7.5559%" y="165" width="0.0771%" height="15" fill="rgb(241,131,45)" fg:x="98" fg:w="1"/><text x="7.8059%" y="175.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.15%)</title><rect x="7.6330%" y="165" width="0.1542%" height="15" fill="rgb(249,31,29)" fg:x="99" fg:w="2"/><text x="7.8830%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.15%)</title><rect x="7.7872%" y="165" width="0.1542%" height="15" fill="rgb(225,111,53)" fg:x="101" fg:w="2"/><text x="8.0372%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (9 samples, 0.69%)</title><rect x="7.9414%" y="165" width="0.6939%" height="15" fill="rgb(238,160,17)" fg:x="103" fg:w="9"/><text x="8.1914%" y="175.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.08%)</title><rect x="8.5582%" y="149" width="0.0771%" height="15" fill="rgb(214,148,48)" fg:x="111" fg:w="1"/><text x="8.8082%" y="159.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (4 samples, 0.31%)</title><rect x="8.6353%" y="165" width="0.3084%" height="15" fill="rgb(232,36,49)" fg:x="112" fg:w="4"/><text x="8.8853%" y="175.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.08%)</title><rect x="8.9437%" y="165" width="0.0771%" height="15" fill="rgb(209,103,24)" fg:x="116" fg:w="1"/><text x="9.1937%" y="175.50"></text></g><g><title>httparse::parse_headers_iter_uninit (5 samples, 0.39%)</title><rect x="9.0208%" y="165" width="0.3855%" height="15" fill="rgb(229,88,8)" fg:x="117" fg:w="5"/><text x="9.2708%" y="175.50"></text></g><g><title>httparse::parse_version (1 samples, 0.08%)</title><rect x="9.4063%" y="165" width="0.0771%" height="15" fill="rgb(213,181,19)" fg:x="122" fg:w="1"/><text x="9.6563%" y="175.50"></text></g><g><title>httparse::simd::avx2::match_uri_vectored (1 samples, 0.08%)</title><rect x="9.4834%" y="165" width="0.0771%" height="15" fill="rgb(254,191,54)" fg:x="123" fg:w="1"/><text x="9.7334%" y="175.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (56 samples, 4.32%)</title><rect x="5.3200%" y="181" width="4.3177%" height="15" fill="rgb(241,83,37)" fg:x="69" fg:w="56"/><text x="5.5700%" y="191.50">&lt;acti..</text></g><g><title>httparse::simd::runtime::match_uri_vectored (1 samples, 0.08%)</title><rect x="9.5605%" y="165" width="0.0771%" height="15" fill="rgb(233,36,39)" fg:x="124" fg:w="1"/><text x="9.8105%" y="175.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (5 samples, 0.39%)</title><rect x="10.4857%" y="165" width="0.3855%" height="15" fill="rgb(226,3,54)" fg:x="136" fg:w="5"/><text x="10.7357%" y="175.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (1 samples, 0.08%)</title><rect x="10.7941%" y="149" width="0.0771%" height="15" fill="rgb(245,192,40)" fg:x="140" fg:w="1"/><text x="11.0441%" y="159.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (1 samples, 0.08%)</title><rect x="10.8712%" y="165" width="0.0771%" height="15" fill="rgb(238,167,29)" fg:x="141" fg:w="1"/><text x="11.1212%" y="175.50"></text></g><g><title>actix_router::path::Path&lt;T&gt;::unprocessed (1 samples, 0.08%)</title><rect x="10.9483%" y="165" width="0.0771%" height="15" fill="rgb(232,182,51)" fg:x="142" fg:w="1"/><text x="11.1983%" y="175.50"></text></g><g><title>actix_router::quoter::Quoter::requote_str_lossy (1 samples, 0.08%)</title><rect x="11.0254%" y="165" width="0.0771%" height="15" fill="rgb(231,60,39)" fg:x="143" fg:w="1"/><text x="11.2754%" y="175.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.08%)</title><rect x="11.1025%" y="165" width="0.0771%" height="15" fill="rgb(208,69,12)" fg:x="144" fg:w="1"/><text x="11.3525%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (1 samples, 0.08%)</title><rect x="11.1796%" y="165" width="0.0771%" height="15" fill="rgb(235,93,37)" fg:x="145" fg:w="1"/><text x="11.4296%" y="175.50"></text></g><g><title> 16]&gt; (1 samples, 0.08%)</title><rect x="11.1796%" y="149" width="0.0771%" height="15" fill="rgb(213,116,39)" fg:x="145" fg:w="1"/><text x="11.4296%" y="159.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (22 samples, 1.70%)</title><rect x="9.6376%" y="181" width="1.6962%" height="15" fill="rgb(222,207,29)" fg:x="125" fg:w="22"/><text x="9.8876%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::message::Message&lt;actix_http::requests::head::RequestHead&gt;&gt; (1 samples, 0.08%)</title><rect x="11.2567%" y="165" width="0.0771%" height="15" fill="rgb(206,96,30)" fg:x="146" fg:w="1"/><text x="11.5067%" y="175.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (2 samples, 0.15%)</title><rect x="12.7217%" y="149" width="0.1542%" height="15" fill="rgb(218,138,4)" fg:x="165" fg:w="2"/><text x="12.9717%" y="159.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (3 samples, 0.23%)</title><rect x="12.8759%" y="149" width="0.2313%" height="15" fill="rgb(250,191,14)" fg:x="167" fg:w="3"/><text x="13.1259%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.23%)</title><rect x="13.1072%" y="149" width="0.2313%" height="15" fill="rgb(239,60,40)" fg:x="170" fg:w="3"/><text x="13.3572%" y="159.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (28 samples, 2.16%)</title><rect x="11.3338%" y="181" width="2.1588%" height="15" fill="rgb(206,27,48)" fg:x="147" fg:w="28"/><text x="11.5838%" y="191.50">&lt;..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (26 samples, 2.00%)</title><rect x="11.4880%" y="165" width="2.0046%" height="15" fill="rgb(225,35,8)" fg:x="149" fg:w="26"/><text x="11.7380%" y="175.50">a..</text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.15%)</title><rect x="13.3385%" y="149" width="0.1542%" height="15" fill="rgb(250,213,24)" fg:x="173" fg:w="2"/><text x="13.5885%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (5 samples, 0.39%)</title><rect x="13.4927%" y="181" width="0.3855%" height="15" fill="rgb(247,123,22)" fg:x="175" fg:w="5"/><text x="13.7427%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.23%)</title><rect x="13.6469%" y="165" width="0.2313%" height="15" fill="rgb(231,138,38)" fg:x="177" fg:w="3"/><text x="13.8969%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.8011%" y="149" width="0.0771%" height="15" fill="rgb(231,145,46)" fg:x="179" fg:w="1"/><text x="14.0511%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (120 samples, 9.25%)</title><rect x="4.7803%" y="197" width="9.2521%" height="15" fill="rgb(251,118,11)" fg:x="62" fg:w="120"/><text x="5.0303%" y="207.50">actix_http::h..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (2 samples, 0.15%)</title><rect x="13.8782%" y="181" width="0.1542%" height="15" fill="rgb(217,147,25)" fg:x="180" fg:w="2"/><text x="14.1282%" y="191.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (1 samples, 0.08%)</title><rect x="14.4950%" y="181" width="0.0771%" height="15" fill="rgb(247,81,37)" fg:x="188" fg:w="1"/><text x="14.7450%" y="191.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.5721%" y="181" width="0.0771%" height="15" fill="rgb(209,12,38)" fg:x="189" fg:w="1"/><text x="14.8221%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="15.2660%" y="149" width="0.0771%" height="15" fill="rgb(227,1,9)" fg:x="198" fg:w="1"/><text x="15.5160%" y="159.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="15.4202%" y="133" width="0.0771%" height="15" fill="rgb(248,47,43)" fg:x="200" fg:w="1"/><text x="15.6702%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (1 samples, 0.08%)</title><rect x="15.4202%" y="117" width="0.0771%" height="15" fill="rgb(221,10,30)" fg:x="200" fg:w="1"/><text x="15.6702%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.46%)</title><rect x="15.3431%" y="149" width="0.4626%" height="15" fill="rgb(210,229,1)" fg:x="199" fg:w="6"/><text x="15.5931%" y="159.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (4 samples, 0.31%)</title><rect x="15.4973%" y="133" width="0.3084%" height="15" fill="rgb(222,148,37)" fg:x="201" fg:w="4"/><text x="15.7473%" y="143.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.15%)</title><rect x="16.1141%" y="133" width="0.1542%" height="15" fill="rgb(234,67,33)" fg:x="209" fg:w="2"/><text x="16.3641%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}} (8 samples, 0.62%)</title><rect x="15.8057%" y="149" width="0.6168%" height="15" fill="rgb(247,98,35)" fg:x="205" fg:w="8"/><text x="16.0557%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.15%)</title><rect x="16.2683%" y="133" width="0.1542%" height="15" fill="rgb(247,138,52)" fg:x="211" fg:w="2"/><text x="16.5183%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.15%)</title><rect x="16.2683%" y="117" width="0.1542%" height="15" fill="rgb(213,79,30)" fg:x="211" fg:w="2"/><text x="16.5183%" y="127.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="16.4225%" y="149" width="0.0771%" height="15" fill="rgb(246,177,23)" fg:x="213" fg:w="1"/><text x="16.6725%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="16.4225%" y="133" width="0.0771%" height="15" fill="rgb(230,62,27)" fg:x="213" fg:w="1"/><text x="16.6725%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.23%)</title><rect x="16.6538%" y="133" width="0.2313%" height="15" fill="rgb(216,154,8)" fg:x="216" fg:w="3"/><text x="16.9038%" y="143.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.62%)</title><rect x="16.4996%" y="149" width="0.6168%" height="15" fill="rgb(244,35,45)" fg:x="214" fg:w="8"/><text x="16.7496%" y="159.50"></text></g><g><title>ryu::pretty::format64 (3 samples, 0.23%)</title><rect x="16.8851%" y="133" width="0.2313%" height="15" fill="rgb(251,115,12)" fg:x="219" fg:w="3"/><text x="17.1351%" y="143.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.08%)</title><rect x="17.0393%" y="117" width="0.0771%" height="15" fill="rgb(240,54,50)" fg:x="221" fg:w="1"/><text x="17.2893%" y="127.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (1 samples, 0.08%)</title><rect x="17.1164%" y="149" width="0.0771%" height="15" fill="rgb(233,84,52)" fg:x="222" fg:w="1"/><text x="17.3664%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="17.1935%" y="149" width="0.0771%" height="15" fill="rgb(207,117,47)" fg:x="223" fg:w="1"/><text x="17.4435%" y="159.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.4248%" y="133" width="0.0771%" height="15" fill="rgb(249,43,39)" fg:x="226" fg:w="1"/><text x="17.6748%" y="143.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.5019%" y="133" width="0.0771%" height="15" fill="rgb(209,38,44)" fg:x="227" fg:w="1"/><text x="17.7519%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (5 samples, 0.39%)</title><rect x="17.2706%" y="149" width="0.3855%" height="15" fill="rgb(236,212,23)" fg:x="224" fg:w="5"/><text x="17.5206%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="17.5790%" y="133" width="0.0771%" height="15" fill="rgb(242,79,21)" fg:x="228" fg:w="1"/><text x="17.8290%" y="143.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (36 samples, 2.78%)</title><rect x="14.9576%" y="165" width="2.7756%" height="15" fill="rgb(211,96,35)" fg:x="194" fg:w="36"/><text x="15.2076%" y="175.50">ac..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="17.6561%" y="149" width="0.0771%" height="15" fill="rgb(253,215,40)" fg:x="229" fg:w="1"/><text x="17.9061%" y="159.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (41 samples, 3.16%)</title><rect x="14.6492%" y="181" width="3.1611%" height="15" fill="rgb(211,81,21)" fg:x="190" fg:w="41"/><text x="14.8992%" y="191.50">&lt;ac..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::handler::handler_service&lt;&lt;rinha_de_backend::adapters::web::payments_handler::payments as actix_web::service::HttpServiceFactory&gt;::register::payments,(actix_web::types::json::Json&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;,actix_web::data::Data&lt;alloc::boxed::Box&lt;dyn rinha_de_backend::domain::payment_producer::PaymentProducer&gt;&gt;)&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="17.7332%" y="165" width="0.0771%" height="15" fill="rgb(208,190,38)" fg:x="230" fg:w="1"/><text x="17.9832%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (10 samples, 0.77%)</title><rect x="17.8103%" y="165" width="0.7710%" height="15" fill="rgb(235,213,38)" fg:x="231" fg:w="10"/><text x="18.0603%" y="175.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (10 samples, 0.77%)</title><rect x="17.8103%" y="149" width="0.7710%" height="15" fill="rgb(237,122,38)" fg:x="231" fg:w="10"/><text x="18.0603%" y="159.50"></text></g><g><title>actix_http::helpers::write_content_length (2 samples, 0.15%)</title><rect x="18.4271%" y="133" width="0.1542%" height="15" fill="rgb(244,218,35)" fg:x="239" fg:w="2"/><text x="18.6771%" y="143.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (12 samples, 0.93%)</title><rect x="17.8103%" y="181" width="0.9252%" height="15" fill="rgb(240,68,47)" fg:x="231" fg:w="12"/><text x="18.0603%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (2 samples, 0.15%)</title><rect x="18.5813%" y="165" width="0.1542%" height="15" fill="rgb(210,16,53)" fg:x="241" fg:w="2"/><text x="18.8313%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (62 samples, 4.78%)</title><rect x="14.0324%" y="197" width="4.7803%" height="15" fill="rgb(235,124,12)" fg:x="182" fg:w="62"/><text x="14.2824%" y="207.50">actix_..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (1 samples, 0.08%)</title><rect x="18.7355%" y="181" width="0.0771%" height="15" fill="rgb(224,169,11)" fg:x="243" fg:w="1"/><text x="18.9855%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (6 samples, 0.46%)</title><rect x="18.8126%" y="197" width="0.4626%" height="15" fill="rgb(250,166,2)" fg:x="244" fg:w="6"/><text x="19.0626%" y="207.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.15%)</title><rect x="19.1210%" y="181" width="0.1542%" height="15" fill="rgb(242,216,29)" fg:x="248" fg:w="2"/><text x="19.3710%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (4 samples, 0.31%)</title><rect x="19.2753%" y="197" width="0.3084%" height="15" fill="rgb(230,116,27)" fg:x="250" fg:w="4"/><text x="19.5253%" y="207.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (8 samples, 0.62%)</title><rect x="19.5837%" y="197" width="0.6168%" height="15" fill="rgb(228,99,48)" fg:x="254" fg:w="8"/><text x="19.8337%" y="207.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (7 samples, 0.54%)</title><rect x="19.6608%" y="181" width="0.5397%" height="15" fill="rgb(253,11,6)" fg:x="255" fg:w="7"/><text x="19.9108%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (4 samples, 0.31%)</title><rect x="19.8921%" y="165" width="0.3084%" height="15" fill="rgb(247,143,39)" fg:x="258" fg:w="4"/><text x="20.1421%" y="175.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (3 samples, 0.23%)</title><rect x="20.2005%" y="181" width="0.2313%" height="15" fill="rgb(236,97,10)" fg:x="262" fg:w="3"/><text x="20.4505%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (3 samples, 0.23%)</title><rect x="20.2005%" y="165" width="0.2313%" height="15" fill="rgb(233,208,19)" fg:x="262" fg:w="3"/><text x="20.4505%" y="175.50"></text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (4 samples, 0.31%)</title><rect x="20.2005%" y="197" width="0.3084%" height="15" fill="rgb(216,164,2)" fg:x="262" fg:w="4"/><text x="20.4505%" y="207.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (1 samples, 0.08%)</title><rect x="20.4318%" y="181" width="0.0771%" height="15" fill="rgb(220,129,5)" fg:x="265" fg:w="1"/><text x="20.6818%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.08%)</title><rect x="20.4318%" y="165" width="0.0771%" height="15" fill="rgb(242,17,10)" fg:x="265" fg:w="1"/><text x="20.6818%" y="175.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (222 samples, 17.12%)</title><rect x="3.5466%" y="213" width="17.1164%" height="15" fill="rgb(242,107,0)" fg:x="46" fg:w="222"/><text x="3.7966%" y="223.50">&lt;actix_http::h1::dispatcher..</text></g><g><title>tokio::time::sleep::Sleep::new_timeout (2 samples, 0.15%)</title><rect x="20.5089%" y="197" width="0.1542%" height="15" fill="rgb(251,28,31)" fg:x="266" fg:w="2"/><text x="20.7589%" y="207.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (225 samples, 17.35%)</title><rect x="3.4695%" y="229" width="17.3477%" height="15" fill="rgb(233,223,10)" fg:x="45" fg:w="225"/><text x="3.7195%" y="239.50">&lt;actix_server::service::Str..</text></g><g><title>&lt;actix_service::and_then::AndThenServiceResponse&lt;A,B,Req&gt; as core::future::future::Future&gt;::poll (2 samples, 0.15%)</title><rect x="20.6631%" y="213" width="0.1542%" height="15" fill="rgb(215,21,27)" fg:x="268" fg:w="2"/><text x="20.9131%" y="223.50"></text></g><g><title>tokio::task::local::LocalSet::tick (241 samples, 18.58%)</title><rect x="2.3130%" y="261" width="18.5813%" height="15" fill="rgb(232,23,21)" fg:x="30" fg:w="241"/><text x="2.5630%" y="271.50">tokio::task::local::LocalSet:..</text></g><g><title>tokio::runtime::task::raw::poll (234 samples, 18.04%)</title><rect x="2.8527%" y="245" width="18.0416%" height="15" fill="rgb(244,5,23)" fg:x="37" fg:w="234"/><text x="3.1027%" y="255.50">tokio::runtime::task::raw::p..</text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.08%)</title><rect x="20.8173%" y="229" width="0.0771%" height="15" fill="rgb(226,81,46)" fg:x="270" fg:w="1"/><text x="21.0673%" y="239.50"></text></g><g><title>actix-rt|system (273 samples, 21.05%)</title><rect x="0.0000%" y="357" width="21.0486%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="273"/><text x="0.2500%" y="367.50">actix-rt|system</text></g><g><title>__clone (273 samples, 21.05%)</title><rect x="0.0000%" y="341" width="21.0486%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="273"/><text x="0.2500%" y="351.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (273 samples, 21.05%)</title><rect x="0.0000%" y="325" width="21.0486%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="273"/><text x="0.2500%" y="335.50">std::sys::pal::unix::thread::Thre..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (273 samples, 21.05%)</title><rect x="0.0000%" y="309" width="21.0486%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="273"/><text x="0.2500%" y="319.50">core::ops::function::FnOnce::call..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (273 samples, 21.05%)</title><rect x="0.0000%" y="293" width="21.0486%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="273"/><text x="0.2500%" y="303.50">std::sys::backtrace::__rust_begin..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (248 samples, 19.12%)</title><rect x="1.9275%" y="277" width="19.1210%" height="15" fill="rgb(241,108,4)" fg:x="25" fg:w="248"/><text x="2.1775%" y="287.50">tokio::task::local::LocalSet::..</text></g><g><title>tokio::util::wake::clone_arc_raw (2 samples, 0.15%)</title><rect x="20.8944%" y="261" width="0.1542%" height="15" fill="rgb(247,173,49)" fg:x="271" fg:w="2"/><text x="21.1444%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.08%)</title><rect x="21.8196%" y="261" width="0.0771%" height="15" fill="rgb(224,114,35)" fg:x="283" fg:w="1"/><text x="22.0696%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="21.8967%" y="261" width="0.0771%" height="15" fill="rgb(245,159,27)" fg:x="284" fg:w="1"/><text x="22.1467%" y="271.50"></text></g><g><title>tokio::runtime::driver::Driver::park (1 samples, 0.08%)</title><rect x="22.5906%" y="245" width="0.0771%" height="15" fill="rgb(245,172,44)" fg:x="293" fg:w="1"/><text x="22.8406%" y="255.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (10 samples, 0.77%)</title><rect x="22.6677%" y="245" width="0.7710%" height="15" fill="rgb(236,23,11)" fg:x="294" fg:w="10"/><text x="22.9177%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (6 samples, 0.46%)</title><rect x="22.9761%" y="229" width="0.4626%" height="15" fill="rgb(205,117,38)" fg:x="298" fg:w="6"/><text x="23.2261%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.31%)</title><rect x="24.5181%" y="229" width="0.3084%" height="15" fill="rgb(237,72,25)" fg:x="318" fg:w="4"/><text x="24.7681%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (3 samples, 0.23%)</title><rect x="24.8265%" y="229" width="0.2313%" height="15" fill="rgb(244,70,9)" fg:x="322" fg:w="3"/><text x="25.0765%" y="239.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (6 samples, 0.46%)</title><rect x="25.0578%" y="229" width="0.4626%" height="15" fill="rgb(217,125,39)" fg:x="325" fg:w="6"/><text x="25.3078%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="26.4456%" y="197" width="0.0771%" height="15" fill="rgb(235,36,10)" fg:x="343" fg:w="1"/><text x="26.6956%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (7 samples, 0.54%)</title><rect x="27.1396%" y="181" width="0.5397%" height="15" fill="rgb(251,123,47)" fg:x="352" fg:w="7"/><text x="27.3896%" y="191.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (29 samples, 2.24%)</title><rect x="25.5204%" y="229" width="2.2359%" height="15" fill="rgb(221,13,13)" fg:x="331" fg:w="29"/><text x="25.7704%" y="239.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (21 samples, 1.62%)</title><rect x="26.1372%" y="213" width="1.6191%" height="15" fill="rgb(238,131,9)" fg:x="339" fg:w="21"/><text x="26.3872%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (16 samples, 1.23%)</title><rect x="26.5227%" y="197" width="1.2336%" height="15" fill="rgb(211,50,8)" fg:x="344" fg:w="16"/><text x="26.7727%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.08%)</title><rect x="27.6793%" y="181" width="0.0771%" height="15" fill="rgb(245,182,24)" fg:x="359" fg:w="1"/><text x="27.9293%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (77 samples, 5.94%)</title><rect x="21.9738%" y="261" width="5.9368%" height="15" fill="rgb(242,14,37)" fg:x="285" fg:w="77"/><text x="22.2238%" y="271.50">tokio::r..</text></g><g><title>tokio::runtime::time::Driver::park_internal (58 samples, 4.47%)</title><rect x="23.4387%" y="245" width="4.4719%" height="15" fill="rgb(246,228,12)" fg:x="304" fg:w="58"/><text x="23.6887%" y="255.50">tokio..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.15%)</title><rect x="27.7564%" y="229" width="0.1542%" height="15" fill="rgb(213,55,15)" fg:x="360" fg:w="2"/><text x="28.0064%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (11 samples, 0.85%)</title><rect x="27.9106%" y="261" width="0.8481%" height="15" fill="rgb(209,9,3)" fg:x="362" fg:w="11"/><text x="28.1606%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="35.2352%" y="213" width="0.0771%" height="15" fill="rgb(230,59,30)" fg:x="457" fg:w="1"/><text x="35.4852%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.08%)</title><rect x="35.3123%" y="197" width="0.0771%" height="15" fill="rgb(209,121,21)" fg:x="458" fg:w="1"/><text x="35.5623%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (5 samples, 0.39%)</title><rect x="35.3123%" y="213" width="0.3855%" height="15" fill="rgb(220,109,13)" fg:x="458" fg:w="5"/><text x="35.5623%" y="223.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (4 samples, 0.31%)</title><rect x="35.3894%" y="197" width="0.3084%" height="15" fill="rgb(232,18,1)" fg:x="459" fg:w="4"/><text x="35.6394%" y="207.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.23%)</title><rect x="35.4665%" y="181" width="0.2313%" height="15" fill="rgb(215,41,42)" fg:x="460" fg:w="3"/><text x="35.7165%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.15%)</title><rect x="35.5436%" y="165" width="0.1542%" height="15" fill="rgb(224,123,36)" fg:x="461" fg:w="2"/><text x="35.7936%" y="175.50"></text></g><g><title>bytes::bytes::Bytes::slice (1 samples, 0.08%)</title><rect x="35.6978%" y="213" width="0.0771%" height="15" fill="rgb(240,125,3)" fg:x="463" fg:w="1"/><text x="35.9478%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (3 samples, 0.23%)</title><rect x="35.7749%" y="213" width="0.2313%" height="15" fill="rgb(205,98,50)" fg:x="464" fg:w="3"/><text x="36.0249%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.23%)</title><rect x="35.7749%" y="197" width="0.2313%" height="15" fill="rgb(205,185,37)" fg:x="464" fg:w="3"/><text x="36.0249%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get2 (1 samples, 0.08%)</title><rect x="36.0062%" y="213" width="0.0771%" height="15" fill="rgb(238,207,15)" fg:x="467" fg:w="1"/><text x="36.2562%" y="223.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="36.0833%" y="213" width="0.0771%" height="15" fill="rgb(213,199,42)" fg:x="468" fg:w="1"/><text x="36.3333%" y="223.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (10 samples, 0.77%)</title><rect x="36.1604%" y="213" width="0.7710%" height="15" fill="rgb(235,201,11)" fg:x="469" fg:w="10"/><text x="36.4104%" y="223.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (8 samples, 0.62%)</title><rect x="36.3146%" y="197" width="0.6168%" height="15" fill="rgb(207,46,11)" fg:x="471" fg:w="8"/><text x="36.5646%" y="207.50"></text></g><g><title>http::status::StatusCode::canonical_reason (2 samples, 0.15%)</title><rect x="36.9314%" y="213" width="0.1542%" height="15" fill="rgb(241,35,35)" fg:x="479" fg:w="2"/><text x="37.1814%" y="223.50"></text></g><g><title>httparse::parse_headers_iter_uninit (7 samples, 0.54%)</title><rect x="37.0856%" y="213" width="0.5397%" height="15" fill="rgb(243,32,47)" fg:x="481" fg:w="7"/><text x="37.3356%" y="223.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (1 samples, 0.08%)</title><rect x="37.5482%" y="197" width="0.0771%" height="15" fill="rgb(247,202,23)" fg:x="487" fg:w="1"/><text x="37.7982%" y="207.50"></text></g><g><title>httparse::parse_reason (2 samples, 0.15%)</title><rect x="37.6253%" y="213" width="0.1542%" height="15" fill="rgb(219,102,11)" fg:x="488" fg:w="2"/><text x="37.8753%" y="223.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::poll_canceled (1 samples, 0.08%)</title><rect x="37.7795%" y="213" width="0.0771%" height="15" fill="rgb(243,110,44)" fg:x="490" fg:w="1"/><text x="38.0295%" y="223.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (1 samples, 0.08%)</title><rect x="37.8566%" y="197" width="0.0771%" height="15" fill="rgb(222,74,54)" fg:x="491" fg:w="1"/><text x="38.1066%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.08%)</title><rect x="38.0108%" y="181" width="0.0771%" height="15" fill="rgb(216,99,12)" fg:x="493" fg:w="1"/><text x="38.2608%" y="191.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (7 samples, 0.54%)</title><rect x="37.8566%" y="213" width="0.5397%" height="15" fill="rgb(226,22,26)" fg:x="491" fg:w="7"/><text x="38.1066%" y="223.50"></text></g><g><title>hyper::headers::is_chunked (6 samples, 0.46%)</title><rect x="37.9337%" y="197" width="0.4626%" height="15" fill="rgb(217,163,10)" fg:x="492" fg:w="6"/><text x="38.1837%" y="207.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (4 samples, 0.31%)</title><rect x="38.0879%" y="181" width="0.3084%" height="15" fill="rgb(213,25,53)" fg:x="494" fg:w="4"/><text x="38.3379%" y="191.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.15%)</title><rect x="38.2421%" y="165" width="0.1542%" height="15" fill="rgb(252,105,26)" fg:x="496" fg:w="2"/><text x="38.4921%" y="175.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (2 samples, 0.15%)</title><rect x="38.6276%" y="197" width="0.1542%" height="15" fill="rgb(220,39,43)" fg:x="501" fg:w="2"/><text x="38.8776%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2 samples, 0.15%)</title><rect x="38.6276%" y="181" width="0.1542%" height="15" fill="rgb(229,68,48)" fg:x="501" fg:w="2"/><text x="38.8776%" y="191.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2 samples, 0.15%)</title><rect x="38.6276%" y="165" width="0.1542%" height="15" fill="rgb(252,8,32)" fg:x="501" fg:w="2"/><text x="38.8776%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.08%)</title><rect x="38.7047%" y="149" width="0.0771%" height="15" fill="rgb(223,20,43)" fg:x="502" fg:w="1"/><text x="38.9547%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.08%)</title><rect x="38.7047%" y="133" width="0.0771%" height="15" fill="rgb(229,81,49)" fg:x="502" fg:w="1"/><text x="38.9547%" y="143.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.08%)</title><rect x="38.7818%" y="197" width="0.0771%" height="15" fill="rgb(236,28,36)" fg:x="503" fg:w="1"/><text x="39.0318%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (2 samples, 0.15%)</title><rect x="39.3215%" y="181" width="0.1542%" height="15" fill="rgb(249,185,26)" fg:x="510" fg:w="2"/><text x="39.5715%" y="191.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.08%)</title><rect x="39.3986%" y="165" width="0.0771%" height="15" fill="rgb(249,174,33)" fg:x="511" fg:w="1"/><text x="39.6486%" y="175.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.08%)</title><rect x="39.4757%" y="181" width="0.0771%" height="15" fill="rgb(233,201,37)" fg:x="512" fg:w="1"/><text x="39.7257%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (16 samples, 1.23%)</title><rect x="38.3963%" y="213" width="1.2336%" height="15" fill="rgb(221,78,26)" fg:x="498" fg:w="16"/><text x="38.6463%" y="223.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (10 samples, 0.77%)</title><rect x="38.8589%" y="197" width="0.7710%" height="15" fill="rgb(250,127,30)" fg:x="504" fg:w="10"/><text x="39.1089%" y="207.50"></text></g><g><title>bytes::bytes_mut::shared_v_is_unique (1 samples, 0.08%)</title><rect x="39.5528%" y="181" width="0.0771%" height="15" fill="rgb(230,49,44)" fg:x="513" fg:w="1"/><text x="39.8028%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.08%)</title><rect x="40.0154%" y="197" width="0.0771%" height="15" fill="rgb(229,67,23)" fg:x="519" fg:w="1"/><text x="40.2654%" y="207.50"></text></g><g><title>core::fmt::write (3 samples, 0.23%)</title><rect x="40.0925%" y="197" width="0.2313%" height="15" fill="rgb(249,83,47)" fg:x="520" fg:w="3"/><text x="40.3425%" y="207.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.15%)</title><rect x="40.1696%" y="181" width="0.1542%" height="15" fill="rgb(215,43,3)" fg:x="521" fg:w="2"/><text x="40.4196%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="40.2467%" y="165" width="0.0771%" height="15" fill="rgb(238,154,13)" fg:x="522" fg:w="1"/><text x="40.4967%" y="175.50"></text></g><g><title>&lt;hyper::proto::h1::role::FastWrite as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="40.2467%" y="149" width="0.0771%" height="15" fill="rgb(219,56,2)" fg:x="522" fg:w="1"/><text x="40.4967%" y="159.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert2 (4 samples, 0.31%)</title><rect x="40.3238%" y="197" width="0.3084%" height="15" fill="rgb(233,0,4)" fg:x="523" fg:w="4"/><text x="40.5738%" y="207.50"></text></g><g><title>hyper::headers::content_length_parse_all (2 samples, 0.15%)</title><rect x="40.6322%" y="197" width="0.1542%" height="15" fill="rgb(235,30,7)" fg:x="527" fg:w="2"/><text x="40.8822%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (1 samples, 0.08%)</title><rect x="40.7093%" y="181" width="0.0771%" height="15" fill="rgb(250,79,13)" fg:x="528" fg:w="1"/><text x="40.9593%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (17 samples, 1.31%)</title><rect x="39.6299%" y="213" width="1.3107%" height="15" fill="rgb(211,146,34)" fg:x="514" fg:w="17"/><text x="39.8799%" y="223.50"></text></g><g><title>hyper::proto::h1::role::write_headers (2 samples, 0.15%)</title><rect x="40.7864%" y="197" width="0.1542%" height="15" fill="rgb(228,22,38)" fg:x="529" fg:w="2"/><text x="41.0364%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::encode::EncodedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (2 samples, 0.15%)</title><rect x="41.7116%" y="197" width="0.1542%" height="15" fill="rgb(235,168,5)" fg:x="541" fg:w="2"/><text x="41.9616%" y="207.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Write&gt;::poll_flush (1 samples, 0.08%)</title><rect x="41.8658%" y="197" width="0.0771%" height="15" fill="rgb(221,155,16)" fg:x="543" fg:w="1"/><text x="42.1158%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.08%)</title><rect x="41.9429%" y="197" width="0.0771%" height="15" fill="rgb(215,215,53)" fg:x="544" fg:w="1"/><text x="42.1929%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.08%)</title><rect x="41.9429%" y="181" width="0.0771%" height="15" fill="rgb(223,4,10)" fg:x="544" fg:w="1"/><text x="42.1929%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.08%)</title><rect x="42.0200%" y="197" width="0.0771%" height="15" fill="rgb(234,103,6)" fg:x="545" fg:w="1"/><text x="42.2700%" y="207.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (16 samples, 1.23%)</title><rect x="40.9406%" y="213" width="1.2336%" height="15" fill="rgb(227,97,0)" fg:x="531" fg:w="16"/><text x="41.1906%" y="223.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.08%)</title><rect x="42.0971%" y="197" width="0.0771%" height="15" fill="rgb(234,150,53)" fg:x="546" fg:w="1"/><text x="42.3471%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (11 samples, 0.85%)</title><rect x="42.1742%" y="213" width="0.8481%" height="15" fill="rgb(228,201,54)" fg:x="547" fg:w="11"/><text x="42.4242%" y="223.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (9 samples, 0.69%)</title><rect x="42.3285%" y="197" width="0.6939%" height="15" fill="rgb(222,22,37)" fg:x="549" fg:w="9"/><text x="42.5785%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.46%)</title><rect x="42.5598%" y="181" width="0.4626%" height="15" fill="rgb(237,53,32)" fg:x="552" fg:w="6"/><text x="42.8098%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.46%)</title><rect x="42.5598%" y="165" width="0.4626%" height="15" fill="rgb(233,25,53)" fg:x="552" fg:w="6"/><text x="42.8098%" y="175.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (1 samples, 0.08%)</title><rect x="43.0224%" y="213" width="0.0771%" height="15" fill="rgb(210,40,34)" fg:x="558" fg:w="1"/><text x="43.2724%" y="223.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (143 samples, 11.03%)</title><rect x="32.5366%" y="229" width="11.0254%" height="15" fill="rgb(241,220,44)" fg:x="422" fg:w="143"/><text x="32.7866%" y="239.50">&lt;hyper::client::..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (6 samples, 0.46%)</title><rect x="43.0995%" y="213" width="0.4626%" height="15" fill="rgb(235,28,35)" fg:x="559" fg:w="6"/><text x="43.3495%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.15%)</title><rect x="43.4079%" y="197" width="0.1542%" height="15" fill="rgb(210,56,17)" fg:x="563" fg:w="2"/><text x="43.6579%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (18 samples, 1.39%)</title><rect x="45.3354%" y="197" width="1.3878%" height="15" fill="rgb(224,130,29)" fg:x="588" fg:w="18"/><text x="45.5854%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (9 samples, 0.69%)</title><rect x="46.0293%" y="181" width="0.6939%" height="15" fill="rgb(235,212,8)" fg:x="597" fg:w="9"/><text x="46.2793%" y="191.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (2 samples, 0.15%)</title><rect x="48.3423%" y="165" width="0.1542%" height="15" fill="rgb(223,33,50)" fg:x="627" fg:w="2"/><text x="48.5923%" y="175.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="49.3446%" y="117" width="0.0771%" height="15" fill="rgb(219,149,13)" fg:x="640" fg:w="1"/><text x="49.5946%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (7 samples, 0.54%)</title><rect x="49.1904%" y="133" width="0.5397%" height="15" fill="rgb(250,156,29)" fg:x="638" fg:w="7"/><text x="49.4404%" y="143.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (4 samples, 0.31%)</title><rect x="49.4217%" y="117" width="0.3084%" height="15" fill="rgb(216,193,19)" fg:x="641" fg:w="4"/><text x="49.6717%" y="127.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (2 samples, 0.15%)</title><rect x="49.5759%" y="101" width="0.1542%" height="15" fill="rgb(216,135,14)" fg:x="643" fg:w="2"/><text x="49.8259%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (13 samples, 1.00%)</title><rect x="49.0362%" y="149" width="1.0023%" height="15" fill="rgb(241,47,5)" fg:x="636" fg:w="13"/><text x="49.2862%" y="159.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (4 samples, 0.31%)</title><rect x="49.7301%" y="133" width="0.3084%" height="15" fill="rgb(233,42,35)" fg:x="645" fg:w="4"/><text x="49.9801%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.15%)</title><rect x="49.8843%" y="117" width="0.1542%" height="15" fill="rgb(231,13,6)" fg:x="647" fg:w="2"/><text x="50.1343%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.15%)</title><rect x="51.3493%" y="53" width="0.1542%" height="15" fill="rgb(207,181,40)" fg:x="666" fg:w="2"/><text x="51.5993%" y="63.50"></text></g><g><title>combine::parser::Parser::parse_mode (4 samples, 0.31%)</title><rect x="51.3493%" y="69" width="0.3084%" height="15" fill="rgb(254,173,49)" fg:x="666" fg:w="4"/><text x="51.5993%" y="79.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2 samples, 0.15%)</title><rect x="51.5035%" y="53" width="0.1542%" height="15" fill="rgb(221,1,38)" fg:x="668" fg:w="2"/><text x="51.7535%" y="63.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (2 samples, 0.15%)</title><rect x="51.5035%" y="37" width="0.1542%" height="15" fill="rgb(206,124,46)" fg:x="668" fg:w="2"/><text x="51.7535%" y="47.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (5 samples, 0.39%)</title><rect x="51.3493%" y="85" width="0.3855%" height="15" fill="rgb(249,21,11)" fg:x="666" fg:w="5"/><text x="51.5993%" y="95.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="51.6577%" y="69" width="0.0771%" height="15" fill="rgb(222,201,40)" fg:x="670" fg:w="1"/><text x="51.9077%" y="79.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.08%)</title><rect x="51.6577%" y="53" width="0.0771%" height="15" fill="rgb(235,61,29)" fg:x="670" fg:w="1"/><text x="51.9077%" y="63.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (4 samples, 0.31%)</title><rect x="51.7348%" y="85" width="0.3084%" height="15" fill="rgb(219,207,3)" fg:x="671" fg:w="4"/><text x="51.9848%" y="95.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (1 samples, 0.08%)</title><rect x="51.9661%" y="69" width="0.0771%" height="15" fill="rgb(222,56,46)" fg:x="674" fg:w="1"/><text x="52.2161%" y="79.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="52.0432%" y="69" width="0.0771%" height="15" fill="rgb(239,76,54)" fg:x="675" fg:w="1"/><text x="52.2932%" y="79.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (18 samples, 1.39%)</title><rect x="50.8096%" y="101" width="1.3878%" height="15" fill="rgb(231,124,27)" fg:x="659" fg:w="18"/><text x="51.0596%" y="111.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.15%)</title><rect x="52.0432%" y="85" width="0.1542%" height="15" fill="rgb(249,195,6)" fg:x="675" fg:w="2"/><text x="52.2932%" y="95.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.08%)</title><rect x="52.1203%" y="69" width="0.0771%" height="15" fill="rgb(237,174,47)" fg:x="676" fg:w="1"/><text x="52.3703%" y="79.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.08%)</title><rect x="52.1203%" y="53" width="0.0771%" height="15" fill="rgb(206,201,31)" fg:x="676" fg:w="1"/><text x="52.3703%" y="63.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (26 samples, 2.00%)</title><rect x="50.2699%" y="117" width="2.0046%" height="15" fill="rgb(231,57,52)" fg:x="652" fg:w="26"/><text x="50.5199%" y="127.50">&lt;..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="52.1974%" y="101" width="0.0771%" height="15" fill="rgb(248,177,22)" fg:x="677" fg:w="1"/><text x="52.4474%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (30 samples, 2.31%)</title><rect x="50.0386%" y="149" width="2.3130%" height="15" fill="rgb(215,211,37)" fg:x="649" fg:w="30"/><text x="50.2886%" y="159.50">c..</text></g><g><title>combine::parser::Parser::parse_mode (28 samples, 2.16%)</title><rect x="50.1928%" y="133" width="2.1588%" height="15" fill="rgb(241,128,51)" fg:x="651" fg:w="28"/><text x="50.4428%" y="143.50">c..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.2745%" y="117" width="0.0771%" height="15" fill="rgb(227,165,31)" fg:x="678" fg:w="1"/><text x="52.5245%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.2745%" y="101" width="0.0771%" height="15" fill="rgb(228,167,24)" fg:x="678" fg:w="1"/><text x="52.5245%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="52.5058%" y="133" width="0.0771%" height="15" fill="rgb(228,143,12)" fg:x="681" fg:w="1"/><text x="52.7558%" y="143.50"></text></g><g><title>combine::parser::Parser::parse_mode (5 samples, 0.39%)</title><rect x="52.3516%" y="149" width="0.3855%" height="15" fill="rgb(249,149,8)" fg:x="679" fg:w="5"/><text x="52.6016%" y="159.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2 samples, 0.15%)</title><rect x="52.5829%" y="133" width="0.1542%" height="15" fill="rgb(243,35,44)" fg:x="682" fg:w="2"/><text x="52.8329%" y="143.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.08%)</title><rect x="52.6600%" y="117" width="0.0771%" height="15" fill="rgb(246,89,9)" fg:x="683" fg:w="1"/><text x="52.9100%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (58 samples, 4.47%)</title><rect x="48.4965%" y="165" width="4.4719%" height="15" fill="rgb(233,213,13)" fg:x="629" fg:w="58"/><text x="48.7465%" y="175.50">combi..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (3 samples, 0.23%)</title><rect x="52.7371%" y="149" width="0.2313%" height="15" fill="rgb(233,141,41)" fg:x="684" fg:w="3"/><text x="52.9871%" y="159.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (72 samples, 5.55%)</title><rect x="47.5713%" y="181" width="5.5513%" height="15" fill="rgb(239,167,4)" fg:x="617" fg:w="72"/><text x="47.8213%" y="191.50">&lt;combin..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (2 samples, 0.15%)</title><rect x="52.9684%" y="165" width="0.1542%" height="15" fill="rgb(209,217,16)" fg:x="687" fg:w="2"/><text x="53.2184%" y="175.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (121 samples, 9.33%)</title><rect x="43.9476%" y="213" width="9.3292%" height="15" fill="rgb(219,88,35)" fg:x="570" fg:w="121"/><text x="44.1976%" y="223.50">&lt;tokio_util::..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (85 samples, 6.55%)</title><rect x="46.7232%" y="197" width="6.5536%" height="15" fill="rgb(220,193,23)" fg:x="606" fg:w="85"/><text x="46.9732%" y="207.50">redis::pa..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.15%)</title><rect x="53.1226%" y="181" width="0.1542%" height="15" fill="rgb(230,90,52)" fg:x="689" fg:w="2"/><text x="53.3726%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="54.0478%" y="197" width="0.0771%" height="15" fill="rgb(252,106,19)" fg:x="701" fg:w="1"/><text x="54.2978%" y="207.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (16 samples, 1.23%)</title><rect x="53.2768%" y="213" width="1.2336%" height="15" fill="rgb(206,74,20)" fg:x="691" fg:w="16"/><text x="53.5268%" y="223.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (5 samples, 0.39%)</title><rect x="54.1249%" y="197" width="0.3855%" height="15" fill="rgb(230,138,44)" fg:x="702" fg:w="5"/><text x="54.3749%" y="207.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.08%)</title><rect x="54.4333%" y="181" width="0.0771%" height="15" fill="rgb(235,182,43)" fg:x="706" fg:w="1"/><text x="54.6833%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (2 samples, 0.15%)</title><rect x="55.2043%" y="197" width="0.1542%" height="15" fill="rgb(242,16,51)" fg:x="716" fg:w="2"/><text x="55.4543%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.15%)</title><rect x="55.5127%" y="181" width="0.1542%" height="15" fill="rgb(248,9,4)" fg:x="720" fg:w="2"/><text x="55.7627%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.15%)</title><rect x="55.6669%" y="181" width="0.1542%" height="15" fill="rgb(210,31,22)" fg:x="722" fg:w="2"/><text x="55.9169%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (163 samples, 12.57%)</title><rect x="43.5621%" y="229" width="12.5675%" height="15" fill="rgb(239,54,39)" fg:x="565" fg:w="163"/><text x="43.8121%" y="239.50">&lt;redis::aio::multip..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (21 samples, 1.62%)</title><rect x="54.5104%" y="213" width="1.6191%" height="15" fill="rgb(230,99,41)" fg:x="707" fg:w="21"/><text x="54.7604%" y="223.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (10 samples, 0.77%)</title><rect x="55.3585%" y="197" width="0.7710%" height="15" fill="rgb(253,106,12)" fg:x="718" fg:w="10"/><text x="55.6085%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (4 samples, 0.31%)</title><rect x="55.8211%" y="181" width="0.3084%" height="15" fill="rgb(213,46,41)" fg:x="724" fg:w="4"/><text x="56.0711%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;reqwest::connect::sealed::Conn,reqwest::async_impl::body::Body&gt;&gt;&gt; (2 samples, 0.15%)</title><rect x="56.1295%" y="229" width="0.1542%" height="15" fill="rgb(215,133,35)" fg:x="728" fg:w="2"/><text x="56.3795%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_rustls::stream::MaybeHttpsStream&lt;hyper_util::rt::tokio::TokioIo&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="56.2066%" y="213" width="0.0771%" height="15" fill="rgb(213,28,5)" fg:x="729" fg:w="1"/><text x="56.4566%" y="223.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.08%)</title><rect x="56.6692%" y="213" width="0.0771%" height="15" fill="rgb(215,77,49)" fg:x="735" fg:w="1"/><text x="56.9192%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (9 samples, 0.69%)</title><rect x="56.2837%" y="229" width="0.6939%" height="15" fill="rgb(248,100,22)" fg:x="730" fg:w="9"/><text x="56.5337%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.23%)</title><rect x="56.7463%" y="213" width="0.2313%" height="15" fill="rgb(208,67,9)" fg:x="736" fg:w="3"/><text x="56.9963%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.15%)</title><rect x="56.8234%" y="197" width="0.1542%" height="15" fill="rgb(219,133,21)" fg:x="737" fg:w="2"/><text x="57.0734%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.15%)</title><rect x="56.9776%" y="229" width="0.1542%" height="15" fill="rgb(246,46,29)" fg:x="739" fg:w="2"/><text x="57.2276%" y="239.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.23%)</title><rect x="57.1318%" y="229" width="0.2313%" height="15" fill="rgb(246,185,52)" fg:x="741" fg:w="3"/><text x="57.3818%" y="239.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (352 samples, 27.14%)</title><rect x="30.8404%" y="245" width="27.1396%" height="15" fill="rgb(252,136,11)" fg:x="400" fg:w="352"/><text x="31.0904%" y="255.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; a..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (8 samples, 0.62%)</title><rect x="57.3631%" y="229" width="0.6168%" height="15" fill="rgb(219,138,53)" fg:x="744" fg:w="8"/><text x="57.6131%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="58.4426%" y="213" width="0.0771%" height="15" fill="rgb(211,51,23)" fg:x="758" fg:w="1"/><text x="58.6926%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (5 samples, 0.39%)</title><rect x="58.6739%" y="197" width="0.3855%" height="15" fill="rgb(247,221,28)" fg:x="761" fg:w="5"/><text x="58.9239%" y="207.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.69%)</title><rect x="58.5197%" y="213" width="0.6939%" height="15" fill="rgb(251,222,45)" fg:x="759" fg:w="9"/><text x="58.7697%" y="223.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.15%)</title><rect x="59.0594%" y="197" width="0.1542%" height="15" fill="rgb(217,162,53)" fg:x="766" fg:w="2"/><text x="59.3094%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.08%)</title><rect x="59.2136%" y="213" width="0.0771%" height="15" fill="rgb(229,93,14)" fg:x="768" fg:w="1"/><text x="59.4636%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.31%)</title><rect x="59.5991%" y="197" width="0.3084%" height="15" fill="rgb(209,67,49)" fg:x="773" fg:w="4"/><text x="59.8491%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="59.6762%" y="181" width="0.2313%" height="15" fill="rgb(213,87,29)" fg:x="774" fg:w="3"/><text x="59.9262%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="60.6014%" y="149" width="0.0771%" height="15" fill="rgb(205,151,52)" fg:x="786" fg:w="1"/><text x="60.8514%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (11 samples, 0.85%)</title><rect x="60.2930%" y="165" width="0.8481%" height="15" fill="rgb(253,215,39)" fg:x="782" fg:w="11"/><text x="60.5430%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (6 samples, 0.46%)</title><rect x="60.6785%" y="149" width="0.4626%" height="15" fill="rgb(221,220,41)" fg:x="787" fg:w="6"/><text x="60.9285%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.15%)</title><rect x="60.9869%" y="133" width="0.1542%" height="15" fill="rgb(218,133,21)" fg:x="791" fg:w="2"/><text x="61.2369%" y="143.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.08%)</title><rect x="61.1411%" y="165" width="0.0771%" height="15" fill="rgb(221,193,43)" fg:x="793" fg:w="1"/><text x="61.3911%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (40 samples, 3.08%)</title><rect x="58.2113%" y="229" width="3.0840%" height="15" fill="rgb(240,128,52)" fg:x="755" fg:w="40"/><text x="58.4613%" y="239.50">&lt;ri..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (26 samples, 2.00%)</title><rect x="59.2907%" y="213" width="2.0046%" height="15" fill="rgb(253,114,12)" fg:x="769" fg:w="26"/><text x="59.5407%" y="223.50">r..</text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (18 samples, 1.39%)</title><rect x="59.9075%" y="197" width="1.3878%" height="15" fill="rgb(215,223,47)" fg:x="777" fg:w="18"/><text x="60.1575%" y="207.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (16 samples, 1.23%)</title><rect x="60.0617%" y="181" width="1.2336%" height="15" fill="rgb(248,225,23)" fg:x="779" fg:w="16"/><text x="60.3117%" y="191.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.08%)</title><rect x="61.2182%" y="165" width="0.0771%" height="15" fill="rgb(250,108,0)" fg:x="794" fg:w="1"/><text x="61.4682%" y="175.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.08%)</title><rect x="61.2953%" y="229" width="0.0771%" height="15" fill="rgb(228,208,7)" fg:x="795" fg:w="1"/><text x="61.5453%" y="239.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::mpsc_to_redis_worker::mpsc_to_redis_worker::{{closure}} (46 samples, 3.55%)</title><rect x="57.9800%" y="245" width="3.5466%" height="15" fill="rgb(244,45,10)" fg:x="752" fg:w="46"/><text x="58.2300%" y="255.50">rinh..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.15%)</title><rect x="61.3724%" y="229" width="0.1542%" height="15" fill="rgb(207,125,25)" fg:x="796" fg:w="2"/><text x="61.6224%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="62.6831%" y="229" width="0.0771%" height="15" fill="rgb(210,195,18)" fg:x="813" fg:w="1"/><text x="62.9331%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="64.4564%" y="165" width="0.0771%" height="15" fill="rgb(249,80,12)" fg:x="836" fg:w="1"/><text x="64.7064%" y="175.50"></text></g><g><title>core::fmt::write (4 samples, 0.31%)</title><rect x="64.3022%" y="181" width="0.3084%" height="15" fill="rgb(221,65,9)" fg:x="834" fg:w="4"/><text x="64.5522%" y="191.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.08%)</title><rect x="64.5335%" y="165" width="0.0771%" height="15" fill="rgb(235,49,36)" fg:x="837" fg:w="1"/><text x="64.7835%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="64.5335%" y="149" width="0.0771%" height="15" fill="rgb(225,32,20)" fg:x="837" fg:w="1"/><text x="64.7835%" y="159.50"></text></g><g><title>url::host::Host::parse (9 samples, 0.69%)</title><rect x="64.6106%" y="181" width="0.6939%" height="15" fill="rgb(215,141,46)" fg:x="838" fg:w="9"/><text x="64.8606%" y="191.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (5 samples, 0.39%)</title><rect x="64.9190%" y="165" width="0.3855%" height="15" fill="rgb(250,160,47)" fg:x="842" fg:w="5"/><text x="65.1690%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path (4 samples, 0.31%)</title><rect x="65.3045%" y="181" width="0.3084%" height="15" fill="rgb(216,222,40)" fg:x="847" fg:w="4"/><text x="65.5545%" y="191.50"></text></g><g><title>url::parser::Parser::check_url_code_point (2 samples, 0.15%)</title><rect x="65.4588%" y="165" width="0.1542%" height="15" fill="rgb(234,217,39)" fg:x="849" fg:w="2"/><text x="65.7088%" y="175.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (41 samples, 3.16%)</title><rect x="62.7602%" y="229" width="3.1611%" height="15" fill="rgb(207,178,40)" fg:x="814" fg:w="41"/><text x="63.0102%" y="239.50">&lt;&amp;s..</text></g><g><title>url::ParseOptions::parse (41 samples, 3.16%)</title><rect x="62.7602%" y="213" width="3.1611%" height="15" fill="rgb(221,136,13)" fg:x="814" fg:w="41"/><text x="63.0102%" y="223.50">url..</text></g><g><title>url::parser::Parser::after_double_slash (32 samples, 2.47%)</title><rect x="63.4541%" y="197" width="2.4672%" height="15" fill="rgb(249,199,10)" fg:x="823" fg:w="32"/><text x="63.7041%" y="207.50">ur..</text></g><g><title>url::parser::Parser::with_query_and_fragment (4 samples, 0.31%)</title><rect x="65.6130%" y="181" width="0.3084%" height="15" fill="rgb(249,222,13)" fg:x="851" fg:w="4"/><text x="65.8630%" y="191.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (2 samples, 0.15%)</title><rect x="65.7672%" y="165" width="0.1542%" height="15" fill="rgb(244,185,38)" fg:x="853" fg:w="2"/><text x="66.0172%" y="175.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.15%)</title><rect x="66.9237%" y="181" width="0.1542%" height="15" fill="rgb(236,202,9)" fg:x="868" fg:w="2"/><text x="67.1737%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4341 (3 samples, 0.23%)</title><rect x="67.0779%" y="181" width="0.2313%" height="15" fill="rgb(250,229,37)" fg:x="870" fg:w="3"/><text x="67.3279%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="67.0779%" y="165" width="0.2313%" height="15" fill="rgb(206,174,23)" fg:x="870" fg:w="3"/><text x="67.3279%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="67.1550%" y="149" width="0.1542%" height="15" fill="rgb(211,33,43)" fg:x="871" fg:w="2"/><text x="67.4050%" y="159.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (7 samples, 0.54%)</title><rect x="66.8466%" y="213" width="0.5397%" height="15" fill="rgb(245,58,50)" fg:x="867" fg:w="7"/><text x="67.0966%" y="223.50"></text></g><g><title>core::fmt::write (7 samples, 0.54%)</title><rect x="66.8466%" y="197" width="0.5397%" height="15" fill="rgb(244,68,36)" fg:x="867" fg:w="7"/><text x="67.0966%" y="207.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="67.3092%" y="181" width="0.0771%" height="15" fill="rgb(232,229,15)" fg:x="873" fg:w="1"/><text x="67.5592%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::send_request::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="67.8489%" y="197" width="0.0771%" height="15" fill="rgb(254,30,23)" fg:x="880" fg:w="1"/><text x="68.0989%" y="207.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (3 samples, 0.23%)</title><rect x="69.4680%" y="181" width="0.2313%" height="15" fill="rgb(235,160,14)" fg:x="901" fg:w="3"/><text x="69.7180%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.15%)</title><rect x="69.5451%" y="165" width="0.1542%" height="15" fill="rgb(212,155,44)" fg:x="902" fg:w="2"/><text x="69.7951%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.15%)</title><rect x="69.9306%" y="165" width="0.1542%" height="15" fill="rgb(226,2,50)" fg:x="907" fg:w="2"/><text x="70.1806%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.15%)</title><rect x="69.9306%" y="149" width="0.1542%" height="15" fill="rgb(234,177,6)" fg:x="907" fg:w="2"/><text x="70.1806%" y="159.50"></text></g><g><title>hyper_util::client::legacy::pool::Pool&lt;T,K&gt;::reuse (2 samples, 0.15%)</title><rect x="70.0848%" y="165" width="0.1542%" height="15" fill="rgb(217,24,9)" fg:x="909" fg:w="2"/><text x="70.3348%" y="175.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.08%)</title><rect x="70.1619%" y="149" width="0.0771%" height="15" fill="rgb(220,13,46)" fg:x="910" fg:w="1"/><text x="70.4119%" y="159.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (8 samples, 0.62%)</title><rect x="69.6993%" y="181" width="0.6168%" height="15" fill="rgb(239,221,27)" fg:x="904" fg:w="8"/><text x="69.9493%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.08%)</title><rect x="70.2390%" y="165" width="0.0771%" height="15" fill="rgb(222,198,25)" fg:x="911" fg:w="1"/><text x="70.4890%" y="175.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (2 samples, 0.15%)</title><rect x="70.3161%" y="181" width="0.1542%" height="15" fill="rgb(211,99,13)" fg:x="912" fg:w="2"/><text x="70.5661%" y="191.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.15%)</title><rect x="70.3161%" y="165" width="0.1542%" height="15" fill="rgb(232,111,31)" fg:x="912" fg:w="2"/><text x="70.5661%" y="175.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (2 samples, 0.15%)</title><rect x="70.3161%" y="149" width="0.1542%" height="15" fill="rgb(245,82,37)" fg:x="912" fg:w="2"/><text x="70.5661%" y="159.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (2 samples, 0.15%)</title><rect x="70.3161%" y="133" width="0.1542%" height="15" fill="rgb(227,149,46)" fg:x="912" fg:w="2"/><text x="70.5661%" y="143.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (2 samples, 0.15%)</title><rect x="70.3161%" y="117" width="0.1542%" height="15" fill="rgb(218,36,50)" fg:x="912" fg:w="2"/><text x="70.5661%" y="127.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.08%)</title><rect x="70.3932%" y="101" width="0.0771%" height="15" fill="rgb(226,80,48)" fg:x="913" fg:w="1"/><text x="70.6432%" y="111.50"></text></g><g><title>hyper_util::client::legacy::connect::dns::SocketAddrs::try_parse (1 samples, 0.08%)</title><rect x="70.3932%" y="85" width="0.0771%" height="15" fill="rgb(238,224,15)" fg:x="913" fg:w="1"/><text x="70.6432%" y="95.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (1 samples, 0.08%)</title><rect x="70.3932%" y="69" width="0.0771%" height="15" fill="rgb(241,136,10)" fg:x="913" fg:w="1"/><text x="70.6432%" y="79.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (1 samples, 0.08%)</title><rect x="70.3932%" y="53" width="0.0771%" height="15" fill="rgb(208,32,45)" fg:x="913" fg:w="1"/><text x="70.6432%" y="63.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (1 samples, 0.08%)</title><rect x="70.3932%" y="37" width="0.0771%" height="15" fill="rgb(207,135,9)" fg:x="913" fg:w="1"/><text x="70.6432%" y="47.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.15%)</title><rect x="70.4703%" y="181" width="0.1542%" height="15" fill="rgb(206,86,44)" fg:x="914" fg:w="2"/><text x="70.7203%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="70.5474%" y="165" width="0.0771%" height="15" fill="rgb(245,177,15)" fg:x="915" fg:w="1"/><text x="70.7974%" y="175.50"></text></g><g><title>&lt;http::uri::port::Port&lt;T&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="70.5474%" y="149" width="0.0771%" height="15" fill="rgb(206,64,50)" fg:x="915" fg:w="1"/><text x="70.7974%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (1 samples, 0.08%)</title><rect x="70.5474%" y="133" width="0.0771%" height="15" fill="rgb(234,36,40)" fg:x="915" fg:w="1"/><text x="70.7974%" y="143.50"></text></g><g><title>bytes::bytes::promotable_even_clone (2 samples, 0.15%)</title><rect x="70.6245%" y="181" width="0.1542%" height="15" fill="rgb(213,64,8)" fg:x="916" fg:w="2"/><text x="70.8745%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (3 samples, 0.23%)</title><rect x="70.7787%" y="181" width="0.2313%" height="15" fill="rgb(210,75,36)" fg:x="918" fg:w="3"/><text x="71.0287%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::http1::SendRequest&lt;reqwest::async_impl::body::Body&gt;::try_send_request::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="71.0100%" y="181" width="0.0771%" height="15" fill="rgb(229,88,21)" fg:x="921" fg:w="1"/><text x="71.2600%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (2 samples, 0.15%)</title><rect x="71.0871%" y="181" width="0.1542%" height="15" fill="rgb(252,204,47)" fg:x="922" fg:w="2"/><text x="71.3371%" y="191.50"></text></g><g><title>http::header::map::VacantEntry&lt;T&gt;::try_insert (1 samples, 0.08%)</title><rect x="71.2413%" y="181" width="0.0771%" height="15" fill="rgb(208,77,27)" fg:x="924" fg:w="1"/><text x="71.4913%" y="191.50"></text></g><g><title>http::uri::authority::host (2 samples, 0.15%)</title><rect x="71.3184%" y="181" width="0.1542%" height="15" fill="rgb(221,76,26)" fg:x="925" fg:w="2"/><text x="71.5684%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.2163 (2 samples, 0.15%)</title><rect x="71.3184%" y="165" width="0.1542%" height="15" fill="rgb(225,139,18)" fg:x="925" fg:w="2"/><text x="71.5684%" y="175.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (1 samples, 0.08%)</title><rect x="71.4726%" y="181" width="0.0771%" height="15" fill="rgb(230,137,11)" fg:x="927" fg:w="1"/><text x="71.7226%" y="191.50"></text></g><g><title>hyper_util::client::legacy::client::origin_form (2 samples, 0.15%)</title><rect x="71.5497%" y="181" width="0.1542%" height="15" fill="rgb(212,28,1)" fg:x="928" fg:w="2"/><text x="71.7997%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.08%)</title><rect x="71.6268%" y="165" width="0.0771%" height="15" fill="rgb(248,164,17)" fg:x="929" fg:w="1"/><text x="71.8768%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (59 samples, 4.55%)</title><rect x="67.3863%" y="213" width="4.5490%" height="15" fill="rgb(222,171,42)" fg:x="874" fg:w="59"/><text x="67.6363%" y="223.50">&lt;reqw..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (52 samples, 4.01%)</title><rect x="67.9260%" y="197" width="4.0093%" height="15" fill="rgb(243,84,45)" fg:x="881" fg:w="52"/><text x="68.1760%" y="207.50">hype..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 0.23%)</title><rect x="71.7039%" y="181" width="0.2313%" height="15" fill="rgb(252,49,23)" fg:x="930" fg:w="3"/><text x="71.9539%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (3 samples, 0.23%)</title><rect x="71.7039%" y="165" width="0.2313%" height="15" fill="rgb(215,19,7)" fg:x="930" fg:w="3"/><text x="71.9539%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.6164 (1 samples, 0.08%)</title><rect x="73.7086%" y="165" width="0.0771%" height="15" fill="rgb(238,81,41)" fg:x="956" fg:w="1"/><text x="73.9586%" y="175.50"></text></g><g><title>&lt;url::host::Host&lt;S&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.15%)</title><rect x="73.7857%" y="165" width="0.1542%" height="15" fill="rgb(210,199,37)" fg:x="957" fg:w="2"/><text x="74.0357%" y="175.50"></text></g><g><title>core::fmt::write (6 samples, 0.46%)</title><rect x="73.6315%" y="181" width="0.4626%" height="15" fill="rgb(244,192,49)" fg:x="955" fg:w="6"/><text x="73.8815%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.15%)</title><rect x="73.9399%" y="165" width="0.1542%" height="15" fill="rgb(226,211,11)" fg:x="959" fg:w="2"/><text x="74.1899%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (4 samples, 0.31%)</title><rect x="74.4025%" y="165" width="0.3084%" height="15" fill="rgb(236,162,54)" fg:x="965" fg:w="4"/><text x="74.6525%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6162 (3 samples, 0.23%)</title><rect x="74.4796%" y="149" width="0.2313%" height="15" fill="rgb(220,229,9)" fg:x="966" fg:w="3"/><text x="74.7296%" y="159.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.15%)</title><rect x="74.5567%" y="133" width="0.1542%" height="15" fill="rgb(250,87,22)" fg:x="967" fg:w="2"/><text x="74.8067%" y="143.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (3 samples, 0.23%)</title><rect x="74.7109%" y="165" width="0.2313%" height="15" fill="rgb(239,43,17)" fg:x="969" fg:w="3"/><text x="74.9609%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (2 samples, 0.15%)</title><rect x="74.9422%" y="165" width="0.1542%" height="15" fill="rgb(231,177,25)" fg:x="972" fg:w="2"/><text x="75.1922%" y="175.50"></text></g><g><title>url::host::Host::parse (15 samples, 1.16%)</title><rect x="74.0941%" y="181" width="1.1565%" height="15" fill="rgb(219,179,1)" fg:x="961" fg:w="15"/><text x="74.3441%" y="191.50"></text></g><g><title>url::host::parse_ipv4number (2 samples, 0.15%)</title><rect x="75.0964%" y="165" width="0.1542%" height="15" fill="rgb(238,219,53)" fg:x="974" fg:w="2"/><text x="75.3464%" y="175.50"></text></g><g><title>url::parser::Parser::parse_path (6 samples, 0.46%)</title><rect x="75.2506%" y="181" width="0.4626%" height="15" fill="rgb(232,167,36)" fg:x="976" fg:w="6"/><text x="75.5006%" y="191.50"></text></g><g><title>url::parser::Parser::parse_path_start (3 samples, 0.23%)</title><rect x="75.7132%" y="181" width="0.2313%" height="15" fill="rgb(244,19,51)" fg:x="982" fg:w="3"/><text x="75.9632%" y="191.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (132 samples, 10.18%)</title><rect x="65.9214%" y="229" width="10.1773%" height="15" fill="rgb(224,6,22)" fg:x="855" fg:w="132"/><text x="66.1714%" y="239.50">&lt;reqwest::async..</text></g><g><title>url::ParseOptions::parse (54 samples, 4.16%)</title><rect x="71.9352%" y="213" width="4.1635%" height="15" fill="rgb(224,145,5)" fg:x="933" fg:w="54"/><text x="72.1852%" y="223.50">url::..</text></g><g><title>url::parser::Parser::after_double_slash (50 samples, 3.86%)</title><rect x="72.2436%" y="197" width="3.8551%" height="15" fill="rgb(234,130,49)" fg:x="937" fg:w="50"/><text x="72.4936%" y="207.50">url:..</text></g><g><title>url::parser::Parser::with_query_and_fragment (2 samples, 0.15%)</title><rect x="75.9445%" y="181" width="0.1542%" height="15" fill="rgb(254,6,2)" fg:x="985" fg:w="2"/><text x="76.1945%" y="191.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (2 samples, 0.15%)</title><rect x="75.9445%" y="165" width="0.1542%" height="15" fill="rgb(208,96,46)" fg:x="985" fg:w="2"/><text x="76.1945%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.0239%" y="149" width="0.0771%" height="15" fill="rgb(239,3,39)" fg:x="999" fg:w="1"/><text x="77.2739%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.08%)</title><rect x="77.0239%" y="133" width="0.0771%" height="15" fill="rgb(233,210,1)" fg:x="999" fg:w="1"/><text x="77.2739%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (5 samples, 0.39%)</title><rect x="76.7926%" y="181" width="0.3855%" height="15" fill="rgb(244,137,37)" fg:x="996" fg:w="5"/><text x="77.0426%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (5 samples, 0.39%)</title><rect x="76.7926%" y="165" width="0.3855%" height="15" fill="rgb(240,136,2)" fg:x="996" fg:w="5"/><text x="77.0426%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="77.1010%" y="149" width="0.0771%" height="15" fill="rgb(239,18,37)" fg:x="1000" fg:w="1"/><text x="77.3510%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (9 samples, 0.69%)</title><rect x="76.5613%" y="197" width="0.6939%" height="15" fill="rgb(218,185,22)" fg:x="993" fg:w="9"/><text x="76.8113%" y="207.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.08%)</title><rect x="77.1781%" y="181" width="0.0771%" height="15" fill="rgb(225,218,4)" fg:x="1001" fg:w="1"/><text x="77.4281%" y="191.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="77.4865%" y="165" width="0.0771%" height="15" fill="rgb(230,182,32)" fg:x="1005" fg:w="1"/><text x="77.7365%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (3 samples, 0.23%)</title><rect x="77.5636%" y="165" width="0.2313%" height="15" fill="rgb(242,56,43)" fg:x="1006" fg:w="3"/><text x="77.8136%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (10 samples, 0.77%)</title><rect x="77.2552%" y="197" width="0.7710%" height="15" fill="rgb(233,99,24)" fg:x="1002" fg:w="10"/><text x="77.5052%" y="207.50"></text></g><g><title>core::fmt::write (7 samples, 0.54%)</title><rect x="77.4865%" y="181" width="0.5397%" height="15" fill="rgb(234,209,42)" fg:x="1005" fg:w="7"/><text x="77.7365%" y="191.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (3 samples, 0.23%)</title><rect x="77.7949%" y="165" width="0.2313%" height="15" fill="rgb(227,7,12)" fg:x="1009" fg:w="3"/><text x="78.0449%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (2 samples, 0.15%)</title><rect x="77.8720%" y="149" width="0.1542%" height="15" fill="rgb(245,203,43)" fg:x="1010" fg:w="2"/><text x="78.1220%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.9491%" y="133" width="0.0771%" height="15" fill="rgb(238,205,33)" fg:x="1011" fg:w="1"/><text x="78.1991%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="78.0262%" y="197" width="0.0771%" height="15" fill="rgb(231,56,7)" fg:x="1012" fg:w="1"/><text x="78.2762%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (28 samples, 2.16%)</title><rect x="76.0987%" y="229" width="2.1588%" height="15" fill="rgb(244,186,29)" fg:x="987" fg:w="28"/><text x="76.3487%" y="239.50">&lt;..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (25 samples, 1.93%)</title><rect x="76.3300%" y="213" width="1.9275%" height="15" fill="rgb(234,111,31)" fg:x="990" fg:w="25"/><text x="76.5800%" y="223.50">r..</text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (2 samples, 0.15%)</title><rect x="78.1033%" y="197" width="0.1542%" height="15" fill="rgb(241,149,10)" fg:x="1013" fg:w="2"/><text x="78.3533%" y="207.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="79.7224%" y="165" width="0.0771%" height="15" fill="rgb(249,206,44)" fg:x="1034" fg:w="1"/><text x="79.9724%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;::send::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="79.7995%" y="165" width="0.0771%" height="15" fill="rgb(251,153,30)" fg:x="1035" fg:w="1"/><text x="80.0495%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (8 samples, 0.62%)</title><rect x="79.4140%" y="197" width="0.6168%" height="15" fill="rgb(239,152,38)" fg:x="1030" fg:w="8"/><text x="79.6640%" y="207.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (7 samples, 0.54%)</title><rect x="79.4911%" y="181" width="0.5397%" height="15" fill="rgb(249,139,47)" fg:x="1031" fg:w="7"/><text x="79.7411%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.15%)</title><rect x="79.8766%" y="165" width="0.1542%" height="15" fill="rgb(244,64,35)" fg:x="1036" fg:w="2"/><text x="80.1266%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (2 samples, 0.15%)</title><rect x="79.8766%" y="149" width="0.1542%" height="15" fill="rgb(216,46,15)" fg:x="1036" fg:w="2"/><text x="80.1266%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="80.3392%" y="181" width="0.1542%" height="15" fill="rgb(250,74,19)" fg:x="1042" fg:w="2"/><text x="80.5892%" y="191.50"></text></g><g><title>redis::cmd::args_len (6 samples, 0.46%)</title><rect x="80.4934%" y="181" width="0.4626%" height="15" fill="rgb(249,42,33)" fg:x="1044" fg:w="6"/><text x="80.7434%" y="191.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (25 samples, 1.93%)</title><rect x="79.3369%" y="213" width="1.9275%" height="15" fill="rgb(242,149,17)" fg:x="1029" fg:w="25"/><text x="79.5869%" y="223.50">&lt;..</text></g><g><title>redis::pipeline::encode_pipeline (16 samples, 1.23%)</title><rect x="80.0308%" y="197" width="1.2336%" height="15" fill="rgb(244,29,21)" fg:x="1038" fg:w="16"/><text x="80.2808%" y="207.50"></text></g><g><title>redis::cmd::write_command (4 samples, 0.31%)</title><rect x="80.9561%" y="181" width="0.3084%" height="15" fill="rgb(220,130,37)" fg:x="1050" fg:w="4"/><text x="81.2061%" y="191.50"></text></g><g><title>&lt;core::fmt::Formatter as powerfmt::ext::FormatterExt&gt;::pad_with_width (1 samples, 0.08%)</title><rect x="81.4187%" y="165" width="0.0771%" height="15" fill="rgb(211,67,2)" fg:x="1056" fg:w="1"/><text x="81.6687%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (2 samples, 0.15%)</title><rect x="81.7271%" y="149" width="0.1542%" height="15" fill="rgb(235,68,52)" fg:x="1060" fg:w="2"/><text x="81.9771%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (2 samples, 0.15%)</title><rect x="81.8813%" y="133" width="0.1542%" height="15" fill="rgb(246,142,3)" fg:x="1062" fg:w="2"/><text x="82.1313%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="81.8813%" y="117" width="0.1542%" height="15" fill="rgb(241,25,7)" fg:x="1062" fg:w="2"/><text x="82.1313%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.9584%" y="101" width="0.0771%" height="15" fill="rgb(242,119,39)" fg:x="1063" fg:w="1"/><text x="82.2084%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (4 samples, 0.31%)</title><rect x="81.8813%" y="149" width="0.3084%" height="15" fill="rgb(241,98,45)" fg:x="1062" fg:w="4"/><text x="82.1313%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.15%)</title><rect x="82.0355%" y="133" width="0.1542%" height="15" fill="rgb(254,28,30)" fg:x="1064" fg:w="2"/><text x="82.2855%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.15%)</title><rect x="82.0355%" y="117" width="0.1542%" height="15" fill="rgb(241,142,54)" fg:x="1064" fg:w="2"/><text x="82.2855%" y="127.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (13 samples, 1.00%)</title><rect x="81.4187%" y="181" width="1.0023%" height="15" fill="rgb(222,85,15)" fg:x="1056" fg:w="13"/><text x="81.6687%" y="191.50"></text></g><g><title>core::fmt::write (12 samples, 0.93%)</title><rect x="81.4958%" y="165" width="0.9252%" height="15" fill="rgb(210,85,47)" fg:x="1057" fg:w="12"/><text x="81.7458%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (3 samples, 0.23%)</title><rect x="82.1897%" y="149" width="0.2313%" height="15" fill="rgb(224,206,25)" fg:x="1066" fg:w="3"/><text x="82.4397%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.23%)</title><rect x="82.1897%" y="133" width="0.2313%" height="15" fill="rgb(243,201,19)" fg:x="1066" fg:w="3"/><text x="82.4397%" y="143.50"></text></g><g><title>&lt;deranged::RangedU8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="82.7294%" y="149" width="0.0771%" height="15" fill="rgb(236,59,4)" fg:x="1073" fg:w="1"/><text x="82.9794%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="82.7294%" y="133" width="0.0771%" height="15" fill="rgb(254,179,45)" fg:x="1073" fg:w="1"/><text x="82.9794%" y="143.50"></text></g><g><title>&lt;time::time::Time as core::fmt::Display&gt;::fmt (8 samples, 0.62%)</title><rect x="82.4210%" y="181" width="0.6168%" height="15" fill="rgb(226,14,10)" fg:x="1069" fg:w="8"/><text x="82.6710%" y="191.50"></text></g><g><title>core::fmt::write (6 samples, 0.46%)</title><rect x="82.5752%" y="165" width="0.4626%" height="15" fill="rgb(244,27,41)" fg:x="1071" fg:w="6"/><text x="82.8252%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (3 samples, 0.23%)</title><rect x="82.8065%" y="149" width="0.2313%" height="15" fill="rgb(235,35,32)" fg:x="1074" fg:w="3"/><text x="83.0565%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (1 samples, 0.08%)</title><rect x="83.1149%" y="149" width="0.0771%" height="15" fill="rgb(218,68,31)" fg:x="1078" fg:w="1"/><text x="83.3649%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.1149%" y="133" width="0.0771%" height="15" fill="rgb(207,120,37)" fg:x="1078" fg:w="1"/><text x="83.3649%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.1149%" y="117" width="0.0771%" height="15" fill="rgb(227,98,0)" fg:x="1078" fg:w="1"/><text x="83.3649%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4410 (1 samples, 0.08%)</title><rect x="83.4233%" y="117" width="0.0771%" height="15" fill="rgb(207,7,3)" fg:x="1082" fg:w="1"/><text x="83.6733%" y="127.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (30 samples, 2.31%)</title><rect x="81.2645%" y="213" width="2.3130%" height="15" fill="rgb(206,98,19)" fg:x="1054" fg:w="30"/><text x="81.5145%" y="223.50">&lt;..</text></g><g><title>core::fmt::write (29 samples, 2.24%)</title><rect x="81.3416%" y="197" width="2.2359%" height="15" fill="rgb(217,5,26)" fg:x="1055" fg:w="29"/><text x="81.5916%" y="207.50">c..</text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (7 samples, 0.54%)</title><rect x="83.0378%" y="181" width="0.5397%" height="15" fill="rgb(235,190,38)" fg:x="1077" fg:w="7"/><text x="83.2878%" y="191.50"></text></g><g><title>core::fmt::write (7 samples, 0.54%)</title><rect x="83.0378%" y="165" width="0.5397%" height="15" fill="rgb(247,86,24)" fg:x="1077" fg:w="7"/><text x="83.2878%" y="175.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (5 samples, 0.39%)</title><rect x="83.1920%" y="149" width="0.3855%" height="15" fill="rgb(205,101,16)" fg:x="1079" fg:w="5"/><text x="83.4420%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.23%)</title><rect x="83.3462%" y="133" width="0.2313%" height="15" fill="rgb(246,168,33)" fg:x="1081" fg:w="3"/><text x="83.5962%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (1 samples, 0.08%)</title><rect x="83.5004%" y="117" width="0.0771%" height="15" fill="rgb(231,114,1)" fg:x="1083" fg:w="1"/><text x="83.7504%" y="127.50"></text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f64&gt;::fmt (2 samples, 0.15%)</title><rect x="83.7317%" y="181" width="0.1542%" height="15" fill="rgb(207,184,53)" fg:x="1086" fg:w="2"/><text x="83.9817%" y="191.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (4 samples, 0.31%)</title><rect x="83.8859%" y="165" width="0.3084%" height="15" fill="rgb(224,95,51)" fg:x="1088" fg:w="4"/><text x="84.1359%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (2 samples, 0.15%)</title><rect x="84.0401%" y="149" width="0.1542%" height="15" fill="rgb(212,188,45)" fg:x="1090" fg:w="2"/><text x="84.2901%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.1172%" y="133" width="0.0771%" height="15" fill="rgb(223,154,38)" fg:x="1091" fg:w="1"/><text x="84.3672%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (10 samples, 0.77%)</title><rect x="83.5775%" y="213" width="0.7710%" height="15" fill="rgb(251,22,52)" fg:x="1084" fg:w="10"/><text x="83.8275%" y="223.50"></text></g><g><title>core::fmt::write (10 samples, 0.77%)</title><rect x="83.5775%" y="197" width="0.7710%" height="15" fill="rgb(229,209,22)" fg:x="1084" fg:w="10"/><text x="83.8275%" y="207.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (6 samples, 0.46%)</title><rect x="83.8859%" y="181" width="0.4626%" height="15" fill="rgb(234,138,34)" fg:x="1088" fg:w="6"/><text x="84.1359%" y="191.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (2 samples, 0.15%)</title><rect x="84.1943%" y="165" width="0.1542%" height="15" fill="rgb(212,95,11)" fg:x="1092" fg:w="2"/><text x="84.4443%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.39%)</title><rect x="84.3485%" y="213" width="0.3855%" height="15" fill="rgb(240,179,47)" fg:x="1094" fg:w="5"/><text x="84.5985%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6569%" y="197" width="0.0771%" height="15" fill="rgb(240,163,11)" fg:x="1098" fg:w="1"/><text x="84.9069%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.15%)</title><rect x="84.7340%" y="213" width="0.1542%" height="15" fill="rgb(236,37,12)" fg:x="1099" fg:w="2"/><text x="84.9840%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.8111%" y="197" width="0.0771%" height="15" fill="rgb(232,164,16)" fg:x="1100" fg:w="1"/><text x="85.0611%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (2 samples, 0.15%)</title><rect x="84.8882%" y="213" width="0.1542%" height="15" fill="rgb(244,205,15)" fg:x="1101" fg:w="2"/><text x="85.1382%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.08%)</title><rect x="85.0424%" y="213" width="0.0771%" height="15" fill="rgb(223,117,47)" fg:x="1103" fg:w="1"/><text x="85.2924%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="85.1195%" y="213" width="0.0771%" height="15" fill="rgb(244,107,35)" fg:x="1104" fg:w="1"/><text x="85.3695%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.5821%" y="197" width="0.0771%" height="15" fill="rgb(205,140,8)" fg:x="1110" fg:w="1"/><text x="85.8321%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.08%)</title><rect x="85.6592%" y="197" width="0.0771%" height="15" fill="rgb(228,84,46)" fg:x="1111" fg:w="1"/><text x="85.9092%" y="207.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (8 samples, 0.62%)</title><rect x="85.1966%" y="213" width="0.6168%" height="15" fill="rgb(254,188,9)" fg:x="1105" fg:w="8"/><text x="85.4466%" y="223.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="85.7363%" y="197" width="0.0771%" height="15" fill="rgb(206,112,54)" fg:x="1112" fg:w="1"/><text x="85.9863%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (103 samples, 7.94%)</title><rect x="78.2575%" y="229" width="7.9414%" height="15" fill="rgb(216,84,49)" fg:x="1015" fg:w="103"/><text x="78.5075%" y="239.50">&lt;rinha_de_b..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (5 samples, 0.39%)</title><rect x="85.8134%" y="213" width="0.3855%" height="15" fill="rgb(214,194,35)" fg:x="1113" fg:w="5"/><text x="86.0634%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (1 samples, 0.08%)</title><rect x="86.1218%" y="197" width="0.0771%" height="15" fill="rgb(249,28,3)" fg:x="1117" fg:w="1"/><text x="86.3718%" y="207.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.31%)</title><rect x="87.0470%" y="197" width="0.3084%" height="15" fill="rgb(222,56,52)" fg:x="1129" fg:w="4"/><text x="87.2970%" y="207.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (2 samples, 0.15%)</title><rect x="87.2012%" y="181" width="0.1542%" height="15" fill="rgb(245,217,50)" fg:x="1131" fg:w="2"/><text x="87.4512%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.08%)</title><rect x="87.3554%" y="197" width="0.0771%" height="15" fill="rgb(213,201,24)" fg:x="1133" fg:w="1"/><text x="87.6054%" y="207.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.85%)</title><rect x="86.8157%" y="213" width="0.8481%" height="15" fill="rgb(248,116,28)" fg:x="1126" fg:w="11"/><text x="87.0657%" y="223.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (3 samples, 0.23%)</title><rect x="87.4325%" y="197" width="0.2313%" height="15" fill="rgb(219,72,43)" fg:x="1134" fg:w="3"/><text x="87.6825%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (4 samples, 0.31%)</title><rect x="87.6638%" y="213" width="0.3084%" height="15" fill="rgb(209,138,14)" fg:x="1137" fg:w="4"/><text x="87.9138%" y="223.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="87.9722%" y="213" width="0.0771%" height="15" fill="rgb(222,18,33)" fg:x="1141" fg:w="1"/><text x="88.2222%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::commands::AsyncCommands&gt;::brpop&lt;&amp;str,core::option::Option&lt;(alloc::string::String,alloc::string::String)&gt;&gt;::{{closure}}&gt; (4 samples, 0.31%)</title><rect x="88.0493%" y="213" width="0.3084%" height="15" fill="rgb(213,199,7)" fg:x="1142" fg:w="4"/><text x="88.2993%" y="223.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (5 samples, 0.39%)</title><rect x="88.7433%" y="197" width="0.3855%" height="15" fill="rgb(250,110,10)" fg:x="1151" fg:w="5"/><text x="88.9933%" y="207.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_owned_redis_value (4 samples, 0.31%)</title><rect x="88.8204%" y="181" width="0.3084%" height="15" fill="rgb(248,123,6)" fg:x="1152" fg:w="4"/><text x="89.0704%" y="191.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.15%)</title><rect x="88.9746%" y="165" width="0.1542%" height="15" fill="rgb(206,91,31)" fg:x="1154" fg:w="2"/><text x="89.2246%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.4372%" y="149" width="0.0771%" height="15" fill="rgb(211,154,13)" fg:x="1160" fg:w="1"/><text x="89.6872%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.08%)</title><rect x="89.5143%" y="149" width="0.0771%" height="15" fill="rgb(225,148,7)" fg:x="1161" fg:w="1"/><text x="89.7643%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (6 samples, 0.46%)</title><rect x="89.2830%" y="181" width="0.4626%" height="15" fill="rgb(220,160,43)" fg:x="1158" fg:w="6"/><text x="89.5330%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (6 samples, 0.46%)</title><rect x="89.2830%" y="165" width="0.4626%" height="15" fill="rgb(213,52,39)" fg:x="1158" fg:w="6"/><text x="89.5330%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.15%)</title><rect x="89.5914%" y="149" width="0.1542%" height="15" fill="rgb(243,137,7)" fg:x="1162" fg:w="2"/><text x="89.8414%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.08%)</title><rect x="89.6685%" y="133" width="0.0771%" height="15" fill="rgb(230,79,13)" fg:x="1163" fg:w="1"/><text x="89.9185%" y="143.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (11 samples, 0.85%)</title><rect x="89.1288%" y="197" width="0.8481%" height="15" fill="rgb(247,105,23)" fg:x="1156" fg:w="11"/><text x="89.3788%" y="207.50"></text></g><g><title>redis::cmd::write_command (3 samples, 0.23%)</title><rect x="89.7456%" y="181" width="0.2313%" height="15" fill="rgb(223,179,41)" fg:x="1164" fg:w="3"/><text x="89.9956%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (2 samples, 0.15%)</title><rect x="89.9769%" y="197" width="0.1542%" height="15" fill="rgb(218,9,34)" fg:x="1167" fg:w="2"/><text x="90.2269%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.08%)</title><rect x="90.0540%" y="181" width="0.0771%" height="15" fill="rgb(222,106,8)" fg:x="1168" fg:w="1"/><text x="90.3040%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (54 samples, 4.16%)</title><rect x="86.1989%" y="229" width="4.1635%" height="15" fill="rgb(211,220,0)" fg:x="1118" fg:w="54"/><text x="86.4489%" y="239.50">&lt;rinh..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (26 samples, 2.00%)</title><rect x="88.3577%" y="213" width="2.0046%" height="15" fill="rgb(229,52,16)" fg:x="1146" fg:w="26"/><text x="88.6077%" y="223.50">r..</text></g><g><title>ryu::pretty::format64 (3 samples, 0.23%)</title><rect x="90.1311%" y="197" width="0.2313%" height="15" fill="rgb(212,155,18)" fg:x="1169" fg:w="3"/><text x="90.3811%" y="207.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::routing::in_memory_payment_router::InMemoryPaymentRouter as rinha_de_backend::domain::payment_router::PaymentRouter&gt;::get_processor_for_payment::{{closure}} (1 samples, 0.08%)</title><rect x="90.3624%" y="229" width="0.0771%" height="15" fill="rgb(242,21,14)" fg:x="1172" fg:w="1"/><text x="90.6124%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="90.4395%" y="197" width="0.0771%" height="15" fill="rgb(222,19,48)" fg:x="1173" fg:w="1"/><text x="90.6895%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.15%)</title><rect x="90.4395%" y="229" width="0.1542%" height="15" fill="rgb(232,45,27)" fg:x="1173" fg:w="2"/><text x="90.6895%" y="239.50"></text></g><g><title>core::fmt::write (2 samples, 0.15%)</title><rect x="90.4395%" y="213" width="0.1542%" height="15" fill="rgb(249,103,42)" fg:x="1173" fg:w="2"/><text x="90.6895%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (1 samples, 0.08%)</title><rect x="90.5166%" y="197" width="0.0771%" height="15" fill="rgb(246,81,33)" fg:x="1174" fg:w="1"/><text x="90.7666%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.5166%" y="181" width="0.0771%" height="15" fill="rgb(252,33,42)" fg:x="1174" fg:w="1"/><text x="90.7666%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5166%" y="165" width="0.0771%" height="15" fill="rgb(209,212,41)" fg:x="1174" fg:w="1"/><text x="90.7666%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="90.5937%" y="229" width="0.0771%" height="15" fill="rgb(207,154,6)" fg:x="1175" fg:w="1"/><text x="90.8437%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.08%)</title><rect x="90.6708%" y="229" width="0.0771%" height="15" fill="rgb(223,64,47)" fg:x="1176" fg:w="1"/><text x="90.9208%" y="239.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.08%)</title><rect x="90.6708%" y="213" width="0.0771%" height="15" fill="rgb(211,161,38)" fg:x="1176" fg:w="1"/><text x="90.9208%" y="223.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.15%)</title><rect x="91.1334%" y="213" width="0.1542%" height="15" fill="rgb(219,138,40)" fg:x="1182" fg:w="2"/><text x="91.3834%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (2 samples, 0.15%)</title><rect x="91.2876%" y="213" width="0.1542%" height="15" fill="rgb(241,228,46)" fg:x="1184" fg:w="2"/><text x="91.5376%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (10 samples, 0.77%)</title><rect x="90.7479%" y="229" width="0.7710%" height="15" fill="rgb(223,209,38)" fg:x="1177" fg:w="10"/><text x="90.9979%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::HyperService&gt; (1 samples, 0.08%)</title><rect x="91.4418%" y="213" width="0.0771%" height="15" fill="rgb(236,164,45)" fg:x="1186" fg:w="1"/><text x="91.6918%" y="223.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (1 samples, 0.08%)</title><rect x="91.6731%" y="197" width="0.0771%" height="15" fill="rgb(231,15,5)" fg:x="1189" fg:w="1"/><text x="91.9231%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (4 samples, 0.31%)</title><rect x="91.5189%" y="229" width="0.3084%" height="15" fill="rgb(252,35,15)" fg:x="1187" fg:w="4"/><text x="91.7689%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (4 samples, 0.31%)</title><rect x="91.5189%" y="213" width="0.3084%" height="15" fill="rgb(248,181,18)" fg:x="1187" fg:w="4"/><text x="91.7689%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.08%)</title><rect x="91.7502%" y="197" width="0.0771%" height="15" fill="rgb(233,39,42)" fg:x="1190" fg:w="1"/><text x="92.0002%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.08%)</title><rect x="91.8273%" y="229" width="0.0771%" height="15" fill="rgb(238,110,33)" fg:x="1191" fg:w="1"/><text x="92.0773%" y="239.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.08%)</title><rect x="91.9044%" y="229" width="0.0771%" height="15" fill="rgb(233,195,10)" fg:x="1192" fg:w="1"/><text x="92.1544%" y="239.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="92.1357%" y="213" width="0.0771%" height="15" fill="rgb(254,105,3)" fg:x="1195" fg:w="1"/><text x="92.3857%" y="223.50"></text></g><g><title>url::Url::password (1 samples, 0.08%)</title><rect x="92.2128%" y="213" width="0.0771%" height="15" fill="rgb(221,225,9)" fg:x="1196" fg:w="1"/><text x="92.4628%" y="223.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (6 samples, 0.46%)</title><rect x="91.9815%" y="229" width="0.4626%" height="15" fill="rgb(224,227,45)" fg:x="1193" fg:w="6"/><text x="92.2315%" y="239.50"></text></g><g><title>url::Url::username (2 samples, 0.15%)</title><rect x="92.2899%" y="213" width="0.1542%" height="15" fill="rgb(229,198,43)" fg:x="1197" fg:w="2"/><text x="92.5399%" y="223.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="93.7548%" y="213" width="0.2313%" height="15" fill="rgb(206,209,35)" fg:x="1216" fg:w="3"/><text x="94.0048%" y="223.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="93.9861%" y="213" width="0.0771%" height="15" fill="rgb(245,195,53)" fg:x="1219" fg:w="1"/><text x="94.2361%" y="223.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="94.0632%" y="213" width="0.1542%" height="15" fill="rgb(240,92,26)" fg:x="1220" fg:w="2"/><text x="94.3132%" y="223.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (6 samples, 0.46%)</title><rect x="94.2945%" y="197" width="0.4626%" height="15" fill="rgb(207,40,23)" fg:x="1223" fg:w="6"/><text x="94.5445%" y="207.50"></text></g><g><title>core::fmt::write (4 samples, 0.31%)</title><rect x="94.4487%" y="181" width="0.3084%" height="15" fill="rgb(223,111,35)" fg:x="1225" fg:w="4"/><text x="94.6987%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4341 (2 samples, 0.15%)</title><rect x="94.6029%" y="165" width="0.1542%" height="15" fill="rgb(229,147,28)" fg:x="1227" fg:w="2"/><text x="94.8529%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.6800%" y="149" width="0.0771%" height="15" fill="rgb(211,29,28)" fg:x="1228" fg:w="1"/><text x="94.9300%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6800%" y="133" width="0.0771%" height="15" fill="rgb(228,72,33)" fg:x="1228" fg:w="1"/><text x="94.9300%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="95.6052%" y="149" width="0.0771%" height="15" fill="rgb(205,214,31)" fg:x="1240" fg:w="1"/><text x="95.8552%" y="159.50"></text></g><g><title>core::fmt::write (2 samples, 0.15%)</title><rect x="95.6052%" y="165" width="0.1542%" height="15" fill="rgb(224,111,15)" fg:x="1240" fg:w="2"/><text x="95.8552%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.08%)</title><rect x="95.6823%" y="149" width="0.0771%" height="15" fill="rgb(253,21,26)" fg:x="1241" fg:w="1"/><text x="95.9323%" y="159.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (1 samples, 0.08%)</title><rect x="95.9907%" y="149" width="0.0771%" height="15" fill="rgb(245,139,43)" fg:x="1245" fg:w="1"/><text x="96.2407%" y="159.50"></text></g><g><title>url::host::Host::parse (5 samples, 0.39%)</title><rect x="95.7594%" y="165" width="0.3855%" height="15" fill="rgb(252,170,7)" fg:x="1242" fg:w="5"/><text x="96.0094%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="96.0678%" y="149" width="0.0771%" height="15" fill="rgb(231,118,14)" fg:x="1246" fg:w="1"/><text x="96.3178%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path (4 samples, 0.31%)</title><rect x="96.1449%" y="165" width="0.3084%" height="15" fill="rgb(238,83,0)" fg:x="1247" fg:w="4"/><text x="96.3949%" y="175.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (31 samples, 2.39%)</title><rect x="94.2174%" y="213" width="2.3901%" height="15" fill="rgb(221,39,39)" fg:x="1222" fg:w="31"/><text x="94.4674%" y="223.50">&lt;r..</text></g><g><title>url::ParseOptions::parse (24 samples, 1.85%)</title><rect x="94.7571%" y="197" width="1.8504%" height="15" fill="rgb(222,119,46)" fg:x="1229" fg:w="24"/><text x="95.0071%" y="207.50">u..</text></g><g><title>url::parser::Parser::after_double_slash (22 samples, 1.70%)</title><rect x="94.9113%" y="181" width="1.6962%" height="15" fill="rgb(222,165,49)" fg:x="1231" fg:w="22"/><text x="95.1613%" y="191.50"></text></g><g><title>url::parser::Parser::with_query_and_fragment (2 samples, 0.15%)</title><rect x="96.4534%" y="165" width="0.1542%" height="15" fill="rgb(219,113,52)" fg:x="1251" fg:w="2"/><text x="96.7034%" y="175.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (1 samples, 0.08%)</title><rect x="96.5305%" y="149" width="0.0771%" height="15" fill="rgb(214,7,15)" fg:x="1252" fg:w="1"/><text x="96.7805%" y="159.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.08%)</title><rect x="96.6076%" y="213" width="0.0771%" height="15" fill="rgb(235,32,4)" fg:x="1253" fg:w="1"/><text x="96.8576%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::follow_redirect::FollowRedirect&lt;reqwest::async_impl::client::HyperService,reqwest::redirect::TowerRedirectPolicy&gt;&gt; (2 samples, 0.15%)</title><rect x="96.6847%" y="213" width="0.1542%" height="15" fill="rgb(238,90,54)" fg:x="1254" fg:w="2"/><text x="96.9347%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.08%)</title><rect x="96.7618%" y="197" width="0.0771%" height="15" fill="rgb(213,208,19)" fg:x="1255" fg:w="1"/><text x="97.0118%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (3 samples, 0.23%)</title><rect x="96.8389%" y="213" width="0.2313%" height="15" fill="rgb(233,156,4)" fg:x="1256" fg:w="3"/><text x="97.0889%" y="223.50"></text></g><g><title>bytes::bytes::Bytes::split_to (3 samples, 0.23%)</title><rect x="97.3015%" y="197" width="0.2313%" height="15" fill="rgb(207,194,5)" fg:x="1262" fg:w="3"/><text x="97.5515%" y="207.50"></text></g><g><title>http::uri::Uri::from_shared (8 samples, 0.62%)</title><rect x="97.0702%" y="213" width="0.6168%" height="15" fill="rgb(206,111,30)" fg:x="1259" fg:w="8"/><text x="97.3202%" y="223.50"></text></g><g><title>bytes::bytes::shared_is_unique (2 samples, 0.15%)</title><rect x="97.5328%" y="197" width="0.1542%" height="15" fill="rgb(243,70,54)" fg:x="1265" fg:w="2"/><text x="97.7828%" y="207.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.08%)</title><rect x="97.9183%" y="149" width="0.0771%" height="15" fill="rgb(242,28,8)" fg:x="1270" fg:w="1"/><text x="98.1683%" y="159.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (4 samples, 0.31%)</title><rect x="97.7641%" y="181" width="0.3084%" height="15" fill="rgb(219,106,18)" fg:x="1268" fg:w="4"/><text x="98.0141%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (3 samples, 0.23%)</title><rect x="97.8412%" y="165" width="0.2313%" height="15" fill="rgb(244,222,10)" fg:x="1269" fg:w="3"/><text x="98.0912%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (1 samples, 0.08%)</title><rect x="97.9954%" y="149" width="0.0771%" height="15" fill="rgb(236,179,52)" fg:x="1271" fg:w="1"/><text x="98.2454%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.2163 (2 samples, 0.15%)</title><rect x="98.0725%" y="165" width="0.1542%" height="15" fill="rgb(213,23,39)" fg:x="1272" fg:w="2"/><text x="98.3225%" y="175.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (76 samples, 5.86%)</title><rect x="92.4441%" y="229" width="5.8597%" height="15" fill="rgb(238,48,10)" fg:x="1199" fg:w="76"/><text x="92.6941%" y="239.50">reqwest..</text></g><g><title>reqwest::proxy::Matcher::intercept (8 samples, 0.62%)</title><rect x="97.6870%" y="213" width="0.6168%" height="15" fill="rgb(251,196,23)" fg:x="1267" fg:w="8"/><text x="97.9370%" y="223.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (8 samples, 0.62%)</title><rect x="97.6870%" y="197" width="0.6168%" height="15" fill="rgb(250,152,24)" fg:x="1267" fg:w="8"/><text x="97.9370%" y="207.50"></text></g><g><title>http::uri::authority::host (3 samples, 0.23%)</title><rect x="98.0725%" y="181" width="0.2313%" height="15" fill="rgb(209,150,17)" fg:x="1272" fg:w="3"/><text x="98.3225%" y="191.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.08%)</title><rect x="98.2267%" y="165" width="0.0771%" height="15" fill="rgb(234,202,34)" fg:x="1274" fg:w="1"/><text x="98.4767%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (1 samples, 0.08%)</title><rect x="98.2267%" y="149" width="0.0771%" height="15" fill="rgb(253,148,53)" fg:x="1274" fg:w="1"/><text x="98.4767%" y="159.50"></text></g><g><title>ryu::pretty::format64 (4 samples, 0.31%)</title><rect x="98.3038%" y="229" width="0.3084%" height="15" fill="rgb(218,129,16)" fg:x="1275" fg:w="4"/><text x="98.5538%" y="239.50"></text></g><g><title>time::offset_date_time::OffsetDateTime::now_utc (2 samples, 0.15%)</title><rect x="98.6122%" y="229" width="0.1542%" height="15" fill="rgb(216,85,19)" fg:x="1279" fg:w="2"/><text x="98.8622%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.15%)</title><rect x="98.9206%" y="213" width="0.1542%" height="15" fill="rgb(235,228,7)" fg:x="1283" fg:w="2"/><text x="99.1706%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (6 samples, 0.46%)</title><rect x="99.0748%" y="213" width="0.4626%" height="15" fill="rgb(245,175,0)" fg:x="1285" fg:w="6"/><text x="99.3248%" y="223.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.46%)</title><rect x="99.0748%" y="197" width="0.4626%" height="15" fill="rgb(208,168,36)" fg:x="1285" fg:w="6"/><text x="99.3248%" y="207.50"></text></g><g><title>time::serde::rfc3339::option::serialize (11 samples, 0.85%)</title><rect x="98.7664%" y="229" width="0.8481%" height="15" fill="rgb(246,171,24)" fg:x="1281" fg:w="11"/><text x="99.0164%" y="239.50"></text></g><g><title>time::formatting::format_number_pad_zero (1 samples, 0.08%)</title><rect x="99.5374%" y="213" width="0.0771%" height="15" fill="rgb(215,142,24)" fg:x="1291" fg:w="1"/><text x="99.7874%" y="223.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (497 samples, 38.32%)</title><rect x="61.5266%" y="245" width="38.3192%" height="15" fill="rgb(250,187,7)" fg:x="798" fg:w="497"/><text x="61.7766%" y="255.50">rinha_de_backend::infrastructure::workers::payment_processor_w..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (3 samples, 0.23%)</title><rect x="99.6145%" y="229" width="0.2313%" height="15" fill="rgb(228,66,33)" fg:x="1292" fg:w="3"/><text x="99.8645%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.23%)</title><rect x="99.6145%" y="213" width="0.2313%" height="15" fill="rgb(234,215,21)" fg:x="1292" fg:w="3"/><text x="99.8645%" y="223.50"></text></g><g><title>all (1,297 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(222,191,20)" fg:x="0" fg:w="1297"/><text x="0.2500%" y="383.50"></text></g><g><title>rinha-de-backen (1,024 samples, 78.95%)</title><rect x="21.0486%" y="357" width="78.9514%" height="15" fill="rgb(245,79,54)" fg:x="273" fg:w="1024"/><text x="21.2986%" y="367.50">rinha-de-backen</text></g><g><title>_start (1,024 samples, 78.95%)</title><rect x="21.0486%" y="341" width="78.9514%" height="15" fill="rgb(240,10,37)" fg:x="273" fg:w="1024"/><text x="21.2986%" y="351.50">_start</text></g><g><title>__libc_start_main (1,024 samples, 78.95%)</title><rect x="21.0486%" y="325" width="78.9514%" height="15" fill="rgb(214,192,32)" fg:x="273" fg:w="1024"/><text x="21.2986%" y="335.50">__libc_start_main</text></g><g><title>main (1,024 samples, 78.95%)</title><rect x="21.0486%" y="309" width="78.9514%" height="15" fill="rgb(209,36,54)" fg:x="273" fg:w="1024"/><text x="21.2986%" y="319.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,024 samples, 78.95%)</title><rect x="21.0486%" y="293" width="78.9514%" height="15" fill="rgb(220,10,11)" fg:x="273" fg:w="1024"/><text x="21.2986%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (1,024 samples, 78.95%)</title><rect x="21.0486%" y="277" width="78.9514%" height="15" fill="rgb(221,106,17)" fg:x="273" fg:w="1024"/><text x="21.2986%" y="287.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (924 samples, 71.24%)</title><rect x="28.7587%" y="261" width="71.2413%" height="15" fill="rgb(251,142,44)" fg:x="373" fg:w="924"/><text x="29.0087%" y="271.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.15%)</title><rect x="99.8458%" y="245" width="0.1542%" height="15" fill="rgb(238,13,15)" fg:x="1295" fg:w="2"/><text x="100.0958%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::release (2 samples, 0.15%)</title><rect x="99.8458%" y="229" width="0.1542%" height="15" fill="rgb(208,107,27)" fg:x="1295" fg:w="2"/><text x="100.0958%" y="239.50"></text></g></svg></svg>