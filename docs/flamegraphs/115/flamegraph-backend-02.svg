<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">rinha-de-backend</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="1470"><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.14%)</title><rect x="0.2721%" y="245" width="0.1361%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="2"/><text x="0.5221%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.14%)</title><rect x="0.2721%" y="229" width="0.1361%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="2"/><text x="0.5221%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.07%)</title><rect x="0.5442%" y="229" width="0.0680%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="1"/><text x="0.7942%" y="239.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.07%)</title><rect x="0.6122%" y="229" width="0.0680%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="1"/><text x="0.8622%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (7 samples, 0.48%)</title><rect x="0.6803%" y="229" width="0.4762%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="7"/><text x="0.9303%" y="239.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (5 samples, 0.34%)</title><rect x="0.8163%" y="213" width="0.3401%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="5"/><text x="1.0663%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (5 samples, 0.34%)</title><rect x="0.8163%" y="197" width="0.3401%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="5"/><text x="1.0663%" y="207.50"></text></g><g><title>tokio::task::local::Shared::schedule (3 samples, 0.20%)</title><rect x="0.9524%" y="181" width="0.2041%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="3"/><text x="1.2024%" y="191.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.14%)</title><rect x="1.0204%" y="165" width="0.1361%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="2"/><text x="1.2704%" y="175.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.07%)</title><rect x="1.0884%" y="149" width="0.0680%" height="15" fill="rgb(220,122,19)" fg:x="16" fg:w="1"/><text x="1.3384%" y="159.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.07%)</title><rect x="1.0884%" y="133" width="0.0680%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="1"/><text x="1.3384%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (16 samples, 1.09%)</title><rect x="0.1361%" y="261" width="1.0884%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="16"/><text x="0.3861%" y="271.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (12 samples, 0.82%)</title><rect x="0.4082%" y="245" width="0.8163%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="12"/><text x="0.6582%" y="255.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.07%)</title><rect x="1.1565%" y="229" width="0.0680%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="1"/><text x="1.4065%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (2 samples, 0.14%)</title><rect x="1.2245%" y="261" width="0.1361%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="2"/><text x="1.4745%" y="271.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.07%)</title><rect x="1.5646%" y="229" width="0.0680%" height="15" fill="rgb(231,73,38)" fg:x="23" fg:w="1"/><text x="1.8146%" y="239.50"></text></g><g><title>&lt;actix_rt::arbiter::ArbiterRunner as core::future::future::Future&gt;::poll (3 samples, 0.20%)</title><rect x="1.4966%" y="245" width="0.2041%" height="15" fill="rgb(225,20,46)" fg:x="22" fg:w="3"/><text x="1.7466%" y="255.50"></text></g><g><title>tokio::util::wake::clone_arc_raw (1 samples, 0.07%)</title><rect x="1.6327%" y="229" width="0.0680%" height="15" fill="rgb(210,31,41)" fg:x="24" fg:w="1"/><text x="1.8827%" y="239.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.07%)</title><rect x="3.1973%" y="181" width="0.0680%" height="15" fill="rgb(221,200,47)" fg:x="47" fg:w="1"/><text x="3.4473%" y="191.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_flush (3 samples, 0.20%)</title><rect x="3.2653%" y="181" width="0.2041%" height="15" fill="rgb(226,26,5)" fg:x="48" fg:w="3"/><text x="3.5153%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 0.20%)</title><rect x="3.2653%" y="165" width="0.2041%" height="15" fill="rgb(249,33,26)" fg:x="48" fg:w="3"/><text x="3.5153%" y="175.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.07%)</title><rect x="3.4014%" y="149" width="0.0680%" height="15" fill="rgb(235,183,28)" fg:x="50" fg:w="1"/><text x="3.6514%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.07%)</title><rect x="5.6463%" y="149" width="0.0680%" height="15" fill="rgb(221,5,38)" fg:x="83" fg:w="1"/><text x="5.8963%" y="159.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.07%)</title><rect x="5.7143%" y="149" width="0.0680%" height="15" fill="rgb(247,18,42)" fg:x="84" fg:w="1"/><text x="5.9643%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.07%)</title><rect x="5.7823%" y="149" width="0.0680%" height="15" fill="rgb(241,131,45)" fg:x="85" fg:w="1"/><text x="6.0323%" y="159.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.07%)</title><rect x="6.4626%" y="133" width="0.0680%" height="15" fill="rgb(249,31,29)" fg:x="95" fg:w="1"/><text x="6.7126%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (11 samples, 0.75%)</title><rect x="5.8503%" y="149" width="0.7483%" height="15" fill="rgb(225,111,53)" fg:x="86" fg:w="11"/><text x="6.1003%" y="159.50"></text></g><g><title>bytes::bytes_mut::shared_v_is_unique (1 samples, 0.07%)</title><rect x="6.5306%" y="133" width="0.0680%" height="15" fill="rgb(238,160,17)" fg:x="96" fg:w="1"/><text x="6.7806%" y="143.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (4 samples, 0.27%)</title><rect x="6.5986%" y="149" width="0.2721%" height="15" fill="rgb(214,148,48)" fg:x="97" fg:w="4"/><text x="6.8486%" y="159.50"></text></g><g><title>http::method::Method::from_bytes (2 samples, 0.14%)</title><rect x="6.8707%" y="149" width="0.1361%" height="15" fill="rgb(232,36,49)" fg:x="101" fg:w="2"/><text x="7.1207%" y="159.50"></text></g><g><title>&lt;actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt; as actix_http::h1::decoder::MessageType&gt;::decode (49 samples, 3.33%)</title><rect x="4.1497%" y="165" width="3.3333%" height="15" fill="rgb(209,103,24)" fg:x="61" fg:w="49"/><text x="4.3997%" y="175.50">&lt;ac..</text></g><g><title>httparse::parse_headers_iter_uninit (7 samples, 0.48%)</title><rect x="7.0068%" y="149" width="0.4762%" height="15" fill="rgb(229,88,8)" fg:x="103" fg:w="7"/><text x="7.2568%" y="159.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (1 samples, 0.07%)</title><rect x="7.4150%" y="133" width="0.0680%" height="15" fill="rgb(213,181,19)" fg:x="109" fg:w="1"/><text x="7.6650%" y="143.50"></text></g><g><title>&lt;actix_service::boxed::ServiceWrapper&lt;S&gt; as actix_service::Service&lt;Req&gt;&gt;::call (2 samples, 0.14%)</title><rect x="8.0952%" y="149" width="0.1361%" height="15" fill="rgb(254,191,54)" fg:x="119" fg:w="2"/><text x="8.3452%" y="159.50"></text></g><g><title>&lt;actix_web::guard::MethodGuard as actix_web::guard::Guard&gt;::check (1 samples, 0.07%)</title><rect x="8.2313%" y="149" width="0.0680%" height="15" fill="rgb(241,83,37)" fg:x="121" fg:w="1"/><text x="8.4813%" y="159.50"></text></g><g><title>actix_router::path::Path&lt;T&gt;::unprocessed (1 samples, 0.07%)</title><rect x="8.2993%" y="149" width="0.0680%" height="15" fill="rgb(233,36,39)" fg:x="122" fg:w="1"/><text x="8.5493%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.07%)</title><rect x="8.3673%" y="149" width="0.0680%" height="15" fill="rgb(226,3,54)" fg:x="123" fg:w="1"/><text x="8.6173%" y="159.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (1 samples, 0.07%)</title><rect x="8.3673%" y="133" width="0.0680%" height="15" fill="rgb(245,192,40)" fg:x="123" fg:w="1"/><text x="8.6173%" y="143.50"></text></g><g><title>bytes::bytes::shared_is_unique (1 samples, 0.07%)</title><rect x="8.4354%" y="149" width="0.0680%" height="15" fill="rgb(238,167,29)" fg:x="124" fg:w="1"/><text x="8.6854%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[actix_router::path::PathItem (2 samples, 0.14%)</title><rect x="8.5034%" y="149" width="0.1361%" height="15" fill="rgb(232,182,51)" fg:x="125" fg:w="2"/><text x="8.7534%" y="159.50"></text></g><g><title> 16]&gt; (2 samples, 0.14%)</title><rect x="8.5034%" y="133" width="0.1361%" height="15" fill="rgb(231,60,39)" fg:x="125" fg:w="2"/><text x="8.7534%" y="143.50"></text></g><g><title>&lt;actix_service::map_err::MapErr&lt;A,Req,F,E&gt; as actix_service::Service&lt;Req&gt;&gt;::call (20 samples, 1.36%)</title><rect x="7.4830%" y="165" width="1.3605%" height="15" fill="rgb(208,69,12)" fg:x="110" fg:w="20"/><text x="7.7330%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::message::Message&lt;actix_http::requests::head::RequestHead&gt;&gt; (3 samples, 0.20%)</title><rect x="8.6395%" y="149" width="0.2041%" height="15" fill="rgb(235,93,37)" fg:x="127" fg:w="3"/><text x="8.8895%" y="159.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.07%)</title><rect x="9.5238%" y="133" width="0.0680%" height="15" fill="rgb(213,116,39)" fg:x="140" fg:w="1"/><text x="9.7738%" y="143.50"></text></g><g><title>&lt;mime::Mime as core::str::traits::FromStr&gt;::from_str (2 samples, 0.14%)</title><rect x="9.5918%" y="133" width="0.1361%" height="15" fill="rgb(222,207,29)" fg:x="141" fg:w="2"/><text x="9.8418%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::get_summary_by_group::{{closure}} (1 samples, 0.07%)</title><rect x="9.7279%" y="133" width="0.0680%" height="15" fill="rgb(206,96,30)" fg:x="143" fg:w="1"/><text x="9.9779%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.14%)</title><rect x="9.7959%" y="133" width="0.1361%" height="15" fill="rgb(218,138,4)" fg:x="144" fg:w="2"/><text x="10.0459%" y="143.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (17 samples, 1.16%)</title><rect x="8.8435%" y="165" width="1.1565%" height="15" fill="rgb(250,191,14)" fg:x="130" fg:w="17"/><text x="9.0935%" y="175.50"></text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (17 samples, 1.16%)</title><rect x="8.8435%" y="149" width="1.1565%" height="15" fill="rgb(239,60,40)" fg:x="130" fg:w="17"/><text x="9.0935%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.07%)</title><rect x="9.9320%" y="133" width="0.0680%" height="15" fill="rgb(206,27,48)" fg:x="146" fg:w="1"/><text x="10.1820%" y="143.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.07%)</title><rect x="10.0000%" y="165" width="0.0680%" height="15" fill="rgb(225,35,8)" fg:x="147" fg:w="1"/><text x="10.2500%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_request (98 samples, 6.67%)</title><rect x="3.4694%" y="181" width="6.6667%" height="15" fill="rgb(250,213,24)" fg:x="51" fg:w="98"/><text x="3.7194%" y="191.50">actix_htt..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.07%)</title><rect x="10.0680%" y="165" width="0.0680%" height="15" fill="rgb(247,123,22)" fg:x="148" fg:w="1"/><text x="10.3180%" y="175.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (1 samples, 0.07%)</title><rect x="10.4762%" y="165" width="0.0680%" height="15" fill="rgb(231,138,38)" fg:x="154" fg:w="1"/><text x="10.7262%" y="175.50"></text></g><g><title>&lt;actix_web::request::HttpRequest as core::ops::drop::Drop&gt;::drop (5 samples, 0.34%)</title><rect x="10.5442%" y="165" width="0.3401%" height="15" fill="rgb(231,145,46)" fg:x="155" fg:w="5"/><text x="10.7942%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_web::guard::RegisteredMethods&gt; (1 samples, 0.07%)</title><rect x="10.8163%" y="149" width="0.0680%" height="15" fill="rgb(251,118,11)" fg:x="159" fg:w="1"/><text x="11.0663%" y="159.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.20%)</title><rect x="11.7687%" y="117" width="0.2041%" height="15" fill="rgb(217,147,25)" fg:x="173" fg:w="3"/><text x="12.0187%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.14%)</title><rect x="11.8367%" y="101" width="0.1361%" height="15" fill="rgb(247,81,37)" fg:x="174" fg:w="2"/><text x="12.0867%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (3 samples, 0.20%)</title><rect x="11.9728%" y="117" width="0.2041%" height="15" fill="rgb(209,12,38)" fg:x="176" fg:w="3"/><text x="12.2228%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.07%)</title><rect x="12.1088%" y="101" width="0.0680%" height="15" fill="rgb(227,1,9)" fg:x="178" fg:w="1"/><text x="12.3588%" y="111.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 1.02%)</title><rect x="11.4286%" y="133" width="1.0204%" height="15" fill="rgb(248,47,43)" fg:x="168" fg:w="15"/><text x="11.6786%" y="143.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (4 samples, 0.27%)</title><rect x="12.1769%" y="117" width="0.2721%" height="15" fill="rgb(221,10,30)" fg:x="179" fg:w="4"/><text x="12.4269%" y="127.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::get_summary_by_group::{{closure}} (1 samples, 0.07%)</title><rect x="12.4490%" y="133" width="0.0680%" height="15" fill="rgb(210,229,1)" fg:x="183" fg:w="1"/><text x="12.6990%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (1 samples, 0.07%)</title><rect x="12.4490%" y="117" width="0.0680%" height="15" fill="rgb(222,148,37)" fg:x="183" fg:w="1"/><text x="12.6990%" y="127.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.14%)</title><rect x="12.6531%" y="117" width="0.1361%" height="15" fill="rgb(234,67,33)" fg:x="186" fg:w="2"/><text x="12.9031%" y="127.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.07%)</title><rect x="12.7891%" y="101" width="0.0680%" height="15" fill="rgb(247,98,35)" fg:x="188" fg:w="1"/><text x="13.0391%" y="111.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.07%)</title><rect x="12.7891%" y="85" width="0.0680%" height="15" fill="rgb(247,138,52)" fg:x="188" fg:w="1"/><text x="13.0391%" y="95.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}} (8 samples, 0.54%)</title><rect x="12.5170%" y="133" width="0.5442%" height="15" fill="rgb(213,79,30)" fg:x="184" fg:w="8"/><text x="12.7670%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.27%)</title><rect x="12.7891%" y="117" width="0.2721%" height="15" fill="rgb(246,177,23)" fg:x="188" fg:w="4"/><text x="13.0391%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (3 samples, 0.20%)</title><rect x="12.8571%" y="101" width="0.2041%" height="15" fill="rgb(230,62,27)" fg:x="189" fg:w="3"/><text x="13.1071%" y="111.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.14%)</title><rect x="13.0612%" y="133" width="0.1361%" height="15" fill="rgb(216,154,8)" fg:x="192" fg:w="2"/><text x="13.3112%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.14%)</title><rect x="13.0612%" y="117" width="0.1361%" height="15" fill="rgb(244,35,45)" fg:x="192" fg:w="2"/><text x="13.3112%" y="127.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.27%)</title><rect x="13.1973%" y="133" width="0.2721%" height="15" fill="rgb(251,115,12)" fg:x="194" fg:w="4"/><text x="13.4473%" y="143.50"></text></g><g><title>ryu::pretty::format64 (4 samples, 0.27%)</title><rect x="13.1973%" y="117" width="0.2721%" height="15" fill="rgb(240,54,50)" fg:x="194" fg:w="4"/><text x="13.4473%" y="127.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.07%)</title><rect x="13.4014%" y="101" width="0.0680%" height="15" fill="rgb(233,84,52)" fg:x="197" fg:w="1"/><text x="13.6514%" y="111.50"></text></g><g><title>actix_http::responses::head::BoxedResponseHead::new (2 samples, 0.14%)</title><rect x="13.4694%" y="133" width="0.1361%" height="15" fill="rgb(207,117,47)" fg:x="198" fg:w="2"/><text x="13.7194%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.14%)</title><rect x="13.4694%" y="117" width="0.1361%" height="15" fill="rgb(249,43,39)" fg:x="198" fg:w="2"/><text x="13.7194%" y="127.50"></text></g><g><title>bytes::bytes::promotable_even_drop (2 samples, 0.14%)</title><rect x="13.4694%" y="101" width="0.1361%" height="15" fill="rgb(209,38,44)" fg:x="198" fg:w="2"/><text x="13.7194%" y="111.50"></text></g><g><title>actix_web::response::builder::HttpResponseBuilder::insert_header (4 samples, 0.27%)</title><rect x="13.6054%" y="133" width="0.2721%" height="15" fill="rgb(236,212,23)" fg:x="200" fg:w="4"/><text x="13.8554%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::queue::mpsc_payment_producer::MpscPaymentProducer as rinha_de_backend::domain::payment_producer::PaymentProducer&gt;::send::{{closure}}&gt; (1 samples, 0.07%)</title><rect x="13.8776%" y="133" width="0.0680%" height="15" fill="rgb(242,79,21)" fg:x="204" fg:w="1"/><text x="14.1276%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_web::extract::tuple_from_req::TupleFromRequest2&lt;actix_web::types::json::Json&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;,actix_web::data::Data&lt;alloc::boxed::Box&lt;dyn rinha_de_backend::domain::payment_producer::PaymentProducer&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="13.9456%" y="133" width="0.0680%" height="15" fill="rgb(211,96,35)" fg:x="205" fg:w="1"/><text x="14.1956%" y="143.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="14.0816%" y="117" width="0.0680%" height="15" fill="rgb(253,215,40)" fg:x="207" fg:w="1"/><text x="14.3316%" y="127.50"></text></g><g><title>&lt;actix_web::resource::Resource&lt;T&gt; as actix_web::service::HttpServiceFactory&gt;::register::{{closure}}::{{closure}} (49 samples, 3.33%)</title><rect x="10.8844%" y="165" width="3.3333%" height="15" fill="rgb(211,81,21)" fg:x="160" fg:w="49"/><text x="11.1344%" y="175.50">&lt;ac..</text></g><g><title>actix_web::handler::handler_service::{{closure}}::{{closure}} (48 samples, 3.27%)</title><rect x="10.9524%" y="149" width="3.2653%" height="15" fill="rgb(208,190,38)" fg:x="161" fg:w="48"/><text x="11.2024%" y="159.50">act..</text></g><g><title>core::ptr::drop_in_place&lt;actix_web::types::json::JsonExtractFut&lt;rinha_de_backend::adapters::web::schema::PaymentRequest&gt;&gt; (3 samples, 0.20%)</title><rect x="14.0136%" y="133" width="0.2041%" height="15" fill="rgb(235,213,38)" fg:x="206" fg:w="3"/><text x="14.2636%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::payload::Payload&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="14.1497%" y="117" width="0.0680%" height="15" fill="rgb(237,122,38)" fg:x="208" fg:w="1"/><text x="14.3997%" y="127.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response_inner (11 samples, 0.75%)</title><rect x="14.2177%" y="149" width="0.7483%" height="15" fill="rgb(244,218,35)" fg:x="209" fg:w="11"/><text x="14.4677%" y="159.50"></text></g><g><title>&lt;actix_http::h1::codec::Codec as tokio_util::codec::encoder::Encoder&lt;actix_http::h1::Message&lt;(actix_http::responses::response::Response&lt;()&gt;,actix_http::body::size::BodySize)&gt;&gt;&gt;::encode (10 samples, 0.68%)</title><rect x="14.2857%" y="133" width="0.6803%" height="15" fill="rgb(240,68,47)" fg:x="210" fg:w="10"/><text x="14.5357%" y="143.50"></text></g><g><title>actix_http::helpers::write_content_length (1 samples, 0.07%)</title><rect x="14.8980%" y="117" width="0.0680%" height="15" fill="rgb(210,16,53)" fg:x="219" fg:w="1"/><text x="15.1480%" y="127.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::send_response (14 samples, 0.95%)</title><rect x="14.2177%" y="165" width="0.9524%" height="15" fill="rgb(235,124,12)" fg:x="209" fg:w="14"/><text x="14.4677%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (3 samples, 0.20%)</title><rect x="14.9660%" y="149" width="0.2041%" height="15" fill="rgb(224,169,11)" fg:x="220" fg:w="3"/><text x="15.2160%" y="159.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_response (75 samples, 5.10%)</title><rect x="10.1361%" y="181" width="5.1020%" height="15" fill="rgb(250,166,2)" fg:x="149" fg:w="75"/><text x="10.3861%" y="191.50">actix_..</text></g><g><title>core::ptr::drop_in_place&lt;actix_http::h1::dispatcher::State&lt;actix_service::map_err::MapErr&lt;actix_web::app_service::AppInitService&lt;actix_web::app_service::AppRouting,actix_http::body::boxed::BoxBody&gt;,actix_http::requests::request::Request&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,actix_http::error::PayloadError&gt;&gt;&gt;&gt;,actix_web::server::HttpServer&lt;rinha_de_backend::run::{{closure}}::{{closure}},actix_web::app::App&lt;actix_web::app_service::AppEntry&gt;,actix_web::app_service::AppInit&lt;actix_web::app_service::AppEntry,actix_http::body::boxed::BoxBody&gt;,actix_http::body::boxed::BoxBody&gt;::listen::{{closure}}::{{closure}},actix_web::response::response::HttpResponse&gt;,actix_http::body::boxed::BoxBody,actix_http::h1::expect::ExpectHandler&gt;&gt; (1 samples, 0.07%)</title><rect x="15.1701%" y="165" width="0.0680%" height="15" fill="rgb(242,216,29)" fg:x="223" fg:w="1"/><text x="15.4201%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::InnerDispatcher&lt;T,S,B,X,U&gt;::poll_timers (7 samples, 0.48%)</title><rect x="15.2381%" y="181" width="0.4762%" height="15" fill="rgb(230,116,27)" fg:x="224" fg:w="7"/><text x="15.4881%" y="191.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (6 samples, 0.41%)</title><rect x="15.3061%" y="165" width="0.4082%" height="15" fill="rgb(228,99,48)" fg:x="225" fg:w="6"/><text x="15.5561%" y="175.50"></text></g><g><title>actix_http::h1::dispatcher::trace_timer_states (6 samples, 0.41%)</title><rect x="15.7143%" y="181" width="0.4082%" height="15" fill="rgb(253,11,6)" fg:x="231" fg:w="6"/><text x="15.9643%" y="191.50"></text></g><g><title>actix_http::h1::timer::TimerState::clear (3 samples, 0.20%)</title><rect x="16.1224%" y="181" width="0.2041%" height="15" fill="rgb(247,143,39)" fg:x="237" fg:w="3"/><text x="16.3724%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (3 samples, 0.20%)</title><rect x="16.1224%" y="165" width="0.2041%" height="15" fill="rgb(236,97,10)" fg:x="237" fg:w="3"/><text x="16.3724%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (3 samples, 0.20%)</title><rect x="16.1224%" y="149" width="0.2041%" height="15" fill="rgb(233,208,19)" fg:x="237" fg:w="3"/><text x="16.3724%" y="159.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (8 samples, 0.54%)</title><rect x="16.3265%" y="165" width="0.5442%" height="15" fill="rgb(216,164,2)" fg:x="240" fg:w="8"/><text x="16.5765%" y="175.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (7 samples, 0.48%)</title><rect x="16.3946%" y="149" width="0.4762%" height="15" fill="rgb(220,129,5)" fg:x="241" fg:w="7"/><text x="16.6446%" y="159.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (2 samples, 0.14%)</title><rect x="16.7347%" y="133" width="0.1361%" height="15" fill="rgb(242,17,10)" fg:x="246" fg:w="2"/><text x="16.9847%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.07%)</title><rect x="16.8707%" y="149" width="0.0680%" height="15" fill="rgb(242,107,0)" fg:x="248" fg:w="1"/><text x="17.1207%" y="159.50"></text></g><g><title>actix_http::h1::timer::TimerState::set_and_init (10 samples, 0.68%)</title><rect x="16.3265%" y="181" width="0.6803%" height="15" fill="rgb(251,28,31)" fg:x="240" fg:w="10"/><text x="16.5765%" y="191.50"></text></g><g><title>tokio::runtime::time::entry::_::&lt;impl core::ops::drop::Drop for tokio::runtime::time::entry::TimerEntry&gt;::drop (2 samples, 0.14%)</title><rect x="16.8707%" y="165" width="0.1361%" height="15" fill="rgb(233,223,10)" fg:x="248" fg:w="2"/><text x="17.1207%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (1 samples, 0.07%)</title><rect x="16.9388%" y="149" width="0.0680%" height="15" fill="rgb(215,21,27)" fg:x="249" fg:w="1"/><text x="17.1888%" y="159.50"></text></g><g><title>&lt;actix_http::h1::dispatcher::Dispatcher&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (213 samples, 14.49%)</title><rect x="2.6531%" y="197" width="14.4898%" height="15" fill="rgb(232,23,21)" fg:x="39" fg:w="213"/><text x="2.9031%" y="207.50">&lt;actix_http::h1::dispa..</text></g><g><title>tokio::time::sleep::Sleep::new_timeout (2 samples, 0.14%)</title><rect x="17.0068%" y="181" width="0.1361%" height="15" fill="rgb(244,5,23)" fg:x="250" fg:w="2"/><text x="17.2568%" y="191.50"></text></g><g><title>&lt;actix_server::service::StreamService&lt;S,I&gt; as actix_service::Service&lt;(actix_server::worker::WorkerCounterGuard,actix_server::socket::MioStream)&gt;&gt;::call::{{closure}} (214 samples, 14.56%)</title><rect x="2.6531%" y="213" width="14.5578%" height="15" fill="rgb(226,81,46)" fg:x="39" fg:w="214"/><text x="2.9031%" y="223.50">&lt;actix_server::service..</text></g><g><title>&lt;actix_http::service::HttpServiceHandlerResponse&lt;T,S,B,X,U&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="17.1429%" y="197" width="0.0680%" height="15" fill="rgb(247,70,30)" fg:x="252" fg:w="1"/><text x="17.3929%" y="207.50"></text></g><g><title>actix-rt|system (254 samples, 17.28%)</title><rect x="0.0000%" y="341" width="17.2789%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="254"/><text x="0.2500%" y="351.50">actix-rt|system</text></g><g><title>__clone (254 samples, 17.28%)</title><rect x="0.0000%" y="325" width="17.2789%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="254"/><text x="0.2500%" y="335.50">__clone</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (254 samples, 17.28%)</title><rect x="0.0000%" y="309" width="17.2789%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="254"/><text x="0.2500%" y="319.50">std::sys::pal::unix::thread..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (254 samples, 17.28%)</title><rect x="0.0000%" y="293" width="17.2789%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="254"/><text x="0.2500%" y="303.50">core::ops::function::FnOnce..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (254 samples, 17.28%)</title><rect x="0.0000%" y="277" width="17.2789%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="254"/><text x="0.2500%" y="287.50">std::sys::backtrace::__rust..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (234 samples, 15.92%)</title><rect x="1.3605%" y="261" width="15.9184%" height="15" fill="rgb(247,173,49)" fg:x="20" fg:w="234"/><text x="1.6105%" y="271.50">tokio::task::local::Loca..</text></g><g><title>tokio::task::local::LocalSet::tick (229 samples, 15.58%)</title><rect x="1.7007%" y="245" width="15.5782%" height="15" fill="rgb(224,114,35)" fg:x="25" fg:w="229"/><text x="1.9507%" y="255.50">tokio::task::local::Loca..</text></g><g><title>tokio::runtime::task::raw::poll (222 samples, 15.10%)</title><rect x="2.1769%" y="229" width="15.1020%" height="15" fill="rgb(245,159,27)" fg:x="32" fg:w="222"/><text x="2.4269%" y="239.50">tokio::runtime::task::r..</text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.07%)</title><rect x="17.2109%" y="213" width="0.0680%" height="15" fill="rgb(245,172,44)" fg:x="253" fg:w="1"/><text x="17.4609%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.14%)</title><rect x="18.7755%" y="245" width="0.1361%" height="15" fill="rgb(236,23,11)" fg:x="276" fg:w="2"/><text x="19.0255%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (2 samples, 0.14%)</title><rect x="18.9116%" y="245" width="0.1361%" height="15" fill="rgb(205,117,38)" fg:x="278" fg:w="2"/><text x="19.1616%" y="255.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (8 samples, 0.54%)</title><rect x="19.3197%" y="229" width="0.5442%" height="15" fill="rgb(237,72,25)" fg:x="284" fg:w="8"/><text x="19.5697%" y="239.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.27%)</title><rect x="19.5918%" y="213" width="0.2721%" height="15" fill="rgb(244,70,9)" fg:x="288" fg:w="4"/><text x="19.8418%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.07%)</title><rect x="20.3401%" y="213" width="0.0680%" height="15" fill="rgb(217,125,39)" fg:x="299" fg:w="1"/><text x="20.5901%" y="223.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (4 samples, 0.27%)</title><rect x="20.4082%" y="213" width="0.2721%" height="15" fill="rgb(235,36,10)" fg:x="300" fg:w="4"/><text x="20.6582%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.07%)</title><rect x="21.4286%" y="181" width="0.0680%" height="15" fill="rgb(251,123,47)" fg:x="315" fg:w="1"/><text x="21.6786%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (4 samples, 0.27%)</title><rect x="21.9048%" y="165" width="0.2721%" height="15" fill="rgb(221,13,13)" fg:x="322" fg:w="4"/><text x="22.1548%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (23 samples, 1.56%)</title><rect x="20.6803%" y="213" width="1.5646%" height="15" fill="rgb(238,131,9)" fg:x="304" fg:w="23"/><text x="20.9303%" y="223.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (15 samples, 1.02%)</title><rect x="21.2245%" y="197" width="1.0204%" height="15" fill="rgb(211,50,8)" fg:x="312" fg:w="15"/><text x="21.4745%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (11 samples, 0.75%)</title><rect x="21.4966%" y="181" width="0.7483%" height="15" fill="rgb(245,182,24)" fg:x="316" fg:w="11"/><text x="21.7466%" y="191.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.07%)</title><rect x="22.1769%" y="165" width="0.0680%" height="15" fill="rgb(242,14,37)" fg:x="326" fg:w="1"/><text x="22.4269%" y="175.50"></text></g><g><title>tokio::runtime::signal::Driver::process (2 samples, 0.14%)</title><rect x="22.2449%" y="213" width="0.1361%" height="15" fill="rgb(246,228,12)" fg:x="327" fg:w="2"/><text x="22.4949%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (55 samples, 3.74%)</title><rect x="19.0476%" y="245" width="3.7415%" height="15" fill="rgb(213,55,15)" fg:x="280" fg:w="55"/><text x="19.2976%" y="255.50">toki..</text></g><g><title>tokio::runtime::time::Driver::park_internal (43 samples, 2.93%)</title><rect x="19.8639%" y="229" width="2.9252%" height="15" fill="rgb(209,9,3)" fg:x="292" fg:w="43"/><text x="20.1139%" y="239.50">to..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (6 samples, 0.41%)</title><rect x="22.3810%" y="213" width="0.4082%" height="15" fill="rgb(230,59,30)" fg:x="329" fg:w="6"/><text x="22.6310%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (7 samples, 0.48%)</title><rect x="22.7891%" y="245" width="0.4762%" height="15" fill="rgb(209,121,21)" fg:x="335" fg:w="7"/><text x="23.0391%" y="255.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.20%)</title><rect x="27.2789%" y="213" width="0.2041%" height="15" fill="rgb(220,109,13)" fg:x="401" fg:w="3"/><text x="27.5289%" y="223.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (2 samples, 0.14%)</title><rect x="27.3469%" y="197" width="0.1361%" height="15" fill="rgb(232,18,1)" fg:x="402" fg:w="2"/><text x="27.5969%" y="207.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.07%)</title><rect x="27.4150%" y="181" width="0.0680%" height="15" fill="rgb(215,41,42)" fg:x="403" fg:w="1"/><text x="27.6650%" y="191.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.07%)</title><rect x="27.4150%" y="165" width="0.0680%" height="15" fill="rgb(224,123,36)" fg:x="403" fg:w="1"/><text x="27.6650%" y="175.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.07%)</title><rect x="27.4150%" y="149" width="0.0680%" height="15" fill="rgb(240,125,3)" fg:x="403" fg:w="1"/><text x="27.6650%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.07%)</title><rect x="27.4150%" y="133" width="0.0680%" height="15" fill="rgb(205,98,50)" fg:x="403" fg:w="1"/><text x="27.6650%" y="143.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.27%)</title><rect x="30.1361%" y="197" width="0.2721%" height="15" fill="rgb(205,185,37)" fg:x="443" fg:w="4"/><text x="30.3861%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.07%)</title><rect x="30.5442%" y="181" width="0.0680%" height="15" fill="rgb(238,207,15)" fg:x="449" fg:w="1"/><text x="30.7942%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::dispatch::Callback&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;,http::response::Response&lt;hyper::body::incoming::Incoming&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="30.6122%" y="165" width="0.0680%" height="15" fill="rgb(213,199,42)" fg:x="450" fg:w="1"/><text x="30.8622%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.07%)</title><rect x="30.7483%" y="149" width="0.0680%" height="15" fill="rgb(235,201,11)" fg:x="452" fg:w="1"/><text x="30.9983%" y="159.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (7 samples, 0.48%)</title><rect x="30.4082%" y="197" width="0.4762%" height="15" fill="rgb(207,46,11)" fg:x="447" fg:w="7"/><text x="30.6582%" y="207.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (4 samples, 0.27%)</title><rect x="30.6122%" y="181" width="0.2721%" height="15" fill="rgb(241,35,35)" fg:x="450" fg:w="4"/><text x="30.8622%" y="191.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.20%)</title><rect x="30.6803%" y="165" width="0.2041%" height="15" fill="rgb(243,32,47)" fg:x="451" fg:w="3"/><text x="30.9303%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.07%)</title><rect x="30.8163%" y="149" width="0.0680%" height="15" fill="rgb(247,202,23)" fg:x="453" fg:w="1"/><text x="31.0663%" y="159.50"></text></g><g><title>bytes::bytes::Bytes::slice (2 samples, 0.14%)</title><rect x="30.8844%" y="197" width="0.1361%" height="15" fill="rgb(219,102,11)" fg:x="454" fg:w="2"/><text x="31.1344%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (3 samples, 0.20%)</title><rect x="31.0204%" y="197" width="0.2041%" height="15" fill="rgb(243,110,44)" fg:x="456" fg:w="3"/><text x="31.2704%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="31.1565%" y="181" width="0.0680%" height="15" fill="rgb(222,74,54)" fg:x="458" fg:w="1"/><text x="31.4065%" y="191.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (2 samples, 0.14%)</title><rect x="31.2245%" y="197" width="0.1361%" height="15" fill="rgb(216,99,12)" fg:x="459" fg:w="2"/><text x="31.4745%" y="207.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (4 samples, 0.27%)</title><rect x="31.3605%" y="197" width="0.2721%" height="15" fill="rgb(226,22,26)" fg:x="461" fg:w="4"/><text x="31.6105%" y="207.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get2 (1 samples, 0.07%)</title><rect x="31.6327%" y="197" width="0.0680%" height="15" fill="rgb(217,163,10)" fg:x="465" fg:w="1"/><text x="31.8827%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (1 samples, 0.07%)</title><rect x="31.6327%" y="181" width="0.0680%" height="15" fill="rgb(213,25,53)" fg:x="465" fg:w="1"/><text x="31.8827%" y="191.50"></text></g><g><title>http::header::map::hash_elem_using (3 samples, 0.20%)</title><rect x="31.7007%" y="197" width="0.2041%" height="15" fill="rgb(252,105,26)" fg:x="466" fg:w="3"/><text x="31.9507%" y="207.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (6 samples, 0.41%)</title><rect x="31.9048%" y="197" width="0.4082%" height="15" fill="rgb(220,39,43)" fg:x="469" fg:w="6"/><text x="32.1548%" y="207.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (3 samples, 0.20%)</title><rect x="32.1088%" y="181" width="0.2041%" height="15" fill="rgb(229,68,48)" fg:x="472" fg:w="3"/><text x="32.3588%" y="191.50"></text></g><g><title>httparse::parse_headers_iter_uninit (8 samples, 0.54%)</title><rect x="32.3129%" y="197" width="0.5442%" height="15" fill="rgb(252,8,32)" fg:x="475" fg:w="8"/><text x="32.5629%" y="207.50"></text></g><g><title>httparse::simd::avx2::match_header_value_vectored (1 samples, 0.07%)</title><rect x="32.7891%" y="181" width="0.0680%" height="15" fill="rgb(223,20,43)" fg:x="482" fg:w="1"/><text x="33.0391%" y="191.50"></text></g><g><title>httparse::parse_reason (1 samples, 0.07%)</title><rect x="32.8571%" y="197" width="0.0680%" height="15" fill="rgb(229,81,49)" fg:x="483" fg:w="1"/><text x="33.1071%" y="207.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::poll_canceled (2 samples, 0.14%)</title><rect x="32.9252%" y="197" width="0.1361%" height="15" fill="rgb(236,28,36)" fg:x="484" fg:w="2"/><text x="33.1752%" y="207.50"></text></g><g><title>hyper::headers::transfer_encoding_is_chunked (2 samples, 0.14%)</title><rect x="33.0612%" y="197" width="0.1361%" height="15" fill="rgb(249,185,26)" fg:x="486" fg:w="2"/><text x="33.3112%" y="207.50"></text></g><g><title>hyper::headers::is_chunked (2 samples, 0.14%)</title><rect x="33.0612%" y="181" width="0.1361%" height="15" fill="rgb(249,174,33)" fg:x="486" fg:w="2"/><text x="33.3112%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (4 samples, 0.27%)</title><rect x="33.4694%" y="181" width="0.2721%" height="15" fill="rgb(233,201,37)" fg:x="492" fg:w="4"/><text x="33.7194%" y="191.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (3 samples, 0.20%)</title><rect x="33.5374%" y="165" width="0.2041%" height="15" fill="rgb(221,78,26)" fg:x="493" fg:w="3"/><text x="33.7874%" y="175.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2 samples, 0.14%)</title><rect x="33.6054%" y="149" width="0.1361%" height="15" fill="rgb(250,127,30)" fg:x="494" fg:w="2"/><text x="33.8554%" y="159.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.07%)</title><rect x="33.6735%" y="133" width="0.0680%" height="15" fill="rgb(230,49,44)" fg:x="495" fg:w="1"/><text x="33.9235%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.07%)</title><rect x="33.6735%" y="117" width="0.0680%" height="15" fill="rgb(229,67,23)" fg:x="495" fg:w="1"/><text x="33.9235%" y="127.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (24 samples, 1.63%)</title><rect x="33.1973%" y="197" width="1.6327%" height="15" fill="rgb(249,83,47)" fg:x="488" fg:w="24"/><text x="33.4473%" y="207.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (16 samples, 1.09%)</title><rect x="33.7415%" y="181" width="1.0884%" height="15" fill="rgb(215,43,3)" fg:x="496" fg:w="16"/><text x="33.9915%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (6 samples, 0.41%)</title><rect x="34.4218%" y="165" width="0.4082%" height="15" fill="rgb(238,154,13)" fg:x="506" fg:w="6"/><text x="34.6718%" y="175.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.14%)</title><rect x="34.6939%" y="149" width="0.1361%" height="15" fill="rgb(219,56,2)" fg:x="510" fg:w="2"/><text x="34.9439%" y="159.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.07%)</title><rect x="35.5102%" y="181" width="0.0680%" height="15" fill="rgb(233,0,4)" fg:x="522" fg:w="1"/><text x="35.7602%" y="191.50"></text></g><g><title>&lt;hyper::proto::h1::role::FastWrite as core::fmt::Write&gt;::write_str (1 samples, 0.07%)</title><rect x="35.6463%" y="133" width="0.0680%" height="15" fill="rgb(235,30,7)" fg:x="524" fg:w="1"/><text x="35.8963%" y="143.50"></text></g><g><title>core::fmt::write (4 samples, 0.27%)</title><rect x="35.5782%" y="181" width="0.2721%" height="15" fill="rgb(250,79,13)" fg:x="523" fg:w="4"/><text x="35.8282%" y="191.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (3 samples, 0.20%)</title><rect x="35.6463%" y="165" width="0.2041%" height="15" fill="rgb(211,146,34)" fg:x="524" fg:w="3"/><text x="35.8963%" y="175.50"></text></g><g><title>core::fmt::write (3 samples, 0.20%)</title><rect x="35.6463%" y="149" width="0.2041%" height="15" fill="rgb(228,22,38)" fg:x="524" fg:w="3"/><text x="35.8963%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.14%)</title><rect x="35.7143%" y="133" width="0.1361%" height="15" fill="rgb(235,168,5)" fg:x="525" fg:w="2"/><text x="35.9643%" y="143.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert2 (2 samples, 0.14%)</title><rect x="35.8503%" y="181" width="0.1361%" height="15" fill="rgb(221,155,16)" fg:x="527" fg:w="2"/><text x="36.1003%" y="191.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (2 samples, 0.14%)</title><rect x="35.9864%" y="181" width="0.1361%" height="15" fill="rgb(215,215,53)" fg:x="529" fg:w="2"/><text x="36.2364%" y="191.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (21 samples, 1.43%)</title><rect x="34.8299%" y="197" width="1.4286%" height="15" fill="rgb(223,4,10)" fg:x="512" fg:w="21"/><text x="35.0799%" y="207.50"></text></g><g><title>hyper::proto::h1::role::write_headers (2 samples, 0.14%)</title><rect x="36.1224%" y="181" width="0.1361%" height="15" fill="rgb(234,103,6)" fg:x="531" fg:w="2"/><text x="36.3724%" y="191.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Write&gt;::poll_flush (2 samples, 0.14%)</title><rect x="37.0068%" y="181" width="0.1361%" height="15" fill="rgb(227,97,0)" fg:x="544" fg:w="2"/><text x="37.2568%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (4 samples, 0.27%)</title><rect x="37.1429%" y="181" width="0.2721%" height="15" fill="rgb(234,150,53)" fg:x="546" fg:w="4"/><text x="37.3929%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.14%)</title><rect x="37.2789%" y="165" width="0.1361%" height="15" fill="rgb(228,201,54)" fg:x="548" fg:w="2"/><text x="37.5289%" y="175.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.07%)</title><rect x="37.4150%" y="181" width="0.0680%" height="15" fill="rgb(222,22,37)" fg:x="550" fg:w="1"/><text x="37.6650%" y="191.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (19 samples, 1.29%)</title><rect x="36.2585%" y="197" width="1.2925%" height="15" fill="rgb(237,53,32)" fg:x="533" fg:w="19"/><text x="36.5085%" y="207.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.07%)</title><rect x="37.4830%" y="181" width="0.0680%" height="15" fill="rgb(233,25,53)" fg:x="551" fg:w="1"/><text x="37.7330%" y="191.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4 samples, 0.27%)</title><rect x="37.5510%" y="197" width="0.2721%" height="15" fill="rgb(210,40,34)" fg:x="552" fg:w="4"/><text x="37.8010%" y="207.50"></text></g><g><title>&lt;hyper_rustls::stream::MaybeHttpsStream&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (3 samples, 0.20%)</title><rect x="37.6190%" y="181" width="0.2041%" height="15" fill="rgb(241,220,44)" fg:x="553" fg:w="3"/><text x="37.8690%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.07%)</title><rect x="37.7551%" y="165" width="0.0680%" height="15" fill="rgb(235,28,35)" fg:x="555" fg:w="1"/><text x="38.0051%" y="175.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (3 samples, 0.20%)</title><rect x="37.8231%" y="197" width="0.2041%" height="15" fill="rgb(210,56,17)" fg:x="556" fg:w="3"/><text x="38.0731%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.07%)</title><rect x="38.0272%" y="197" width="0.0680%" height="15" fill="rgb(224,130,29)" fg:x="559" fg:w="1"/><text x="38.2772%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.07%)</title><rect x="38.0272%" y="181" width="0.0680%" height="15" fill="rgb(235,212,8)" fg:x="559" fg:w="1"/><text x="38.2772%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.07%)</title><rect x="38.2313%" y="181" width="0.0680%" height="15" fill="rgb(223,33,50)" fg:x="562" fg:w="1"/><text x="38.4813%" y="191.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (160 samples, 10.88%)</title><rect x="27.4830%" y="213" width="10.8844%" height="15" fill="rgb(219,149,13)" fg:x="404" fg:w="160"/><text x="27.7330%" y="223.50">&lt;hyper::client::..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (4 samples, 0.27%)</title><rect x="38.0952%" y="197" width="0.2721%" height="15" fill="rgb(250,156,29)" fg:x="560" fg:w="4"/><text x="38.3452%" y="207.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.07%)</title><rect x="38.2993%" y="181" width="0.0680%" height="15" fill="rgb(216,193,19)" fg:x="563" fg:w="1"/><text x="38.5493%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (22 samples, 1.50%)</title><rect x="39.9320%" y="181" width="1.4966%" height="15" fill="rgb(216,135,14)" fg:x="587" fg:w="22"/><text x="40.1820%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (12 samples, 0.82%)</title><rect x="40.6122%" y="165" width="0.8163%" height="15" fill="rgb(241,47,5)" fg:x="597" fg:w="12"/><text x="40.8622%" y="175.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (4 samples, 0.27%)</title><rect x="43.3333%" y="149" width="0.2721%" height="15" fill="rgb(233,42,35)" fg:x="637" fg:w="4"/><text x="43.5833%" y="159.50"></text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (1 samples, 0.07%)</title><rect x="43.6054%" y="149" width="0.0680%" height="15" fill="rgb(231,13,6)" fg:x="641" fg:w="1"/><text x="43.8554%" y="159.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.07%)</title><rect x="43.6054%" y="133" width="0.0680%" height="15" fill="rgb(207,181,40)" fg:x="641" fg:w="1"/><text x="43.8554%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (1 samples, 0.07%)</title><rect x="43.6054%" y="117" width="0.0680%" height="15" fill="rgb(254,173,49)" fg:x="641" fg:w="1"/><text x="43.8554%" y="127.50"></text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (1 samples, 0.07%)</title><rect x="43.6054%" y="101" width="0.0680%" height="15" fill="rgb(221,1,38)" fg:x="641" fg:w="1"/><text x="43.8554%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.14%)</title><rect x="45.3741%" y="101" width="0.1361%" height="15" fill="rgb(206,124,46)" fg:x="667" fg:w="2"/><text x="45.6241%" y="111.50"></text></g><g><title>combine::parser::Parser::parse_mode (9 samples, 0.61%)</title><rect x="45.1020%" y="117" width="0.6122%" height="15" fill="rgb(249,21,11)" fg:x="663" fg:w="9"/><text x="45.3520%" y="127.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (3 samples, 0.20%)</title><rect x="45.5102%" y="101" width="0.2041%" height="15" fill="rgb(222,201,40)" fg:x="669" fg:w="3"/><text x="45.7602%" y="111.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (22 samples, 1.50%)</title><rect x="44.8980%" y="133" width="1.4966%" height="15" fill="rgb(235,61,29)" fg:x="660" fg:w="22"/><text x="45.1480%" y="143.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (10 samples, 0.68%)</title><rect x="45.7143%" y="117" width="0.6803%" height="15" fill="rgb(219,207,3)" fg:x="672" fg:w="10"/><text x="45.9643%" y="127.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (5 samples, 0.34%)</title><rect x="46.0544%" y="101" width="0.3401%" height="15" fill="rgb(222,56,46)" fg:x="677" fg:w="5"/><text x="46.3044%" y="111.50"></text></g><g><title>__rustc::__rust_alloc (2 samples, 0.14%)</title><rect x="46.3946%" y="133" width="0.1361%" height="15" fill="rgb(239,76,54)" fg:x="682" fg:w="2"/><text x="46.6446%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.07%)</title><rect x="47.2789%" y="37" width="0.0680%" height="15" fill="rgb(231,124,27)" fg:x="695" fg:w="1"/><text x="47.5289%" y="47.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.14%)</title><rect x="47.2789%" y="53" width="0.1361%" height="15" fill="rgb(249,195,6)" fg:x="695" fg:w="2"/><text x="47.5289%" y="63.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.07%)</title><rect x="47.3469%" y="37" width="0.0680%" height="15" fill="rgb(237,174,47)" fg:x="696" fg:w="1"/><text x="47.5969%" y="47.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (6 samples, 0.41%)</title><rect x="47.0748%" y="69" width="0.4082%" height="15" fill="rgb(206,201,31)" fg:x="692" fg:w="6"/><text x="47.3248%" y="79.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.07%)</title><rect x="47.4150%" y="53" width="0.0680%" height="15" fill="rgb(231,57,52)" fg:x="697" fg:w="1"/><text x="47.6650%" y="63.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.07%)</title><rect x="47.4150%" y="37" width="0.0680%" height="15" fill="rgb(248,177,22)" fg:x="697" fg:w="1"/><text x="47.6650%" y="47.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.20%)</title><rect x="47.4830%" y="69" width="0.2041%" height="15" fill="rgb(215,211,37)" fg:x="698" fg:w="3"/><text x="47.7330%" y="79.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (1 samples, 0.07%)</title><rect x="47.6190%" y="53" width="0.0680%" height="15" fill="rgb(241,128,51)" fg:x="700" fg:w="1"/><text x="47.8690%" y="63.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.07%)</title><rect x="47.6871%" y="53" width="0.0680%" height="15" fill="rgb(227,165,31)" fg:x="701" fg:w="1"/><text x="47.9371%" y="63.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (12 samples, 0.82%)</title><rect x="47.0068%" y="85" width="0.8163%" height="15" fill="rgb(228,167,24)" fg:x="691" fg:w="12"/><text x="47.2568%" y="95.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.14%)</title><rect x="47.6871%" y="69" width="0.1361%" height="15" fill="rgb(228,143,12)" fg:x="701" fg:w="2"/><text x="47.9371%" y="79.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.07%)</title><rect x="47.7551%" y="53" width="0.0680%" height="15" fill="rgb(249,149,8)" fg:x="702" fg:w="1"/><text x="48.0051%" y="63.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.07%)</title><rect x="47.7551%" y="37" width="0.0680%" height="15" fill="rgb(243,35,44)" fg:x="702" fg:w="1"/><text x="48.0051%" y="47.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (18 samples, 1.22%)</title><rect x="46.6667%" y="101" width="1.2245%" height="15" fill="rgb(246,89,9)" fg:x="686" fg:w="18"/><text x="46.9167%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="47.8231%" y="85" width="0.0680%" height="15" fill="rgb(233,213,13)" fg:x="703" fg:w="1"/><text x="48.0731%" y="95.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.07%)</title><rect x="47.8912%" y="101" width="0.0680%" height="15" fill="rgb(233,141,41)" fg:x="704" fg:w="1"/><text x="48.1412%" y="111.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (23 samples, 1.56%)</title><rect x="46.5306%" y="133" width="1.5646%" height="15" fill="rgb(239,167,4)" fg:x="684" fg:w="23"/><text x="46.7806%" y="143.50"></text></g><g><title>combine::parser::Parser::parse_mode (23 samples, 1.56%)</title><rect x="46.5306%" y="117" width="1.5646%" height="15" fill="rgb(209,217,16)" fg:x="684" fg:w="23"/><text x="46.7806%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.14%)</title><rect x="47.9592%" y="101" width="0.1361%" height="15" fill="rgb(219,88,35)" fg:x="705" fg:w="2"/><text x="48.2092%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.07%)</title><rect x="48.2313%" y="117" width="0.0680%" height="15" fill="rgb(220,193,23)" fg:x="709" fg:w="1"/><text x="48.4813%" y="127.50"></text></g><g><title>combine::parser::Parser::parse_mode (4 samples, 0.27%)</title><rect x="48.0952%" y="133" width="0.2721%" height="15" fill="rgb(230,90,52)" fg:x="707" fg:w="4"/><text x="48.3452%" y="143.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.07%)</title><rect x="48.2993%" y="117" width="0.0680%" height="15" fill="rgb(252,106,19)" fg:x="710" fg:w="1"/><text x="48.5493%" y="127.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (72 samples, 4.90%)</title><rect x="43.6735%" y="149" width="4.8980%" height="15" fill="rgb(206,74,20)" fg:x="642" fg:w="72"/><text x="43.9235%" y="159.50">combin..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;redis::types::Value,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;alloc::string::String,()&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),(usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),((usize,combine::parser::sequence::PartialState2&lt;combine::parser::sequence::SequenceState&lt;(),usize&gt;,combine::parser::sequence::SequenceState&lt;(),()&gt;&gt;),core::option::Option&lt;(bool,i64)&gt;,core::option::Option&lt;combine::parser::combinator::Either&lt;(),(usize,alloc::vec::Vec&lt;redis::types::Value&gt;,combine::parser::combinator::AnySendSyncPartialState)&gt;&gt;),()&gt;&gt;&gt; (3 samples, 0.20%)</title><rect x="48.3673%" y="133" width="0.2041%" height="15" fill="rgb(230,138,44)" fg:x="711" fg:w="3"/><text x="48.6173%" y="143.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (91 samples, 6.19%)</title><rect x="42.4490%" y="165" width="6.1905%" height="15" fill="rgb(235,182,43)" fg:x="624" fg:w="91"/><text x="42.6990%" y="175.50">&lt;combine..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.07%)</title><rect x="48.5714%" y="149" width="0.0680%" height="15" fill="rgb(242,16,51)" fg:x="714" fg:w="1"/><text x="48.8214%" y="159.50"></text></g><g><title>&lt;tokio_util::codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (141 samples, 9.59%)</title><rect x="39.3197%" y="197" width="9.5918%" height="15" fill="rgb(248,9,4)" fg:x="578" fg:w="141"/><text x="39.5697%" y="207.50">&lt;tokio_util::c..</text></g><g><title>redis::parser::aio_support::ValueCodec::decode_stream (110 samples, 7.48%)</title><rect x="41.4286%" y="181" width="7.4830%" height="15" fill="rgb(210,31,22)" fg:x="609" fg:w="110"/><text x="41.6786%" y="191.50">redis::par..</text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.27%)</title><rect x="48.6395%" y="165" width="0.2721%" height="15" fill="rgb(239,54,39)" fg:x="715" fg:w="4"/><text x="48.8895%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Pre&lt;P&gt; as regex_automata::meta::strategy::Strategy&gt;::is_accelerated (2 samples, 0.14%)</title><rect x="49.7959%" y="181" width="0.1361%" height="15" fill="rgb(230,99,41)" fg:x="732" fg:w="2"/><text x="50.0459%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.07%)</title><rect x="49.9320%" y="181" width="0.0680%" height="15" fill="rgb(253,106,12)" fg:x="734" fg:w="1"/><text x="50.1820%" y="191.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (27 samples, 1.84%)</title><rect x="48.9116%" y="197" width="1.8367%" height="15" fill="rgb(213,46,41)" fg:x="719" fg:w="27"/><text x="49.1616%" y="207.50">&lt;..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (11 samples, 0.75%)</title><rect x="50.0000%" y="181" width="0.7483%" height="15" fill="rgb(215,133,35)" fg:x="735" fg:w="11"/><text x="50.2500%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.14%)</title><rect x="50.6122%" y="165" width="0.1361%" height="15" fill="rgb(213,28,5)" fg:x="744" fg:w="2"/><text x="50.8622%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.07%)</title><rect x="51.7007%" y="181" width="0.0680%" height="15" fill="rgb(215,77,49)" fg:x="760" fg:w="1"/><text x="51.9507%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.07%)</title><rect x="51.7687%" y="181" width="0.0680%" height="15" fill="rgb(248,100,22)" fg:x="761" fg:w="1"/><text x="52.0187%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (3 samples, 0.20%)</title><rect x="52.1088%" y="165" width="0.2041%" height="15" fill="rgb(208,67,9)" fg:x="766" fg:w="3"/><text x="52.3588%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.07%)</title><rect x="52.3129%" y="165" width="0.0680%" height="15" fill="rgb(219,133,21)" fg:x="769" fg:w="1"/><text x="52.5629%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::PipelineSink&lt;T&gt; as futures_sink::Sink&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;&gt;::poll_flush (210 samples, 14.29%)</title><rect x="38.3673%" y="213" width="14.2857%" height="15" fill="rgb(246,46,29)" fg:x="564" fg:w="210"/><text x="38.6173%" y="223.50">&lt;redis::aio::multiplex..</text></g><g><title>redis::aio::multiplexed_connection::PipelineSink&lt;T&gt;::send_result (28 samples, 1.90%)</title><rect x="50.7483%" y="197" width="1.9048%" height="15" fill="rgb(246,185,52)" fg:x="746" fg:w="28"/><text x="50.9983%" y="207.50">r..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (12 samples, 0.82%)</title><rect x="51.8367%" y="181" width="0.8163%" height="15" fill="rgb(252,136,11)" fg:x="762" fg:w="12"/><text x="52.0867%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (4 samples, 0.27%)</title><rect x="52.3810%" y="165" width="0.2721%" height="15" fill="rgb(219,138,53)" fg:x="770" fg:w="4"/><text x="52.6310%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (9 samples, 0.61%)</title><rect x="52.6531%" y="213" width="0.6122%" height="15" fill="rgb(211,51,23)" fg:x="774" fg:w="9"/><text x="52.9031%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.41%)</title><rect x="52.8571%" y="197" width="0.4082%" height="15" fill="rgb(247,221,28)" fg:x="777" fg:w="6"/><text x="53.1071%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.20%)</title><rect x="53.0612%" y="181" width="0.2041%" height="15" fill="rgb(251,222,45)" fg:x="780" fg:w="3"/><text x="53.3112%" y="191.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.20%)</title><rect x="53.2653%" y="213" width="0.2041%" height="15" fill="rgb(217,162,53)" fg:x="783" fg:w="3"/><text x="53.5153%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (8 samples, 0.54%)</title><rect x="53.4694%" y="213" width="0.5442%" height="15" fill="rgb(229,93,14)" fg:x="786" fg:w="8"/><text x="53.7194%" y="223.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (426 samples, 28.98%)</title><rect x="25.1701%" y="229" width="28.9796%" height="15" fill="rgb(209,67,49)" fg:x="370" fg:w="426"/><text x="25.4201%" y="239.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as co..</text></g><g><title>want::Giver::poll_want (2 samples, 0.14%)</title><rect x="54.0136%" y="213" width="0.1361%" height="15" fill="rgb(213,87,29)" fg:x="794" fg:w="2"/><text x="54.2636%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.14%)</title><rect x="54.8299%" y="181" width="0.1361%" height="15" fill="rgb(205,151,52)" fg:x="806" fg:w="2"/><text x="55.0799%" y="191.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.41%)</title><rect x="54.7619%" y="197" width="0.4082%" height="15" fill="rgb(253,215,39)" fg:x="805" fg:w="6"/><text x="55.0119%" y="207.50"></text></g><g><title>ryu::pretty::format64 (3 samples, 0.20%)</title><rect x="54.9660%" y="181" width="0.2041%" height="15" fill="rgb(221,220,41)" fg:x="808" fg:w="3"/><text x="55.2160%" y="191.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.07%)</title><rect x="55.1020%" y="165" width="0.0680%" height="15" fill="rgb(218,133,21)" fg:x="810" fg:w="1"/><text x="55.3520%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::commands::AsyncCommands&gt;::lpush&lt;&amp;str,alloc::string::String,()&gt;::{{closure}}&gt; (1 samples, 0.07%)</title><rect x="55.1701%" y="197" width="0.0680%" height="15" fill="rgb(221,193,43)" fg:x="811" fg:w="1"/><text x="55.4201%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="55.3741%" y="181" width="0.0680%" height="15" fill="rgb(240,128,52)" fg:x="814" fg:w="1"/><text x="55.6241%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="55.3741%" y="165" width="0.0680%" height="15" fill="rgb(253,114,12)" fg:x="814" fg:w="1"/><text x="55.6241%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (3 samples, 0.20%)</title><rect x="55.9864%" y="133" width="0.2041%" height="15" fill="rgb(215,223,47)" fg:x="823" fg:w="3"/><text x="56.2364%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="56.5306%" y="117" width="0.0680%" height="15" fill="rgb(248,225,23)" fg:x="831" fg:w="1"/><text x="56.7806%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;::send::{{closure}}&gt; (1 samples, 0.07%)</title><rect x="56.5986%" y="117" width="0.0680%" height="15" fill="rgb(250,108,0)" fg:x="832" fg:w="1"/><text x="56.8486%" y="127.50"></text></g><g><title>time::parsing::parsable::&lt;impl time::parsing::parsable::sealed::Sealed for time::format_description::well_known::rfc3339::Rfc3339&gt;::parse_offset_date_time::{{closure}} (1 samples, 0.07%)</title><rect x="56.6667%" y="117" width="0.0680%" height="15" fill="rgb(228,208,7)" fg:x="833" fg:w="1"/><text x="56.9167%" y="127.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.07%)</title><rect x="56.7347%" y="117" width="0.0680%" height="15" fill="rgb(244,45,10)" fg:x="834" fg:w="1"/><text x="56.9847%" y="127.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (16 samples, 1.09%)</title><rect x="55.7823%" y="149" width="1.0884%" height="15" fill="rgb(207,125,25)" fg:x="820" fg:w="16"/><text x="56.0323%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (10 samples, 0.68%)</title><rect x="56.1905%" y="133" width="0.6803%" height="15" fill="rgb(210,195,18)" fg:x="826" fg:w="10"/><text x="56.4405%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.07%)</title><rect x="56.8027%" y="117" width="0.0680%" height="15" fill="rgb(249,80,12)" fg:x="835" fg:w="1"/><text x="57.0527%" y="127.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.07%)</title><rect x="56.8707%" y="149" width="0.0680%" height="15" fill="rgb(221,65,9)" fg:x="836" fg:w="1"/><text x="57.1207%" y="159.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (22 samples, 1.50%)</title><rect x="55.5782%" y="165" width="1.4966%" height="15" fill="rgb(235,49,36)" fg:x="817" fg:w="22"/><text x="55.8282%" y="175.50"></text></g><g><title>redis::cmd::write_command (2 samples, 0.14%)</title><rect x="56.9388%" y="149" width="0.1361%" height="15" fill="rgb(225,32,20)" fg:x="837" fg:w="2"/><text x="57.1888%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (2 samples, 0.14%)</title><rect x="57.0748%" y="165" width="0.1361%" height="15" fill="rgb(215,141,46)" fg:x="839" fg:w="2"/><text x="57.3248%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (38 samples, 2.59%)</title><rect x="54.6939%" y="213" width="2.5850%" height="15" fill="rgb(250,160,47)" fg:x="804" fg:w="38"/><text x="54.9439%" y="223.50">&lt;r..</text></g><g><title>redis::commands::AsyncCommands::lpush::{{closure}} (30 samples, 2.04%)</title><rect x="55.2381%" y="197" width="2.0408%" height="15" fill="rgb(216,222,40)" fg:x="812" fg:w="30"/><text x="55.4881%" y="207.50">r..</text></g><g><title>redis::cmd::Cmd::query_async::{{closure}} (27 samples, 1.84%)</title><rect x="55.4422%" y="181" width="1.8367%" height="15" fill="rgb(234,217,39)" fg:x="815" fg:w="27"/><text x="55.6922%" y="191.50">r..</text></g><g><title>redis::types::Value::extract_error (1 samples, 0.07%)</title><rect x="57.2109%" y="165" width="0.0680%" height="15" fill="rgb(207,178,40)" fg:x="841" fg:w="1"/><text x="57.4609%" y="175.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::mpsc_to_redis_worker::mpsc_to_redis_worker::{{closure}} (51 samples, 3.47%)</title><rect x="54.1497%" y="229" width="3.4694%" height="15" fill="rgb(221,136,13)" fg:x="796" fg:w="51"/><text x="54.3997%" y="239.50">rin..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (5 samples, 0.34%)</title><rect x="57.2789%" y="213" width="0.3401%" height="15" fill="rgb(249,199,10)" fg:x="842" fg:w="5"/><text x="57.5289%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (4 samples, 0.27%)</title><rect x="59.4558%" y="213" width="0.2721%" height="15" fill="rgb(249,222,13)" fg:x="874" fg:w="4"/><text x="59.7058%" y="223.50"></text></g><g><title>&lt;url::host::Host&lt;S&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.07%)</title><rect x="60.9524%" y="149" width="0.0680%" height="15" fill="rgb(244,185,38)" fg:x="896" fg:w="1"/><text x="61.2024%" y="159.50"></text></g><g><title>core::fmt::write (3 samples, 0.20%)</title><rect x="60.8844%" y="165" width="0.2041%" height="15" fill="rgb(236,202,9)" fg:x="895" fg:w="3"/><text x="61.1344%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.07%)</title><rect x="61.0204%" y="149" width="0.0680%" height="15" fill="rgb(250,229,37)" fg:x="897" fg:w="1"/><text x="61.2704%" y="159.50"></text></g><g><title>url::ParseOptions::parse (1 samples, 0.07%)</title><rect x="61.0884%" y="165" width="0.0680%" height="15" fill="rgb(206,174,23)" fg:x="898" fg:w="1"/><text x="61.3384%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (4 samples, 0.27%)</title><rect x="61.6327%" y="149" width="0.2721%" height="15" fill="rgb(211,33,43)" fg:x="906" fg:w="4"/><text x="61.8827%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6162 (2 samples, 0.14%)</title><rect x="61.7687%" y="133" width="0.1361%" height="15" fill="rgb(245,58,50)" fg:x="908" fg:w="2"/><text x="62.0187%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.14%)</title><rect x="61.7687%" y="117" width="0.1361%" height="15" fill="rgb(244,68,36)" fg:x="908" fg:w="2"/><text x="62.0187%" y="127.50"></text></g><g><title>url::host::Host::parse (13 samples, 0.88%)</title><rect x="61.1565%" y="165" width="0.8844%" height="15" fill="rgb(232,229,15)" fg:x="899" fg:w="13"/><text x="61.4065%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (2 samples, 0.14%)</title><rect x="61.9048%" y="149" width="0.1361%" height="15" fill="rgb(254,30,23)" fg:x="910" fg:w="2"/><text x="62.1548%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path (4 samples, 0.27%)</title><rect x="62.0408%" y="165" width="0.2721%" height="15" fill="rgb(235,160,14)" fg:x="912" fg:w="4"/><text x="62.2908%" y="175.50"></text></g><g><title>url::parser::Parser::check_url_code_point (1 samples, 0.07%)</title><rect x="62.2449%" y="149" width="0.0680%" height="15" fill="rgb(212,155,44)" fg:x="915" fg:w="1"/><text x="62.4949%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path_start (1 samples, 0.07%)</title><rect x="62.3129%" y="165" width="0.0680%" height="15" fill="rgb(226,2,50)" fg:x="916" fg:w="1"/><text x="62.5629%" y="175.50"></text></g><g><title>&lt;&amp;str as reqwest::into_url::IntoUrlSealed&gt;::into_url (40 samples, 2.72%)</title><rect x="59.7279%" y="213" width="2.7211%" height="15" fill="rgb(234,177,6)" fg:x="878" fg:w="40"/><text x="59.9779%" y="223.50">&lt;&amp;..</text></g><g><title>url::ParseOptions::parse (40 samples, 2.72%)</title><rect x="59.7279%" y="197" width="2.7211%" height="15" fill="rgb(217,24,9)" fg:x="878" fg:w="40"/><text x="59.9779%" y="207.50">ur..</text></g><g><title>url::parser::Parser::after_double_slash (33 samples, 2.24%)</title><rect x="60.2041%" y="181" width="2.2449%" height="15" fill="rgb(220,13,46)" fg:x="885" fg:w="33"/><text x="60.4541%" y="191.50">u..</text></g><g><title>url::parser::Parser::with_query_and_fragment (1 samples, 0.07%)</title><rect x="62.3810%" y="165" width="0.0680%" height="15" fill="rgb(239,221,27)" fg:x="917" fg:w="1"/><text x="62.6310%" y="175.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (1 samples, 0.07%)</title><rect x="62.3810%" y="149" width="0.0680%" height="15" fill="rgb(222,198,25)" fg:x="917" fg:w="1"/><text x="62.6310%" y="159.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.07%)</title><rect x="63.1293%" y="165" width="0.0680%" height="15" fill="rgb(211,99,13)" fg:x="928" fg:w="1"/><text x="63.3793%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4341 (9 samples, 0.61%)</title><rect x="63.1973%" y="165" width="0.6122%" height="15" fill="rgb(232,111,31)" fg:x="929" fg:w="9"/><text x="63.4473%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.27%)</title><rect x="63.5374%" y="149" width="0.2721%" height="15" fill="rgb(245,82,37)" fg:x="934" fg:w="4"/><text x="63.7874%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.14%)</title><rect x="63.6735%" y="133" width="0.1361%" height="15" fill="rgb(227,149,46)" fg:x="936" fg:w="2"/><text x="63.9235%" y="143.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (14 samples, 0.95%)</title><rect x="62.9252%" y="197" width="0.9524%" height="15" fill="rgb(218,36,50)" fg:x="925" fg:w="14"/><text x="63.1752%" y="207.50"></text></g><g><title>core::fmt::write (14 samples, 0.95%)</title><rect x="62.9252%" y="181" width="0.9524%" height="15" fill="rgb(226,80,48)" fg:x="925" fg:w="14"/><text x="63.1752%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.07%)</title><rect x="63.8095%" y="165" width="0.0680%" height="15" fill="rgb(238,224,15)" fg:x="938" fg:w="1"/><text x="64.0595%" y="175.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="64.0816%" y="181" width="0.0680%" height="15" fill="rgb(241,136,10)" fg:x="942" fg:w="1"/><text x="64.3316%" y="191.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.07%)</title><rect x="64.1497%" y="181" width="0.0680%" height="15" fill="rgb(208,32,45)" fg:x="943" fg:w="1"/><text x="64.3997%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::send_request::{{closure}}&gt; (1 samples, 0.07%)</title><rect x="64.2177%" y="181" width="0.0680%" height="15" fill="rgb(207,135,9)" fg:x="944" fg:w="1"/><text x="64.4677%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.07%)</title><rect x="64.2857%" y="181" width="0.0680%" height="15" fill="rgb(206,86,44)" fg:x="945" fg:w="1"/><text x="64.5357%" y="191.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="65.7823%" y="165" width="0.0680%" height="15" fill="rgb(245,177,15)" fg:x="967" fg:w="1"/><text x="66.0323%" y="175.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.07%)</title><rect x="65.7823%" y="149" width="0.0680%" height="15" fill="rgb(206,64,50)" fg:x="967" fg:w="1"/><text x="66.0323%" y="159.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.07%)</title><rect x="65.7823%" y="133" width="0.0680%" height="15" fill="rgb(234,36,40)" fg:x="967" fg:w="1"/><text x="66.0323%" y="143.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.07%)</title><rect x="65.7823%" y="117" width="0.0680%" height="15" fill="rgb(213,64,8)" fg:x="967" fg:w="1"/><text x="66.0323%" y="127.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.07%)</title><rect x="65.7823%" y="101" width="0.0680%" height="15" fill="rgb(210,75,36)" fg:x="967" fg:w="1"/><text x="66.0323%" y="111.50"></text></g><g><title>hyper_util::client::legacy::connect::http::ConnectingTcpRemote::connect::{{closure}} (1 samples, 0.07%)</title><rect x="65.7823%" y="85" width="0.0680%" height="15" fill="rgb(229,88,21)" fg:x="967" fg:w="1"/><text x="66.0323%" y="95.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (1 samples, 0.07%)</title><rect x="65.8503%" y="165" width="0.0680%" height="15" fill="rgb(252,204,47)" fg:x="968" fg:w="1"/><text x="66.1003%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 1.02%)</title><rect x="66.5306%" y="149" width="1.0204%" height="15" fill="rgb(208,77,27)" fg:x="978" fg:w="15"/><text x="66.7806%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.68%)</title><rect x="66.8707%" y="133" width="0.6803%" height="15" fill="rgb(221,76,26)" fg:x="983" fg:w="10"/><text x="67.1207%" y="143.50"></text></g><g><title>hyper_util::client::legacy::pool::Pool&lt;T,K&gt;::reuse (2 samples, 0.14%)</title><rect x="67.5510%" y="149" width="0.1361%" height="15" fill="rgb(225,139,18)" fg:x="993" fg:w="2"/><text x="67.8010%" y="159.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (27 samples, 1.84%)</title><rect x="65.9184%" y="165" width="1.8367%" height="15" fill="rgb(230,137,11)" fg:x="969" fg:w="27"/><text x="66.1684%" y="175.50">&lt;..</text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.07%)</title><rect x="67.6871%" y="149" width="0.0680%" height="15" fill="rgb(212,28,1)" fg:x="995" fg:w="1"/><text x="67.9371%" y="159.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="67.7551%" y="165" width="0.0680%" height="15" fill="rgb(248,164,17)" fg:x="996" fg:w="1"/><text x="68.0051%" y="175.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="67.7551%" y="149" width="0.0680%" height="15" fill="rgb(222,171,42)" fg:x="996" fg:w="1"/><text x="68.0051%" y="159.50"></text></g><g><title>&lt;reqwest::connect::ConnectorService as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call (1 samples, 0.07%)</title><rect x="67.7551%" y="133" width="0.0680%" height="15" fill="rgb(243,84,45)" fg:x="996" fg:w="1"/><text x="68.0051%" y="143.50"></text></g><g><title>reqwest::proxy::Matcher::intercept (1 samples, 0.07%)</title><rect x="67.7551%" y="117" width="0.0680%" height="15" fill="rgb(252,49,23)" fg:x="996" fg:w="1"/><text x="68.0051%" y="127.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (1 samples, 0.07%)</title><rect x="67.7551%" y="101" width="0.0680%" height="15" fill="rgb(215,19,7)" fg:x="996" fg:w="1"/><text x="68.0051%" y="111.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.07%)</title><rect x="67.7551%" y="85" width="0.0680%" height="15" fill="rgb(238,81,41)" fg:x="996" fg:w="1"/><text x="68.0051%" y="95.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (2 samples, 0.14%)</title><rect x="67.8231%" y="165" width="0.1361%" height="15" fill="rgb(210,199,37)" fg:x="997" fg:w="2"/><text x="68.0731%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.20%)</title><rect x="67.9592%" y="165" width="0.2041%" height="15" fill="rgb(244,192,49)" fg:x="999" fg:w="3"/><text x="68.2092%" y="175.50"></text></g><g><title>core::fmt::write (3 samples, 0.20%)</title><rect x="67.9592%" y="149" width="0.2041%" height="15" fill="rgb(226,211,11)" fg:x="999" fg:w="3"/><text x="68.2092%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (2 samples, 0.14%)</title><rect x="68.0272%" y="133" width="0.1361%" height="15" fill="rgb(236,162,54)" fg:x="1000" fg:w="2"/><text x="68.2772%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.14%)</title><rect x="68.1633%" y="165" width="0.1361%" height="15" fill="rgb(220,229,9)" fg:x="1002" fg:w="2"/><text x="68.4133%" y="175.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.07%)</title><rect x="68.2993%" y="165" width="0.0680%" height="15" fill="rgb(250,87,22)" fg:x="1004" fg:w="1"/><text x="68.5493%" y="175.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.07%)</title><rect x="68.3673%" y="165" width="0.0680%" height="15" fill="rgb(239,43,17)" fg:x="1005" fg:w="1"/><text x="68.6173%" y="175.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.14%)</title><rect x="68.4354%" y="165" width="0.1361%" height="15" fill="rgb(231,177,25)" fg:x="1006" fg:w="2"/><text x="68.6854%" y="175.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.07%)</title><rect x="68.6395%" y="149" width="0.0680%" height="15" fill="rgb(219,179,1)" fg:x="1009" fg:w="1"/><text x="68.8895%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}&gt; (3 samples, 0.20%)</title><rect x="68.5714%" y="165" width="0.2041%" height="15" fill="rgb(238,219,53)" fg:x="1008" fg:w="3"/><text x="68.8214%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (1 samples, 0.07%)</title><rect x="68.7075%" y="149" width="0.0680%" height="15" fill="rgb(232,167,36)" fg:x="1010" fg:w="1"/><text x="68.9575%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Checkout&lt;hyper_util::client::legacy::client::PoolClient&lt;reqwest::async_impl::body::Body&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (2 samples, 0.14%)</title><rect x="68.7755%" y="165" width="0.1361%" height="15" fill="rgb(244,19,51)" fg:x="1011" fg:w="2"/><text x="69.0255%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.07%)</title><rect x="68.8435%" y="149" width="0.0680%" height="15" fill="rgb(224,6,22)" fg:x="1012" fg:w="1"/><text x="69.0935%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::ConnectorService&gt; (3 samples, 0.20%)</title><rect x="68.9116%" y="165" width="0.2041%" height="15" fill="rgb(224,145,5)" fg:x="1013" fg:w="3"/><text x="69.1616%" y="175.50"></text></g><g><title>http::header::map::VacantEntry&lt;T&gt;::try_insert (1 samples, 0.07%)</title><rect x="69.1156%" y="165" width="0.0680%" height="15" fill="rgb(234,130,49)" fg:x="1016" fg:w="1"/><text x="69.3656%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.07%)</title><rect x="69.1156%" y="149" width="0.0680%" height="15" fill="rgb(254,6,2)" fg:x="1016" fg:w="1"/><text x="69.3656%" y="159.50"></text></g><g><title>http::uri::authority::Authority::port (5 samples, 0.34%)</title><rect x="69.1837%" y="165" width="0.3401%" height="15" fill="rgb(208,96,46)" fg:x="1017" fg:w="5"/><text x="69.4337%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (4 samples, 0.27%)</title><rect x="69.2517%" y="149" width="0.2721%" height="15" fill="rgb(239,3,39)" fg:x="1018" fg:w="4"/><text x="69.5017%" y="159.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (6 samples, 0.41%)</title><rect x="69.5238%" y="165" width="0.4082%" height="15" fill="rgb(233,210,1)" fg:x="1022" fg:w="6"/><text x="69.7738%" y="175.50"></text></g><g><title>http::uri::builder::Builder::map (3 samples, 0.20%)</title><rect x="69.7279%" y="149" width="0.2041%" height="15" fill="rgb(244,137,37)" fg:x="1025" fg:w="3"/><text x="69.9779%" y="159.50"></text></g><g><title>hyper_util::client::legacy::client::origin_form (1 samples, 0.07%)</title><rect x="69.9320%" y="165" width="0.0680%" height="15" fill="rgb(240,136,2)" fg:x="1028" fg:w="1"/><text x="70.1820%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.07%)</title><rect x="70.0000%" y="165" width="0.0680%" height="15" fill="rgb(239,18,37)" fg:x="1029" fg:w="1"/><text x="70.2500%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.07%)</title><rect x="70.0680%" y="165" width="0.0680%" height="15" fill="rgb(218,185,22)" fg:x="1030" fg:w="1"/><text x="70.3180%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.07%)</title><rect x="70.0680%" y="149" width="0.0680%" height="15" fill="rgb(225,218,4)" fg:x="1030" fg:w="1"/><text x="70.3180%" y="159.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (93 samples, 6.33%)</title><rect x="63.8776%" y="197" width="6.3265%" height="15" fill="rgb(230,182,32)" fg:x="939" fg:w="93"/><text x="64.1276%" y="207.50">&lt;reqwest..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (86 samples, 5.85%)</title><rect x="64.3537%" y="181" width="5.8503%" height="15" fill="rgb(242,56,43)" fg:x="946" fg:w="86"/><text x="64.6037%" y="191.50">hyper_u..</text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (1 samples, 0.07%)</title><rect x="70.1361%" y="165" width="0.0680%" height="15" fill="rgb(233,99,24)" fg:x="1031" fg:w="1"/><text x="70.3861%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.07%)</title><rect x="71.7687%" y="165" width="0.0680%" height="15" fill="rgb(234,209,42)" fg:x="1055" fg:w="1"/><text x="72.0187%" y="175.50"></text></g><g><title>core::fmt::write (1 samples, 0.07%)</title><rect x="71.8367%" y="165" width="0.0680%" height="15" fill="rgb(227,7,12)" fg:x="1056" fg:w="1"/><text x="72.0867%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.07%)</title><rect x="71.8367%" y="149" width="0.0680%" height="15" fill="rgb(245,203,43)" fg:x="1056" fg:w="1"/><text x="72.0867%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.07%)</title><rect x="71.8367%" y="133" width="0.0680%" height="15" fill="rgb(238,205,33)" fg:x="1056" fg:w="1"/><text x="72.0867%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="71.9728%" y="149" width="0.0680%" height="15" fill="rgb(231,56,7)" fg:x="1058" fg:w="1"/><text x="72.2228%" y="159.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.07%)</title><rect x="72.0408%" y="149" width="0.0680%" height="15" fill="rgb(244,186,29)" fg:x="1059" fg:w="1"/><text x="72.2908%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6162 (1 samples, 0.07%)</title><rect x="72.0408%" y="133" width="0.0680%" height="15" fill="rgb(234,111,31)" fg:x="1059" fg:w="1"/><text x="72.2908%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.07%)</title><rect x="72.0408%" y="117" width="0.0680%" height="15" fill="rgb(241,149,10)" fg:x="1059" fg:w="1"/><text x="72.2908%" y="127.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (5 samples, 0.34%)</title><rect x="72.1088%" y="149" width="0.3401%" height="15" fill="rgb(249,206,44)" fg:x="1060" fg:w="5"/><text x="72.3588%" y="159.50"></text></g><g><title>url::host::Host::parse (10 samples, 0.68%)</title><rect x="71.9048%" y="165" width="0.6803%" height="15" fill="rgb(251,153,30)" fg:x="1057" fg:w="10"/><text x="72.1548%" y="175.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (2 samples, 0.14%)</title><rect x="72.4490%" y="149" width="0.1361%" height="15" fill="rgb(239,152,38)" fg:x="1065" fg:w="2"/><text x="72.6990%" y="159.50"></text></g><g><title>url::parser::Parser::parse_path (7 samples, 0.48%)</title><rect x="72.5850%" y="165" width="0.4762%" height="15" fill="rgb(249,139,47)" fg:x="1067" fg:w="7"/><text x="72.8350%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (159 samples, 10.82%)</title><rect x="62.4490%" y="213" width="10.8163%" height="15" fill="rgb(244,64,35)" fg:x="918" fg:w="159"/><text x="62.6990%" y="223.50">&lt;reqwest::async_..</text></g><g><title>url::ParseOptions::parse (45 samples, 3.06%)</title><rect x="70.2041%" y="197" width="3.0612%" height="15" fill="rgb(216,46,15)" fg:x="1032" fg:w="45"/><text x="70.4541%" y="207.50">url..</text></g><g><title>url::parser::Parser::after_double_slash (34 samples, 2.31%)</title><rect x="70.9524%" y="181" width="2.3129%" height="15" fill="rgb(250,74,19)" fg:x="1043" fg:w="34"/><text x="71.2024%" y="191.50">u..</text></g><g><title>url::parser::Parser::parse_path_start (3 samples, 0.20%)</title><rect x="73.0612%" y="165" width="0.2041%" height="15" fill="rgb(249,42,33)" fg:x="1074" fg:w="3"/><text x="73.3112%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (3 samples, 0.20%)</title><rect x="73.6054%" y="197" width="0.2041%" height="15" fill="rgb(242,149,17)" fg:x="1082" fg:w="3"/><text x="73.8554%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="75.0340%" y="133" width="0.0680%" height="15" fill="rgb(244,29,21)" fg:x="1103" fg:w="1"/><text x="75.2840%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;redis::aio::multiplexed_connection::PipelineMessage&gt;::send::{{closure}}&gt; (1 samples, 0.07%)</title><rect x="75.1020%" y="133" width="0.0680%" height="15" fill="rgb(220,130,37)" fg:x="1104" fg:w="1"/><text x="75.3520%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (12 samples, 0.82%)</title><rect x="74.4218%" y="165" width="0.8163%" height="15" fill="rgb(211,67,2)" fg:x="1094" fg:w="12"/><text x="74.6718%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (9 samples, 0.61%)</title><rect x="74.6259%" y="149" width="0.6122%" height="15" fill="rgb(235,68,52)" fg:x="1097" fg:w="9"/><text x="74.8759%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.07%)</title><rect x="75.1701%" y="133" width="0.0680%" height="15" fill="rgb(246,142,3)" fg:x="1105" fg:w="1"/><text x="75.4201%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.07%)</title><rect x="75.1701%" y="117" width="0.0680%" height="15" fill="rgb(241,25,7)" fg:x="1105" fg:w="1"/><text x="75.4201%" y="127.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (15 samples, 1.02%)</title><rect x="74.2857%" y="181" width="1.0204%" height="15" fill="rgb(242,119,39)" fg:x="1092" fg:w="15"/><text x="74.5357%" y="191.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.07%)</title><rect x="75.2381%" y="165" width="0.0680%" height="15" fill="rgb(241,98,45)" fg:x="1106" fg:w="1"/><text x="75.4881%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.34%)</title><rect x="75.3061%" y="181" width="0.3401%" height="15" fill="rgb(254,28,30)" fg:x="1107" fg:w="5"/><text x="75.5561%" y="191.50"></text></g><g><title>core::fmt::write (5 samples, 0.34%)</title><rect x="75.3061%" y="165" width="0.3401%" height="15" fill="rgb(241,142,54)" fg:x="1107" fg:w="5"/><text x="75.5561%" y="175.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (4 samples, 0.27%)</title><rect x="75.3741%" y="149" width="0.2721%" height="15" fill="rgb(222,85,15)" fg:x="1108" fg:w="4"/><text x="75.6241%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (2 samples, 0.14%)</title><rect x="75.5102%" y="133" width="0.1361%" height="15" fill="rgb(210,85,47)" fg:x="1110" fg:w="2"/><text x="75.7602%" y="143.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::is_already_processed::{{closure}} (36 samples, 2.45%)</title><rect x="73.2653%" y="213" width="2.4490%" height="15" fill="rgb(224,206,25)" fg:x="1077" fg:w="36"/><text x="73.5153%" y="223.50">&lt;r..</text></g><g><title>redis::commands::AsyncCommands::zscore::{{closure}} (28 samples, 1.90%)</title><rect x="73.8095%" y="197" width="1.9048%" height="15" fill="rgb(243,201,19)" fg:x="1085" fg:w="28"/><text x="74.0595%" y="207.50">r..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="75.6463%" y="181" width="0.0680%" height="15" fill="rgb(236,59,4)" fg:x="1112" fg:w="1"/><text x="75.8963%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="75.6463%" y="165" width="0.0680%" height="15" fill="rgb(254,179,45)" fg:x="1112" fg:w="1"/><text x="75.8963%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="77.6871%" y="149" width="0.0680%" height="15" fill="rgb(226,14,10)" fg:x="1142" fg:w="1"/><text x="77.9371%" y="159.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (8 samples, 0.54%)</title><rect x="77.3469%" y="181" width="0.5442%" height="15" fill="rgb(244,27,41)" fg:x="1137" fg:w="8"/><text x="77.5969%" y="191.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (8 samples, 0.54%)</title><rect x="77.3469%" y="165" width="0.5442%" height="15" fill="rgb(235,35,32)" fg:x="1137" fg:w="8"/><text x="77.5969%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.14%)</title><rect x="77.7551%" y="149" width="0.1361%" height="15" fill="rgb(218,68,31)" fg:x="1143" fg:w="2"/><text x="78.0051%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.07%)</title><rect x="77.8231%" y="133" width="0.0680%" height="15" fill="rgb(207,120,37)" fg:x="1144" fg:w="1"/><text x="78.0731%" y="143.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.07%)</title><rect x="78.0952%" y="165" width="0.0680%" height="15" fill="rgb(227,98,0)" fg:x="1148" fg:w="1"/><text x="78.3452%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_commands::{{closure}} (20 samples, 1.36%)</title><rect x="77.1429%" y="197" width="1.3605%" height="15" fill="rgb(207,7,3)" fg:x="1134" fg:w="20"/><text x="77.3929%" y="207.50"></text></g><g><title>redis::pipeline::encode_pipeline (9 samples, 0.61%)</title><rect x="77.8912%" y="181" width="0.6122%" height="15" fill="rgb(206,98,19)" fg:x="1145" fg:w="9"/><text x="78.1412%" y="191.50"></text></g><g><title>redis::cmd::write_command (5 samples, 0.34%)</title><rect x="78.1633%" y="165" width="0.3401%" height="15" fill="rgb(217,5,26)" fg:x="1149" fg:w="5"/><text x="78.4133%" y="175.50"></text></g><g><title>&lt;core::fmt::Formatter as powerfmt::ext::FormatterExt&gt;::pad_with_width (1 samples, 0.07%)</title><rect x="78.6395%" y="181" width="0.0680%" height="15" fill="rgb(235,190,38)" fg:x="1156" fg:w="1"/><text x="78.8895%" y="191.50"></text></g><g><title>&lt;time::date::Date as powerfmt::smart_display::SmartDisplay&gt;::metadata (1 samples, 0.07%)</title><rect x="78.7075%" y="149" width="0.0680%" height="15" fill="rgb(247,86,24)" fg:x="1157" fg:w="1"/><text x="78.9575%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (1 samples, 0.07%)</title><rect x="79.1837%" y="117" width="0.0680%" height="15" fill="rgb(205,101,16)" fg:x="1164" fg:w="1"/><text x="79.4337%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="79.1837%" y="101" width="0.0680%" height="15" fill="rgb(246,168,33)" fg:x="1164" fg:w="1"/><text x="79.4337%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (4 samples, 0.27%)</title><rect x="79.0476%" y="133" width="0.2721%" height="15" fill="rgb(231,114,1)" fg:x="1162" fg:w="4"/><text x="79.2976%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.07%)</title><rect x="79.2517%" y="117" width="0.0680%" height="15" fill="rgb(207,184,53)" fg:x="1165" fg:w="1"/><text x="79.5017%" y="127.50"></text></g><g><title>&lt;time::date::Date as core::fmt::Display&gt;::fmt (13 samples, 0.88%)</title><rect x="78.7075%" y="165" width="0.8844%" height="15" fill="rgb(224,95,51)" fg:x="1157" fg:w="13"/><text x="78.9575%" y="175.50"></text></g><g><title>core::fmt::write (12 samples, 0.82%)</title><rect x="78.7755%" y="149" width="0.8163%" height="15" fill="rgb(212,188,45)" fg:x="1158" fg:w="12"/><text x="79.0255%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (4 samples, 0.27%)</title><rect x="79.3197%" y="133" width="0.2721%" height="15" fill="rgb(223,154,38)" fg:x="1166" fg:w="4"/><text x="79.5697%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.20%)</title><rect x="79.3878%" y="117" width="0.2041%" height="15" fill="rgb(251,22,52)" fg:x="1167" fg:w="3"/><text x="79.6378%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4410 (3 samples, 0.20%)</title><rect x="79.3878%" y="101" width="0.2041%" height="15" fill="rgb(229,209,22)" fg:x="1167" fg:w="3"/><text x="79.6378%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="79.5238%" y="85" width="0.0680%" height="15" fill="rgb(234,138,34)" fg:x="1169" fg:w="1"/><text x="79.7738%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="79.5238%" y="69" width="0.0680%" height="15" fill="rgb(212,95,11)" fg:x="1169" fg:w="1"/><text x="79.7738%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (2 samples, 0.14%)</title><rect x="79.8639%" y="117" width="0.1361%" height="15" fill="rgb(240,179,47)" fg:x="1174" fg:w="2"/><text x="80.1139%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (1 samples, 0.07%)</title><rect x="80.0000%" y="101" width="0.0680%" height="15" fill="rgb(240,163,11)" fg:x="1176" fg:w="1"/><text x="80.2500%" y="111.50"></text></g><g><title>&lt;deranged::RangedU8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (5 samples, 0.34%)</title><rect x="79.8639%" y="133" width="0.3401%" height="15" fill="rgb(236,37,12)" fg:x="1174" fg:w="5"/><text x="80.1139%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.20%)</title><rect x="80.0000%" y="117" width="0.2041%" height="15" fill="rgb(232,164,16)" fg:x="1176" fg:w="3"/><text x="80.2500%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.14%)</title><rect x="80.0680%" y="101" width="0.1361%" height="15" fill="rgb(244,205,15)" fg:x="1177" fg:w="2"/><text x="80.3180%" y="111.50"></text></g><g><title>&lt;time::time::Time as core::fmt::Display&gt;::fmt (11 samples, 0.75%)</title><rect x="79.5918%" y="165" width="0.7483%" height="15" fill="rgb(223,117,47)" fg:x="1170" fg:w="11"/><text x="79.8418%" y="175.50"></text></g><g><title>core::fmt::write (11 samples, 0.75%)</title><rect x="79.5918%" y="149" width="0.7483%" height="15" fill="rgb(244,107,35)" fg:x="1170" fg:w="11"/><text x="79.8418%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (2 samples, 0.14%)</title><rect x="80.2041%" y="133" width="0.1361%" height="15" fill="rgb(205,140,8)" fg:x="1179" fg:w="2"/><text x="80.4541%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.07%)</title><rect x="80.2721%" y="117" width="0.0680%" height="15" fill="rgb(228,84,46)" fg:x="1180" fg:w="1"/><text x="80.5221%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.4410 (1 samples, 0.07%)</title><rect x="80.4082%" y="133" width="0.0680%" height="15" fill="rgb(254,188,9)" fg:x="1182" fg:w="1"/><text x="80.6582%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (1 samples, 0.07%)</title><rect x="80.4762%" y="133" width="0.0680%" height="15" fill="rgb(206,112,54)" fg:x="1183" fg:w="1"/><text x="80.7262%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="80.4762%" y="117" width="0.0680%" height="15" fill="rgb(216,84,49)" fg:x="1183" fg:w="1"/><text x="80.7262%" y="127.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (1 samples, 0.07%)</title><rect x="80.5442%" y="133" width="0.0680%" height="15" fill="rgb(214,194,35)" fg:x="1184" fg:w="1"/><text x="80.7942%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.4409 (1 samples, 0.07%)</title><rect x="80.8163%" y="101" width="0.0680%" height="15" fill="rgb(249,28,3)" fg:x="1188" fg:w="1"/><text x="81.0663%" y="111.50"></text></g><g><title>&lt;time::offset_date_time::OffsetDateTime as core::fmt::Display&gt;::fmt (36 samples, 2.45%)</title><rect x="78.5034%" y="197" width="2.4490%" height="15" fill="rgb(222,56,52)" fg:x="1154" fg:w="36"/><text x="78.7534%" y="207.50">&lt;t..</text></g><g><title>core::fmt::write (33 samples, 2.24%)</title><rect x="78.7075%" y="181" width="2.2449%" height="15" fill="rgb(245,217,50)" fg:x="1157" fg:w="33"/><text x="78.9575%" y="191.50">c..</text></g><g><title>&lt;time::utc_offset::UtcOffset as core::fmt::Display&gt;::fmt (9 samples, 0.61%)</title><rect x="80.3401%" y="165" width="0.6122%" height="15" fill="rgb(213,201,24)" fg:x="1181" fg:w="9"/><text x="80.5901%" y="175.50"></text></g><g><title>core::fmt::write (9 samples, 0.61%)</title><rect x="80.3401%" y="149" width="0.6122%" height="15" fill="rgb(248,116,28)" fg:x="1181" fg:w="9"/><text x="80.5901%" y="159.50"></text></g><g><title>&lt;deranged::RangedI8&lt;_,_&gt; as core::fmt::Display&gt;::fmt (5 samples, 0.34%)</title><rect x="80.6122%" y="133" width="0.3401%" height="15" fill="rgb(219,72,43)" fg:x="1185" fg:w="5"/><text x="80.8622%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (4 samples, 0.27%)</title><rect x="80.6803%" y="117" width="0.2721%" height="15" fill="rgb(209,138,14)" fg:x="1186" fg:w="4"/><text x="80.9303%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.07%)</title><rect x="80.8844%" y="101" width="0.0680%" height="15" fill="rgb(222,18,33)" fg:x="1189" fg:w="1"/><text x="81.1344%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.07%)</title><rect x="81.2245%" y="165" width="0.0680%" height="15" fill="rgb(213,199,7)" fg:x="1194" fg:w="1"/><text x="81.4745%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (3 samples, 0.20%)</title><rect x="81.2925%" y="165" width="0.2041%" height="15" fill="rgb(250,110,10)" fg:x="1195" fg:w="3"/><text x="81.5425%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.14%)</title><rect x="81.3605%" y="149" width="0.1361%" height="15" fill="rgb(248,123,6)" fg:x="1196" fg:w="2"/><text x="81.6105%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="81.4286%" y="133" width="0.0680%" height="15" fill="rgb(206,91,31)" fg:x="1197" fg:w="1"/><text x="81.6786%" y="143.50"></text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f64&gt;::fmt (1 samples, 0.07%)</title><rect x="81.4966%" y="165" width="0.0680%" height="15" fill="rgb(211,154,13)" fg:x="1198" fg:w="1"/><text x="81.7466%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (1 samples, 0.07%)</title><rect x="81.6327%" y="149" width="0.0680%" height="15" fill="rgb(225,148,7)" fg:x="1200" fg:w="1"/><text x="81.8827%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (1 samples, 0.07%)</title><rect x="81.6327%" y="133" width="0.0680%" height="15" fill="rgb(220,160,43)" fg:x="1200" fg:w="1"/><text x="81.8827%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (14 samples, 0.95%)</title><rect x="80.9524%" y="197" width="0.9524%" height="15" fill="rgb(213,52,39)" fg:x="1190" fg:w="14"/><text x="81.2024%" y="207.50"></text></g><g><title>core::fmt::write (12 samples, 0.82%)</title><rect x="81.0884%" y="181" width="0.8163%" height="15" fill="rgb(243,137,7)" fg:x="1192" fg:w="12"/><text x="81.3384%" y="191.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (5 samples, 0.34%)</title><rect x="81.5646%" y="165" width="0.3401%" height="15" fill="rgb(230,79,13)" fg:x="1199" fg:w="5"/><text x="81.8146%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (3 samples, 0.20%)</title><rect x="81.7007%" y="149" width="0.2041%" height="15" fill="rgb(247,105,23)" fg:x="1201" fg:w="3"/><text x="81.9507%" y="159.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (1 samples, 0.07%)</title><rect x="81.8367%" y="133" width="0.0680%" height="15" fill="rgb(223,179,41)" fg:x="1203" fg:w="1"/><text x="82.0867%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.14%)</title><rect x="81.9048%" y="197" width="0.1361%" height="15" fill="rgb(218,9,34)" fg:x="1204" fg:w="2"/><text x="82.1548%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="81.9728%" y="181" width="0.0680%" height="15" fill="rgb(222,106,8)" fg:x="1205" fg:w="1"/><text x="82.2228%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6 samples, 0.41%)</title><rect x="82.0408%" y="197" width="0.4082%" height="15" fill="rgb(211,220,0)" fg:x="1206" fg:w="6"/><text x="82.2908%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.14%)</title><rect x="82.3129%" y="181" width="0.1361%" height="15" fill="rgb(229,52,16)" fg:x="1210" fg:w="2"/><text x="82.5629%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::pipeline::Pipeline&gt; (1 samples, 0.07%)</title><rect x="82.4490%" y="197" width="0.0680%" height="15" fill="rgb(212,155,18)" fg:x="1212" fg:w="1"/><text x="82.6990%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.07%)</title><rect x="82.5170%" y="197" width="0.0680%" height="15" fill="rgb(242,21,14)" fg:x="1213" fg:w="1"/><text x="82.7670%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.07%)</title><rect x="82.5850%" y="197" width="0.0680%" height="15" fill="rgb(222,19,48)" fg:x="1214" fg:w="1"/><text x="82.8350%" y="207.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for i128&gt;::write (1 samples, 0.07%)</title><rect x="82.6531%" y="197" width="0.0680%" height="15" fill="rgb(232,45,27)" fg:x="1215" fg:w="1"/><text x="82.9031%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.14%)</title><rect x="82.9252%" y="181" width="0.1361%" height="15" fill="rgb(249,103,42)" fg:x="1219" fg:w="2"/><text x="83.1752%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.07%)</title><rect x="82.9932%" y="165" width="0.0680%" height="15" fill="rgb(246,81,33)" fg:x="1220" fg:w="1"/><text x="83.2432%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (2 samples, 0.14%)</title><rect x="83.0612%" y="181" width="0.1361%" height="15" fill="rgb(252,33,42)" fg:x="1221" fg:w="2"/><text x="83.3112%" y="191.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (8 samples, 0.54%)</title><rect x="82.7211%" y="197" width="0.5442%" height="15" fill="rgb(209,212,41)" fg:x="1216" fg:w="8"/><text x="82.9711%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.07%)</title><rect x="83.1973%" y="181" width="0.0680%" height="15" fill="rgb(207,154,6)" fg:x="1223" fg:w="1"/><text x="83.4473%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (4 samples, 0.27%)</title><rect x="83.2653%" y="197" width="0.2721%" height="15" fill="rgb(223,64,47)" fg:x="1224" fg:w="4"/><text x="83.5153%" y="207.50"></text></g><g><title>redis::types::Value::extract_error (3 samples, 0.20%)</title><rect x="83.3333%" y="181" width="0.2041%" height="15" fill="rgb(211,161,38)" fg:x="1225" fg:w="3"/><text x="83.5833%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::save::{{closure}} (117 samples, 7.96%)</title><rect x="75.7143%" y="213" width="7.9592%" height="15" fill="rgb(219,138,40)" fg:x="1113" fg:w="117"/><text x="75.9643%" y="223.50">&lt;rinha_de_b..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (2 samples, 0.14%)</title><rect x="83.5374%" y="197" width="0.1361%" height="15" fill="rgb(241,228,46)" fg:x="1228" fg:w="2"/><text x="83.7874%" y="207.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.20%)</title><rect x="84.8299%" y="181" width="0.2041%" height="15" fill="rgb(223,209,38)" fg:x="1247" fg:w="3"/><text x="85.0799%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.07%)</title><rect x="84.9660%" y="165" width="0.0680%" height="15" fill="rgb(236,164,45)" fg:x="1249" fg:w="1"/><text x="85.2160%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (2 samples, 0.14%)</title><rect x="85.0340%" y="181" width="0.1361%" height="15" fill="rgb(231,15,5)" fg:x="1250" fg:w="2"/><text x="85.2840%" y="191.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.07%)</title><rect x="85.1701%" y="181" width="0.0680%" height="15" fill="rgb(252,35,15)" fg:x="1252" fg:w="1"/><text x="85.4201%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.07%)</title><rect x="85.2381%" y="181" width="0.0680%" height="15" fill="rgb(248,181,18)" fg:x="1253" fg:w="1"/><text x="85.4881%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (23 samples, 1.56%)</title><rect x="84.1497%" y="197" width="1.5646%" height="15" fill="rgb(233,39,42)" fg:x="1237" fg:w="23"/><text x="84.3997%" y="207.50"></text></g><g><title>uuid::parser::&lt;impl core::str::traits::FromStr for uuid::Uuid&gt;::from_str (6 samples, 0.41%)</title><rect x="85.3061%" y="181" width="0.4082%" height="15" fill="rgb(238,110,33)" fg:x="1254" fg:w="6"/><text x="85.5561%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.07%)</title><rect x="85.7143%" y="197" width="0.0680%" height="15" fill="rgb(233,195,10)" fg:x="1260" fg:w="1"/><text x="85.9643%" y="207.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (8 samples, 0.54%)</title><rect x="85.7823%" y="197" width="0.5442%" height="15" fill="rgb(254,105,3)" fg:x="1261" fg:w="8"/><text x="86.0323%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::MultiplexedConnection&gt; (2 samples, 0.14%)</title><rect x="86.3265%" y="197" width="0.1361%" height="15" fill="rgb(221,225,9)" fg:x="1269" fg:w="2"/><text x="86.5765%" y="207.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_owned_redis_value (2 samples, 0.14%)</title><rect x="87.0068%" y="165" width="0.1361%" height="15" fill="rgb(224,227,45)" fg:x="1279" fg:w="2"/><text x="87.2568%" y="175.50"></text></g><g><title>&lt;(T1,T2) as redis::types::FromRedisValue&gt;::from_owned_redis_value (4 samples, 0.27%)</title><rect x="87.0068%" y="181" width="0.2721%" height="15" fill="rgb(229,198,43)" fg:x="1279" fg:w="4"/><text x="87.2568%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (2 samples, 0.14%)</title><rect x="87.1429%" y="165" width="0.1361%" height="15" fill="rgb(206,209,35)" fg:x="1281" fg:w="2"/><text x="87.3929%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}}&gt; (1 samples, 0.07%)</title><rect x="87.7551%" y="149" width="0.0680%" height="15" fill="rgb(245,195,53)" fg:x="1290" fg:w="1"/><text x="88.0051%" y="159.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="88.5714%" y="133" width="0.0680%" height="15" fill="rgb(240,92,26)" fg:x="1302" fg:w="1"/><text x="88.8214%" y="143.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}} (16 samples, 1.09%)</title><rect x="87.6190%" y="165" width="1.0884%" height="15" fill="rgb(207,40,23)" fg:x="1288" fg:w="16"/><text x="87.8690%" y="175.50"></text></g><g><title>redis::aio::multiplexed_connection::Pipeline::send_recv::{{closure}}::{{closure}} (13 samples, 0.88%)</title><rect x="87.8231%" y="149" width="0.8844%" height="15" fill="rgb(223,111,35)" fg:x="1291" fg:w="13"/><text x="88.0731%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.07%)</title><rect x="88.6395%" y="133" width="0.0680%" height="15" fill="rgb(229,147,28)" fg:x="1303" fg:w="1"/><text x="88.8895%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.07%)</title><rect x="88.6395%" y="117" width="0.0680%" height="15" fill="rgb(211,29,28)" fg:x="1303" fg:w="1"/><text x="88.8895%" y="127.50"></text></g><g><title>redis::cmd::args_len (1 samples, 0.07%)</title><rect x="88.7075%" y="165" width="0.0680%" height="15" fill="rgb(228,72,33)" fg:x="1304" fg:w="1"/><text x="88.9575%" y="175.50"></text></g><g><title>&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}} (23 samples, 1.56%)</title><rect x="87.2789%" y="181" width="1.5646%" height="15" fill="rgb(205,214,31)" fg:x="1283" fg:w="23"/><text x="87.5289%" y="191.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.07%)</title><rect x="88.7755%" y="165" width="0.0680%" height="15" fill="rgb(224,111,15)" fg:x="1305" fg:w="1"/><text x="89.0255%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.14%)</title><rect x="88.8435%" y="181" width="0.1361%" height="15" fill="rgb(253,21,26)" fg:x="1306" fg:w="2"/><text x="89.0935%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;redis::aio::multiplexed_connection::MultiplexedConnection as redis::aio::ConnectionLike&gt;::req_packed_command::{{closure}}&gt; (1 samples, 0.07%)</title><rect x="88.9796%" y="181" width="0.0680%" height="15" fill="rgb(245,139,43)" fg:x="1308" fg:w="1"/><text x="89.2296%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.07%)</title><rect x="89.0476%" y="181" width="0.0680%" height="15" fill="rgb(252,170,7)" fg:x="1309" fg:w="1"/><text x="89.2976%" y="191.50"></text></g><g><title>redis::types::Value::extract_error (1 samples, 0.07%)</title><rect x="89.0476%" y="165" width="0.0680%" height="15" fill="rgb(231,118,14)" fg:x="1309" fg:w="1"/><text x="89.2976%" y="175.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::pop::{{closure}} (83 samples, 5.65%)</title><rect x="83.6735%" y="213" width="5.6463%" height="15" fill="rgb(238,83,0)" fg:x="1230" fg:w="83"/><text x="83.9235%" y="223.50">&lt;rinha_..</text></g><g><title>redis::commands::AsyncCommands::brpop::{{closure}} (42 samples, 2.86%)</title><rect x="86.4626%" y="197" width="2.8571%" height="15" fill="rgb(221,39,39)" fg:x="1271" fg:w="42"/><text x="86.7126%" y="207.50">re..</text></g><g><title>ryu::pretty::format64 (3 samples, 0.20%)</title><rect x="89.1156%" y="181" width="0.2041%" height="15" fill="rgb(222,119,46)" fg:x="1310" fg:w="3"/><text x="89.3656%" y="191.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::queue::redis_payment_queue::PaymentQueue as rinha_de_backend::domain::queue::Queue&lt;rinha_de_backend::domain::payment::Payment&gt;&gt;::push::{{closure}} (1 samples, 0.07%)</title><rect x="89.3197%" y="213" width="0.0680%" height="15" fill="rgb(222,165,49)" fg:x="1313" fg:w="1"/><text x="89.5697%" y="223.50"></text></g><g><title>&lt;rinha_de_backend::infrastructure::routing::in_memory_payment_router::InMemoryPaymentRouter as rinha_de_backend::domain::payment_router::PaymentRouter&gt;::get_processor_for_payment::{{closure}} (2 samples, 0.14%)</title><rect x="89.3878%" y="213" width="0.1361%" height="15" fill="rgb(219,113,52)" fg:x="1314" fg:w="2"/><text x="89.6378%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.34%)</title><rect x="89.5238%" y="213" width="0.3401%" height="15" fill="rgb(214,7,15)" fg:x="1316" fg:w="5"/><text x="89.7738%" y="223.50"></text></g><g><title>core::fmt::write (3 samples, 0.20%)</title><rect x="89.6599%" y="197" width="0.2041%" height="15" fill="rgb(235,32,4)" fg:x="1318" fg:w="3"/><text x="89.9099%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str.2144 (3 samples, 0.20%)</title><rect x="89.6599%" y="181" width="0.2041%" height="15" fill="rgb(238,90,54)" fg:x="1318" fg:w="3"/><text x="89.9099%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.20%)</title><rect x="89.6599%" y="165" width="0.2041%" height="15" fill="rgb(213,208,19)" fg:x="1318" fg:w="3"/><text x="89.9099%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.14%)</title><rect x="89.7279%" y="149" width="0.1361%" height="15" fill="rgb(233,156,4)" fg:x="1319" fg:w="2"/><text x="89.9779%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rinha_de_backend::infrastructure::persistence::redis_payment_repository::RedisPaymentRepository as rinha_de_backend::domain::repository::PaymentRepository&gt;::clear::{{closure}}&gt; (2 samples, 0.14%)</title><rect x="89.8639%" y="213" width="0.1361%" height="15" fill="rgb(207,194,5)" fg:x="1321" fg:w="2"/><text x="90.1139%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="90.0000%" y="213" width="0.0680%" height="15" fill="rgb(206,111,30)" fg:x="1323" fg:w="1"/><text x="90.2500%" y="223.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.07%)</title><rect x="90.2041%" y="197" width="0.0680%" height="15" fill="rgb(243,70,54)" fg:x="1326" fg:w="1"/><text x="90.4541%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}}&gt; (1 samples, 0.07%)</title><rect x="90.2721%" y="197" width="0.0680%" height="15" fill="rgb(242,28,8)" fg:x="1327" fg:w="1"/><text x="90.5221%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (4 samples, 0.27%)</title><rect x="90.3401%" y="197" width="0.2721%" height="15" fill="rgb(219,106,18)" fg:x="1328" fg:w="4"/><text x="90.5901%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (9 samples, 0.61%)</title><rect x="90.0680%" y="213" width="0.6122%" height="15" fill="rgb(244,222,10)" fg:x="1324" fg:w="9"/><text x="90.3180%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::async_impl::client::HyperService&gt; (1 samples, 0.07%)</title><rect x="90.6122%" y="197" width="0.0680%" height="15" fill="rgb(236,179,52)" fg:x="1332" fg:w="1"/><text x="90.8622%" y="207.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (4 samples, 0.27%)</title><rect x="90.8844%" y="181" width="0.2721%" height="15" fill="rgb(213,23,39)" fg:x="1336" fg:w="4"/><text x="91.1344%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;,tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;::new&lt;tower::util::map_err::MapErr&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;reqwest::connect::sealed::Unnameable,reqwest::connect::sealed::Conn,alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::connect::ConnectorBuilder::build::{{closure}}&gt;&gt;::{{closure}}&gt;&gt; (8 samples, 0.54%)</title><rect x="90.6803%" y="213" width="0.5442%" height="15" fill="rgb(238,48,10)" fg:x="1333" fg:w="8"/><text x="90.9303%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (7 samples, 0.48%)</title><rect x="90.7483%" y="197" width="0.4762%" height="15" fill="rgb(251,196,23)" fg:x="1334" fg:w="7"/><text x="90.9983%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.07%)</title><rect x="91.1565%" y="181" width="0.0680%" height="15" fill="rgb(250,152,24)" fg:x="1340" fg:w="1"/><text x="91.4065%" y="191.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (2 samples, 0.14%)</title><rect x="91.2245%" y="213" width="0.1361%" height="15" fill="rgb(209,150,17)" fg:x="1341" fg:w="2"/><text x="91.4745%" y="223.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.54%)</title><rect x="92.7211%" y="197" width="0.5442%" height="15" fill="rgb(234,202,34)" fg:x="1363" fg:w="8"/><text x="92.9711%" y="207.50"></text></g><g><title>bytes::bytes::static_clone (1 samples, 0.07%)</title><rect x="93.1973%" y="181" width="0.0680%" height="15" fill="rgb(253,148,53)" fg:x="1370" fg:w="1"/><text x="93.4473%" y="191.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (1 samples, 0.07%)</title><rect x="93.2653%" y="197" width="0.0680%" height="15" fill="rgb(218,129,16)" fg:x="1371" fg:w="1"/><text x="93.5153%" y="207.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (7 samples, 0.48%)</title><rect x="93.3333%" y="197" width="0.4762%" height="15" fill="rgb(216,85,19)" fg:x="1372" fg:w="7"/><text x="93.5833%" y="207.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (4 samples, 0.27%)</title><rect x="94.0136%" y="181" width="0.2721%" height="15" fill="rgb(235,228,7)" fg:x="1382" fg:w="4"/><text x="94.2636%" y="191.50"></text></g><g><title>core::fmt::write (2 samples, 0.14%)</title><rect x="94.1497%" y="165" width="0.1361%" height="15" fill="rgb(245,175,0)" fg:x="1384" fg:w="2"/><text x="94.3997%" y="175.50"></text></g><g><title>core::fmt::write (3 samples, 0.20%)</title><rect x="94.7619%" y="149" width="0.2041%" height="15" fill="rgb(208,168,36)" fg:x="1393" fg:w="3"/><text x="95.0119%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (2 samples, 0.14%)</title><rect x="94.8299%" y="133" width="0.1361%" height="15" fill="rgb(246,171,24)" fg:x="1394" fg:w="2"/><text x="95.0799%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.14%)</title><rect x="94.8299%" y="117" width="0.1361%" height="15" fill="rgb(215,142,24)" fg:x="1394" fg:w="2"/><text x="95.0799%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="94.9660%" y="133" width="0.0680%" height="15" fill="rgb(250,187,7)" fg:x="1396" fg:w="1"/><text x="95.2160%" y="143.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.07%)</title><rect x="95.0340%" y="133" width="0.0680%" height="15" fill="rgb(228,66,33)" fg:x="1397" fg:w="1"/><text x="95.2840%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back.6162 (1 samples, 0.07%)</title><rect x="95.0340%" y="117" width="0.0680%" height="15" fill="rgb(234,215,21)" fg:x="1397" fg:w="1"/><text x="95.2840%" y="127.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.07%)</title><rect x="95.0340%" y="101" width="0.0680%" height="15" fill="rgb(222,191,20)" fg:x="1397" fg:w="1"/><text x="95.2840%" y="111.50"></text></g><g><title>idna::uts46::Uts46::process_innermost (3 samples, 0.20%)</title><rect x="95.1020%" y="133" width="0.2041%" height="15" fill="rgb(245,79,54)" fg:x="1398" fg:w="3"/><text x="95.3520%" y="143.50"></text></g><g><title>url::host::Host::parse (6 samples, 0.41%)</title><rect x="94.9660%" y="149" width="0.4082%" height="15" fill="rgb(240,10,37)" fg:x="1396" fg:w="6"/><text x="95.2160%" y="159.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (1 samples, 0.07%)</title><rect x="95.3061%" y="133" width="0.0680%" height="15" fill="rgb(214,192,32)" fg:x="1401" fg:w="1"/><text x="95.5561%" y="143.50"></text></g><g><title>url::parser::Parser::parse_path (5 samples, 0.34%)</title><rect x="95.3741%" y="149" width="0.3401%" height="15" fill="rgb(209,36,54)" fg:x="1402" fg:w="5"/><text x="95.6241%" y="159.50"></text></g><g><title>url::parser::Parser::with_query_and_fragment (2 samples, 0.14%)</title><rect x="95.7143%" y="149" width="0.1361%" height="15" fill="rgb(220,10,11)" fg:x="1407" fg:w="2"/><text x="95.9643%" y="159.50"></text></g><g><title>url::parser::Parser::parse_query_and_fragment (1 samples, 0.07%)</title><rect x="95.7823%" y="133" width="0.0680%" height="15" fill="rgb(221,106,17)" fg:x="1408" fg:w="1"/><text x="96.0323%" y="143.50"></text></g><g><title>&lt;reqwest::redirect::TowerRedirectPolicy as tower_http::follow_redirect::policy::Policy&lt;reqwest::async_impl::body::Body,reqwest::error::Error&gt;&gt;::on_request (31 samples, 2.11%)</title><rect x="93.8095%" y="197" width="2.1088%" height="15" fill="rgb(251,142,44)" fg:x="1379" fg:w="31"/><text x="94.0595%" y="207.50">&lt;..</text></g><g><title>url::ParseOptions::parse (24 samples, 1.63%)</title><rect x="94.2857%" y="181" width="1.6327%" height="15" fill="rgb(238,13,15)" fg:x="1386" fg:w="24"/><text x="94.5357%" y="191.50"></text></g><g><title>url::parser::Parser::after_double_slash (23 samples, 1.56%)</title><rect x="94.3537%" y="165" width="1.5646%" height="15" fill="rgb(208,107,27)" fg:x="1387" fg:w="23"/><text x="94.6037%" y="175.50"></text></g><g><title>url::parser::default_port (1 samples, 0.07%)</title><rect x="95.8503%" y="149" width="0.0680%" height="15" fill="rgb(205,136,37)" fg:x="1409" fg:w="1"/><text x="96.1003%" y="159.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 0.07%)</title><rect x="95.9184%" y="197" width="0.0680%" height="15" fill="rgb(250,205,27)" fg:x="1410" fg:w="1"/><text x="96.1684%" y="207.50"></text></g><g><title>bytes::bytes::shared_clone (2 samples, 0.14%)</title><rect x="95.9864%" y="197" width="0.1361%" height="15" fill="rgb(210,80,43)" fg:x="1411" fg:w="2"/><text x="96.2364%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn http::extensions::AnyClone+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="96.1224%" y="197" width="0.0680%" height="15" fill="rgb(247,160,36)" fg:x="1413" fg:w="1"/><text x="96.3724%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::follow_redirect::FollowRedirect&lt;reqwest::async_impl::client::HyperService,reqwest::redirect::TowerRedirectPolicy&gt;&gt; (1 samples, 0.07%)</title><rect x="96.1905%" y="197" width="0.0680%" height="15" fill="rgb(234,13,49)" fg:x="1414" fg:w="1"/><text x="96.4405%" y="207.50"></text></g><g><title>http::header::map::hash_elem_using (4 samples, 0.27%)</title><rect x="96.2585%" y="197" width="0.2721%" height="15" fill="rgb(234,122,0)" fg:x="1415" fg:w="4"/><text x="96.5085%" y="207.50"></text></g><g><title>bytes::bytes::Bytes::split_to (2 samples, 0.14%)</title><rect x="97.0068%" y="181" width="0.1361%" height="15" fill="rgb(207,146,38)" fg:x="1426" fg:w="2"/><text x="97.2568%" y="191.50"></text></g><g><title>http::uri::Uri::from_shared (10 samples, 0.68%)</title><rect x="96.5306%" y="197" width="0.6803%" height="15" fill="rgb(207,177,25)" fg:x="1419" fg:w="10"/><text x="96.7806%" y="207.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.07%)</title><rect x="97.1429%" y="181" width="0.0680%" height="15" fill="rgb(211,178,42)" fg:x="1428" fg:w="1"/><text x="97.3929%" y="191.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.07%)</title><rect x="97.3469%" y="165" width="0.0680%" height="15" fill="rgb(230,69,54)" fg:x="1431" fg:w="1"/><text x="97.5969%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr (6 samples, 0.41%)</title><rect x="97.4150%" y="165" width="0.4082%" height="15" fill="rgb(214,135,41)" fg:x="1432" fg:w="6"/><text x="97.6650%" y="175.50"></text></g><g><title>core::net::parser::Parser::read_ipv6_addr::read_groups (5 samples, 0.34%)</title><rect x="97.4830%" y="149" width="0.3401%" height="15" fill="rgb(237,67,25)" fg:x="1433" fg:w="5"/><text x="97.7330%" y="159.50"></text></g><g><title>core::net::parser::Parser::read_number::{{closure}} (2 samples, 0.14%)</title><rect x="97.6871%" y="133" width="0.1361%" height="15" fill="rgb(222,189,50)" fg:x="1436" fg:w="2"/><text x="97.9371%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match.2163 (1 samples, 0.07%)</title><rect x="97.8912%" y="149" width="0.0680%" height="15" fill="rgb(245,148,34)" fg:x="1439" fg:w="1"/><text x="98.1412%" y="159.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (100 samples, 6.80%)</title><rect x="91.3605%" y="213" width="6.8027%" height="15" fill="rgb(222,29,6)" fg:x="1343" fg:w="100"/><text x="91.6105%" y="223.50">reqwest::..</text></g><g><title>reqwest::proxy::Matcher::intercept (14 samples, 0.95%)</title><rect x="97.2109%" y="197" width="0.9524%" height="15" fill="rgb(221,189,43)" fg:x="1429" fg:w="14"/><text x="97.4609%" y="207.50"></text></g><g><title>hyper_util::client::proxy::matcher::Matcher::intercept (14 samples, 0.95%)</title><rect x="97.2109%" y="181" width="0.9524%" height="15" fill="rgb(207,36,27)" fg:x="1429" fg:w="14"/><text x="97.4609%" y="191.50"></text></g><g><title>http::uri::authority::host (5 samples, 0.34%)</title><rect x="97.8231%" y="165" width="0.3401%" height="15" fill="rgb(217,90,24)" fg:x="1438" fg:w="5"/><text x="98.0731%" y="175.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_back (3 samples, 0.20%)</title><rect x="97.9592%" y="149" width="0.2041%" height="15" fill="rgb(224,66,35)" fg:x="1440" fg:w="3"/><text x="98.2092%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (2 samples, 0.14%)</title><rect x="98.0272%" y="133" width="0.1361%" height="15" fill="rgb(221,13,50)" fg:x="1441" fg:w="2"/><text x="98.2772%" y="143.50"></text></g><g><title>core::slice::memchr::memrchr (2 samples, 0.14%)</title><rect x="98.0272%" y="117" width="0.1361%" height="15" fill="rgb(236,68,49)" fg:x="1441" fg:w="2"/><text x="98.2772%" y="127.50"></text></g><g><title>ryu::pretty::format64 (7 samples, 0.48%)</title><rect x="98.1633%" y="213" width="0.4762%" height="15" fill="rgb(229,146,28)" fg:x="1443" fg:w="7"/><text x="98.4133%" y="223.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (2 samples, 0.14%)</title><rect x="98.5034%" y="197" width="0.1361%" height="15" fill="rgb(225,31,38)" fg:x="1448" fg:w="2"/><text x="98.7534%" y="207.50"></text></g><g><title>time::offset_date_time::OffsetDateTime::now_utc (3 samples, 0.20%)</title><rect x="98.6395%" y="213" width="0.2041%" height="15" fill="rgb(250,208,3)" fg:x="1450" fg:w="3"/><text x="98.8895%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.07%)</title><rect x="99.1156%" y="197" width="0.0680%" height="15" fill="rgb(246,54,23)" fg:x="1457" fg:w="1"/><text x="99.3656%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="99.1837%" y="197" width="0.0680%" height="15" fill="rgb(243,76,11)" fg:x="1458" fg:w="1"/><text x="99.4337%" y="207.50"></text></g><g><title>time::serde::rfc3339::option::serialize (11 samples, 0.75%)</title><rect x="98.8435%" y="213" width="0.7483%" height="15" fill="rgb(245,21,50)" fg:x="1453" fg:w="11"/><text x="99.0935%" y="223.50"></text></g><g><title>time::formatting::format_number_pad_zero (5 samples, 0.34%)</title><rect x="99.2517%" y="197" width="0.3401%" height="15" fill="rgb(228,9,43)" fg:x="1459" fg:w="5"/><text x="99.5017%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="99.5238%" y="181" width="0.0680%" height="15" fill="rgb(208,100,47)" fg:x="1463" fg:w="1"/><text x="99.7738%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="99.5238%" y="165" width="0.0680%" height="15" fill="rgb(232,26,8)" fg:x="1463" fg:w="1"/><text x="99.7738%" y="175.50"></text></g><g><title>rinha_de_backend::infrastructure::workers::payment_processor_worker::payment_processing_worker::{{closure}} (621 samples, 42.24%)</title><rect x="57.6190%" y="229" width="42.2449%" height="15" fill="rgb(216,166,38)" fg:x="847" fg:w="621"/><text x="57.8690%" y="239.50">rinha_de_backend::infrastructure::workers::payment_processor_worker::..</text></g><g><title>uuid::fmt::&lt;impl core::fmt::Display for uuid::Uuid&gt;::fmt (4 samples, 0.27%)</title><rect x="99.5918%" y="213" width="0.2721%" height="15" fill="rgb(251,202,51)" fg:x="1464" fg:w="4"/><text x="99.8418%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.07%)</title><rect x="99.7959%" y="197" width="0.0680%" height="15" fill="rgb(254,216,34)" fg:x="1467" fg:w="1"/><text x="100.0459%" y="207.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.07%)</title><rect x="99.8639%" y="229" width="0.0680%" height="15" fill="rgb(251,32,27)" fg:x="1468" fg:w="1"/><text x="100.1139%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::Map&lt;hyper_util::common::future::PollFn&lt;hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::try_send_request::{{closure}}::{{closure}}&gt;,hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::try_send_request::{{closure}}::{{closure}}&gt;&gt; (1 samples, 0.07%)</title><rect x="99.8639%" y="213" width="0.0680%" height="15" fill="rgb(208,127,28)" fg:x="1468" fg:w="1"/><text x="100.1139%" y="223.50"></text></g><g><title>all (1,470 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(224,137,22)" fg:x="0" fg:w="1470"/><text x="0.2500%" y="367.50"></text></g><g><title>rinha-de-backen (1,216 samples, 82.72%)</title><rect x="17.2789%" y="341" width="82.7211%" height="15" fill="rgb(254,70,32)" fg:x="254" fg:w="1216"/><text x="17.5289%" y="351.50">rinha-de-backen</text></g><g><title>_start (1,216 samples, 82.72%)</title><rect x="17.2789%" y="325" width="82.7211%" height="15" fill="rgb(229,75,37)" fg:x="254" fg:w="1216"/><text x="17.5289%" y="335.50">_start</text></g><g><title>__libc_start_main (1,216 samples, 82.72%)</title><rect x="17.2789%" y="309" width="82.7211%" height="15" fill="rgb(252,64,23)" fg:x="254" fg:w="1216"/><text x="17.5289%" y="319.50">__libc_start_main</text></g><g><title>main (1,216 samples, 82.72%)</title><rect x="17.2789%" y="293" width="82.7211%" height="15" fill="rgb(232,162,48)" fg:x="254" fg:w="1216"/><text x="17.5289%" y="303.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,216 samples, 82.72%)</title><rect x="17.2789%" y="277" width="82.7211%" height="15" fill="rgb(246,160,12)" fg:x="254" fg:w="1216"/><text x="17.5289%" y="287.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rinha_de_backend::main (1,216 samples, 82.72%)</title><rect x="17.2789%" y="261" width="82.7211%" height="15" fill="rgb(247,166,0)" fg:x="254" fg:w="1216"/><text x="17.5289%" y="271.50">rinha_de_backend::main</text></g><g><title>tokio::runtime::task::raw::poll (1,128 samples, 76.73%)</title><rect x="23.2653%" y="245" width="76.7347%" height="15" fill="rgb(249,219,21)" fg:x="342" fg:w="1128"/><text x="23.5153%" y="255.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.07%)</title><rect x="99.9320%" y="229" width="0.0680%" height="15" fill="rgb(205,209,3)" fg:x="1469" fg:w="1"/><text x="100.1820%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::release (1 samples, 0.07%)</title><rect x="99.9320%" y="213" width="0.0680%" height="15" fill="rgb(243,44,1)" fg:x="1469" fg:w="1"/><text x="100.1820%" y="223.50"></text></g></svg></svg>