name: Continuous Integration

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  check:
    name: Check
    runs-on: ubuntu-24.04
    steps:
      - name: 🛠️ Install toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Checkout
        uses: actions/checkout@v5

      - name: ✅ Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --verbose

      - name: ✅ Check without default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --no-default-features --verbose

  clippy:
    name: Lints
    runs-on: ubuntu-24.04
    steps:
      - name: 🛠️ Install toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - name: 📦 Checkout
        uses: actions/checkout@v5
      - name: 🔍 Check the lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --tests --verbose -- -D warnings
      - name: 🔍 Check the pedantic lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --verbose -- -W clippy::pedantic

  rustfmt:
    name: Formatting
    runs-on: ubuntu-24.04
    steps:
      - name: 🛠️ Install toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - name: 📦 Checkout
        uses: actions/checkout@v5
      - name: 📝 Check the formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check --verbose

  test:
    name: Test 
    runs-on: ubuntu-24.04
    steps:
      - name: 🛠️ Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - name: 📦 Checkout
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📦 Checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: ⚙️ Setup cargo-tarpaulin
        uses: taiki-e/install-action@cargo-tarpaulin

      - name: 💾 Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: 🐳 Set up Docker
        uses: docker-practice/actions-setup-docker@master

      - name: 🧪 Run tests 
        run: |
          cargo tarpaulin --out Lcov --all-features \
            -- --skip "repo::test::git_upstream_remote"
        env:
          RUST_LOG: info

      - name: 📊 Generate clippy report
        run: |
          cargo clippy --message-format json > clippy-report.json
        env:
          RUST_LOG: info

      - name: 💾 Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-sonar

      - name: 🔎 SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}